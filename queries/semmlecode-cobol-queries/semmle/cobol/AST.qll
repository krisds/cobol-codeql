/*
 *      This query library is auto-generated by 'lib/query_gen.py'.
 *      WARNING: Any modifications to this file will be lost.
 *      Relations can be changed by modifying the AST definition.
 */

import cobol

library class AbbrLogAndExpr_ extends @abbr_log_and_expr, AbbrLogExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `AbbrLogAndExpr`. */
    override AbbrLogExpr getLeftOperand() { expr(result, _, this, 458467) }

    /** Get the right operand of this `AbbrLogAndExpr`. */
    override AbbrLogExpr getRightOperand() { expr(result, _, this, 3554934) }

    override string toString() { result = "AbbrLogAndExpr" }

}

library class AbbrLogExpr_ extends @abbr_log_expr, Expr, RelationObject {

    override AstNode getParent() { none() }

    override string toString() { result = "AbbrLogExpr" }

}

library class AbbrLogNotExpr_ extends @abbr_log_not_expr, AbbrLogExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the expression of this `AbbrLogNotExpr`. */
    AbbrLogExpr getExpression() { expr(result, _, this, 73166051) }

    override string toString() { result = "AbbrLogNotExpr" }

}

library class AbbrLogOrExpr_ extends @abbr_log_or_expr, AbbrLogExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `AbbrLogOrExpr`. */
    override AbbrLogExpr getLeftOperand() { expr(result, _, this, 458467) }

    /** Get the right operand of this `AbbrLogOrExpr`. */
    override AbbrLogExpr getRightOperand() { expr(result, _, this, 3554934) }

    override string toString() { result = "AbbrLogOrExpr" }

}

library class AbbrNotSignConditionExpr_ extends @abbr_not_sign_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the sign type of this `AbbrNotSignConditionExpr`. */
    string getSignType() { abbr_not_sign_condition_expr_sign_type(this, 74014681, result) }

    override string toString() { result = "AbbrNotSignConditionExpr" }

}

library class AbbrSignConditionExpr_ extends @abbr_sign_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the sign type of this `AbbrSignConditionExpr`. */
    string getSignType() { abbr_sign_condition_expr_sign_type(this, 74014681, result) }

    override string toString() { result = "AbbrSignConditionExpr" }

}

library class Accept_ extends @accept, Stmt {

    /** Get the not on escape of this `Accept`. */
    NotOnEscapeBranch getNotOnEscape() { branch(result, _, this, 81748194) }

    /** Get the not on exception of this `Accept`. */
    NotOnExceptionBranch getNotOnException() { branch(result, _, this, 62817523) }

    /** Get the on escape of this `Accept`. */
    OnEscapeBranch getOnEscape() { branch(result, _, this, 57719082) }

    /** Get the on exception of this `Accept`. */
    OnExceptionBranch getOnException() { branch(result, _, this, 76275576) }

    /** Get the scope terminator of this `Accept`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Accept" }

}

library class Add_ extends @add, ComputationalStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the corresponding of this `Add`. */
    CorrespondingClause getCorresponding() { clause(result, _, this, 38615929) }

    /** Get the list of giving operands belonging to this `Add`. */
    IdentifierList getGivingOperandsList() { identifier_list(result, this, 74908846) }

    /** Get the nth giving operands of this `Add`. */
    Identifier getGivingOperand(int n) { result = this.getGivingOperandsList().getItem(n) }

    /** Get a giving operands belonging to this `Add`. */
    Identifier getAGivingOperand() { result = this.getGivingOperandsList().getAnItem() }

    /** Get the first giving operands in the list. */
    Identifier getFirstGivingOperand() { result = this.getGivingOperandsList().getFirstItem() }

    /** Get the last giving operands in the list. */
    Identifier getLastGivingOperand() { result = this.getGivingOperandsList().getLastItem() }

    /** Get the number of elements in the list of giving operands. */
    int getGivingOperandsSize() { result = this.getGivingOperandsList().size() }

    /** Get the list of initial operands belonging to this `Add`. */
    IdentifierList getInitialOperandsList() { identifier_list(result, this, 46696978) }

    /** Get the nth initial operands of this `Add`. */
    Identifier getInitialOperand(int n) { result = this.getInitialOperandsList().getItem(n) }

    /** Get an initial operands belonging to this `Add`. */
    Identifier getAnInitialOperand() { result = this.getInitialOperandsList().getAnItem() }

    /** Get the first initial operands in the list. */
    Identifier getFirstInitialOperand() { result = this.getInitialOperandsList().getFirstItem() }

    /** Get the last initial operands in the list. */
    Identifier getLastInitialOperand() { result = this.getInitialOperandsList().getLastItem() }

    /** Get the number of elements in the list of initial operands. */
    int getInitialOperandsSize() { result = this.getInitialOperandsList().size() }

    /** Get the not on size error of this `Add`. */
    override NotOnSizeErrorBranch getNotOnSizeError() { branch(result, _, this, 82126985) }

    /** Get the on size error of this `Add`. */
    override OnSizeErrorBranch getOnSizeError() { branch(result, _, this, 23507810) }

    /** Get the scope terminator of this `Add`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    /** Get the list of to operands belonging to this `Add`. */
    IdentifierList getToOperandsList() { identifier_list(result, this, 52389977) }

    /** Get the nth to operands of this `Add`. */
    Identifier getToOperand(int n) { result = this.getToOperandsList().getItem(n) }

    /** Get a to operands belonging to this `Add`. */
    Identifier getAToOperand() { result = this.getToOperandsList().getAnItem() }

    /** Get the first to operands in the list. */
    Identifier getFirstToOperand() { result = this.getToOperandsList().getFirstItem() }

    /** Get the last to operands in the list. */
    Identifier getLastToOperand() { result = this.getToOperandsList().getLastItem() }

    /** Get the number of elements in the list of to operands. */
    int getToOperandsSize() { result = this.getToOperandsList().size() }

    override string toString() { result = "Add" }

}

library class AddExpr_ extends @add_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `AddExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `AddExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "AddExpr" }

}

library class AddressOfRegister_ extends @address_of_register, CallArgValue, CallGiving, RelationOperand, SpecialRegister {

    override AstNode getParent() { result = SpecialRegister.super.getParent() }

    /** Get the data item of this `AddressOfRegister`. */
    Identifier getDataItem() { identifier(result, _, this, 22386806) }

    override string toString() { result = "AddressOfRegister" }

}

library class After_ extends @after, Phrase {

    /** Get the operand of this `After`. */
    Identifier getOperand() { identifier(result, _, this, 15567423) }

    /** Get the until of this `After`. */
    Until getUntil() { phrase(result, _, this, 41105173) }

    override string toString() { result = "After" }

}

library class AfterList_ extends @after_list, AstNode {

    override AstNode getParent() { after_list(this, result) }

    /** Get an item of this `AfterList` */
    Phrase getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `AfterList` */
    Phrase getItem(int n) { phrase(result, _, this, n) }

    Phrase getFirstItem() { result = this.getItem(0) }

    Phrase getLastItem() { result = this.getItem(size() - 1) }

    Phrase getNextItem(Phrase item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "AfterList" }

}

library class AlphanumericLiteral_ extends @alphanumeric_literal, Literal {

    override string toString() { result = "AlphanumericLiteral" }

}

library class Alter_ extends @alter, Stmt {

    /** Get the list of alterations belonging to this `Alter`. */
    AlterationClauseList getAlterationsList() { alteration_clause_list(result, this) }

    /** Get the nth alterations of this `Alter`. */
    AlterationClause getAlteration(int n) { result = this.getAlterationsList().getItem(n) }

    /** Get an alterations belonging to this `Alter`. */
    AlterationClause getAnAlteration() { result = this.getAlterationsList().getAnItem() }

    /** Get the first alterations in the list. */
    AlterationClause getFirstAlteration() { result = this.getAlterationsList().getFirstItem() }

    /** Get the last alterations in the list. */
    AlterationClause getLastAlteration() { result = this.getAlterationsList().getLastItem() }

    /** Get the number of elements in the list of alterations. */
    int getAlterationsSize() { result = this.getAlterationsList().size() }

    override string toString() { result = "Alter" }

}

library class AlterationClause_ extends @alteration_clause, Clause {

    /** Get the from of this `AlterationClause`. */
    ProcedureReference getFrom() { reference(result, _, this, 72384692) }

    /** Get the to of this `AlterationClause`. */
    ProcedureReference getTo() { reference(result, _, this, 10107670) }

    override string toString() { result = "AlterationClause" }

}

library class AlterationClauseList_ extends @alteration_clause_list, AstNode {

    override AstNode getParent() { alteration_clause_list(this, result) }

    /** Get an item of this `AlterationClauseList` */
    Clause getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `AlterationClauseList` */
    Clause getItem(int n) { clause(result, _, this, n) }

    Clause getFirstItem() { result = this.getItem(0) }

    Clause getLastItem() { result = this.getItem(size() - 1) }

    Clause getNextItem(Clause item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "AlterationClauseList" }

}

library class Argument_ extends @argument, AstNode {

    override string toString() { result = "Argument" }

}

library class ArgumentList_ extends @argument_list, AstNode {

    override AstNode getParent() { argument_list(this, result) }

    /** Get an item of this `ArgumentList` */
    Argument getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `ArgumentList` */
    Argument getItem(int n) {
           expr(result, _, this, n)
        or identifier(result, _, this, n)
        or literal(result, _, this, n)
    }

    Argument getFirstItem() { result = this.getItem(0) }

    Argument getLastItem() { result = this.getItem(size() - 1) }

    Argument getNextItem(Argument item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "ArgumentList" }

}

library class ArithmeticExpr_ extends @arithmetic_expr, Argument, CallArgValue, EvaluateSubject, Expr, RelationOperand, WhenObject {

    override AstNode getParent() { none() }

    override string toString() { result = "ArithmeticExpr" }

}

library class AstNode_ extends @ast_node {

    AstNode getParent() { none() }

    string toString() { result = "AstNode" }

}

library class AtEndBranch_ extends @at_end_branch, Branch {

    override string toString() { result = "AtEndBranch" }

}

library class AtEndOfPageBranch_ extends @at_end_of_page_branch, Branch {

    override string toString() { result = "AtEndOfPageBranch" }

}

library class BasicComment_ extends @basic_comment, Comment {

    override string toString() { result = "BasicComment" }

}

library class BinaryExpr_ extends @binary_expr, Expr {

    /** Get the left operand of this `BinaryExpr`. */
    abstract Expr getLeftOperand();

    /** Get the right operand of this `BinaryExpr`. */
    abstract Expr getRightOperand();

    override string toString() { result = "BinaryExpr" }

}

library class BitAndExpr_ extends @bit_and_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `BitAndExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `BitAndExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "BitAndExpr" }

}

library class BitNotExpr_ extends @bit_not_expr, ArithmeticExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the expression of this `BitNotExpr`. */
    ArithmeticExpr getExpression() { expr(result, _, this, 4913101) }

    override string toString() { result = "BitNotExpr" }

}

library class BitOrExpr_ extends @bit_or_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `BitOrExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `BitOrExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "BitOrExpr" }

}

library class BitXOrExpr_ extends @bit_x_or_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `BitXOrExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `BitXOrExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "BitXOrExpr" }

}

library class BlockContainsClause_ extends @block_contains_clause, Clause {

    /** Get the maximum size of this `BlockContainsClause`. */
    int getMaximumSize() { block_contains_clause_maximum_size(this, 20557532, result) }

    /** Get the minimum size of this `BlockContainsClause`. */
    int getMinimumSize() { block_contains_clause_minimum_size(this, 35322440, result) }

    override string toString() { result = "BlockContainsClause" }

}

library class Branch_ extends @branch, AstNode {

    override AstNode getParent() { branch(this, _, result, _) }

    /** Get the list of statements belonging to this `Branch`. */
    StmtList getStatementsList() { stmt_list(result, this) }

    /** Get the nth statements of this `Branch`. */
    Stmt getStatement(int n) { result = this.getStatementsList().getItem(n) }

    /** Get a statements belonging to this `Branch`. */
    Stmt getAStatement() { result = this.getStatementsList().getAnItem() }

    /** Get the first statements in the list. */
    Stmt getFirstStatement() { result = this.getStatementsList().getFirstItem() }

    /** Get the last statements in the list. */
    Stmt getLastStatement() { result = this.getStatementsList().getLastItem() }

    /** Get the number of elements in the list of statements. */
    int getStatementsSize() { result = this.getStatementsList().size() }

    override string toString() { result = "Branch" }

}

library class BranchList_ extends @branch_list, AstNode {

    override AstNode getParent() { branch_list(this, result) }

    /** Get an item of this `BranchList` */
    Branch getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `BranchList` */
    Branch getItem(int n) { branch(result, _, this, n) }

    Branch getFirstItem() { result = this.getItem(0) }

    Branch getLastItem() { result = this.getItem(size() - 1) }

    Branch getNextItem(Branch item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "BranchList" }

}

library class Call_ extends @call, Stmt {

    /** Get the giving of this `Call`. */
    CallGiving getGiving() {
           identifier(result, _, this, 63322551)
        or special_register(result, _, this)
    }

    /** Get the not on exception of this `Call`. */
    NotOnExceptionBranch getNotOnException() { branch(result, _, this, 62817523) }

    /** Get the on exception of this `Call`. */
    OnExceptionBranch getOnException() { branch(result, _, this, 76275576) }

    /** Get the on overflow of this `Call`. */
    OnOverflowBranch getOnOverflow() { branch(result, _, this, 6269505) }

    /** Get the program name of this `Call`. */
    ProgramName getProgramName() {
           identifier(result, _, this, 84788938)
        or literal(result, _, this, 84788938)
    }

    /** Get the scope terminator of this `Call`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    /** Get the list of usings belonging to this `Call`. */
    CallArgList getUsingList() { call_arg_list(result, this) }

    /** Get the nth using of this `Call`. */
    CallArg getUsing(int n) { result = this.getUsingList().getItem(n) }

    /** Get a using belonging to this `Call`. */
    CallArg getAUsing() { result = this.getUsingList().getAnItem() }

    /** Get the first using in the list. */
    CallArg getFirstUsing() { result = this.getUsingList().getFirstItem() }

    /** Get the last using in the list. */
    CallArg getLastUsing() { result = this.getUsingList().getLastItem() }

    /** Get the number of elements in the list of usings. */
    int getUsingSize() { result = this.getUsingList().size() }

    override string toString() { result = "Call" }

}

library class CallArg_ extends @call_arg, AstNode {

    override AstNode getParent() { call_arg(this, _, result, _) }

    override string toString() { result = "CallArg" }

}

library class CallArgByContent_ extends @call_arg_by_content, CallArg, CallArgWithValue {

    override AstNode getParent() { result = CallArg.super.getParent() }

    /** Get the value of this `CallArgByContent`. */
    override CallArgValue getValue() {
           expr(result, _, this, 73484022)
        or identifier(result, _, this, 73484022)
        or literal(result, _, this, 73484022)
        or phrase(result, _, this, 73484022)
        or special_register(result, _, this)
    }

    override string toString() { result = "CallArgByContent" }

}

library class CallArgByReference_ extends @call_arg_by_reference, CallArg, CallArgWithValue {

    override AstNode getParent() { result = CallArg.super.getParent() }

    /** Get the value of this `CallArgByReference`. */
    override CallArgValue getValue() {
           expr(result, _, this, 73484022)
        or identifier(result, _, this, 73484022)
        or literal(result, _, this, 73484022)
        or phrase(result, _, this, 73484022)
        or special_register(result, _, this)
    }

    override string toString() { result = "CallArgByReference" }

}

library class CallArgByValue_ extends @call_arg_by_value, CallArg, CallArgWithValue {

    override AstNode getParent() { result = CallArg.super.getParent() }

    /** Get the value of this `CallArgByValue`. */
    override CallArgValue getValue() {
           expr(result, _, this, 73484022)
        or identifier(result, _, this, 73484022)
        or literal(result, _, this, 73484022)
        or phrase(result, _, this, 73484022)
        or special_register(result, _, this)
    }

    override string toString() { result = "CallArgByValue" }

}

library class CallArgCopied_ extends @call_arg_copied, CallArg, PreprocessingDirective {

    override AstNode getParent() { result = CallArg.super.getParent() }

    /** Get the copy of this `CallArgCopied`. */
    Copy getCopy() { stmt(result, _, this, 28386585) }

    override string toString() { result = "CallArgCopied" }

}

library class CallArgList_ extends @call_arg_list, AstNode {

    override AstNode getParent() { call_arg_list(this, result) }

    /** Get an item of this `CallArgList` */
    CallArg getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `CallArgList` */
    CallArg getItem(int n) { call_arg(result, _, this, n) }

    CallArg getFirstItem() { result = this.getItem(0) }

    CallArg getLastItem() { result = this.getItem(size() - 1) }

    CallArg getNextItem(CallArg item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "CallArgList" }

}

library class CallArgValue_ extends @call_arg_value, AstNode {

    override string toString() { result = "CallArgValue" }

}

library class CallArgWithValue_ extends @call_arg_with_value, CallArg {

    /** Get the value of this `CallArgWithValue`. */
    abstract CallArgValue getValue();

    override string toString() { result = "CallArgWithValue" }

}

library class CallGiving_ extends @call_giving, AstNode {

    override string toString() { result = "CallGiving" }

}

library class Cics_ extends @cics, Stmt {

    /** Get the command of this `Cics`. */
    string getCommand() { cics_command(this, 6011894, result) }

    /** Get the file of this `Cics`. */
    CicsOptionReference getFile() { reference(result, _, this, 11378846) }

    /** Get the map of this `Cics`. */
    CicsOptionReference getMap() { reference(result, _, this, 74605949) }

    /** Get the queue of this `Cics`. */
    CicsOptionReference getQueue() { reference(result, _, this, 38711984) }

    /** Get the resp of this `Cics`. */
    CicsOptionReference getResp() { reference(result, _, this, 20351100) }

    override string toString() { result = "Cics" }

}

library class CicsOptionReference_ extends @cics_option_reference, Reference {

    /** Get the value of this `CicsOptionReference`. */
    string getValue() { cics_option_reference_value(this, 62802739, result) }

    override string toString() { result = "CicsOptionReference" }

}

library class ClassConditionExpr_ extends @class_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the class type of this `ClassConditionExpr`. */
    ClassType getClassType() { class_type(result, _, this) }

    /** Get the identifier of this `ClassConditionExpr`. */
    Identifier getIdentifier() { identifier(result, _, this, 68656865) }

    override string toString() { result = "ClassConditionExpr" }

}

library class ClassType_ extends @class_type, AstNode {

    override AstNode getParent() { class_type(this, _, result) }

    /** Get the name of this `ClassType`. */
    string getName() { class_type_name(this, 17630164, result) }

    override string toString() { result = "ClassType" }

}

library class Clause_ extends @clause, AstNode {

    override AstNode getParent() { clause(this, _, result, _) }

    override string toString() { result = "Clause" }

}

library class Close_ extends @close, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the list of files belonging to this `Close`. */
    FileReferenceList getFilesList() { file_reference_list(result, this, 28907142) }

    /** Get the nth files of this `Close`. */
    FileReference getFile(int n) { result = this.getFilesList().getItem(n) }

    /** Get a files belonging to this `Close`. */
    FileReference getAFile() { result = this.getFilesList().getAnItem() }

    /** Get the first files in the list. */
    FileReference getFirstFile() { result = this.getFilesList().getFirstItem() }

    /** Get the last files in the list. */
    FileReference getLastFile() { result = this.getFilesList().getLastItem() }

    /** Get the number of elements in the list of files. */
    int getFilesSize() { result = this.getFilesList().size() }

    override string toString() { result = "Close" }

}

library class Comment_ extends @comment, AstNode {

    /** Get the text of this `Comment`. */
    string getText() { comment_text(this, 28393803, result) }

    override string toString() { result = "Comment" }

}

library class CommunicationSection_ extends @communication_section, Unit {

    override string toString() { result = "CommunicationSection" }

}

library class ComparisonExpr_ extends @comparison_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the object of this `ComparisonExpr`. */
    AbbrLogExpr getObject() { expr(result, _, this, 79408916) }

    /** Get the subject of this `ComparisonExpr`. */
    RelationOperand getSubject() {
           expr(result, _, this, 64190441)
        or identifier(result, _, this, 64190441)
        or literal(result, _, this, 64190441)
        or special_register(result, _, this)
    }

    override string toString() { result = "ComparisonExpr" }

}

library class CompilationGroup_ extends @compilation_group, Text {

    /** Get the list of source units belonging to this `CompilationGroup`. */
    UnitList getSourceUnitsList() { unit_list(result, this) }

    /** Get the nth source units of this `CompilationGroup`. */
    Unit getSourceUnit(int n) { result = this.getSourceUnitsList().getItem(n) }

    /** Get a source units belonging to this `CompilationGroup`. */
    Unit getASourceUnit() { result = this.getSourceUnitsList().getAnItem() }

    /** Get the first source units in the list. */
    Unit getFirstSourceUnit() { result = this.getSourceUnitsList().getFirstItem() }

    /** Get the last source units in the list. */
    Unit getLastSourceUnit() { result = this.getSourceUnitsList().getLastItem() }

    /** Get the number of elements in the list of source units. */
    int getSourceUnitsSize() { result = this.getSourceUnitsList().size() }

    override string toString() { result = "CompilationGroup" }

}

library class ComputationalStmt_ extends @computational_stmt, Stmt {

    /** Get the not on size error of this `ComputationalStmt`. */
    abstract NotOnSizeErrorBranch getNotOnSizeError();

    /** Get the on size error of this `ComputationalStmt`. */
    abstract OnSizeErrorBranch getOnSizeError();

    override string toString() { result = "ComputationalStmt" }

}

library class Compute_ extends @compute, ComputationalStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the expr of this `Compute`. */
    ArithmeticExpr getExpr() { expr(result, _, this, 59595097) }

    /** Get the not on size error of this `Compute`. */
    override NotOnSizeErrorBranch getNotOnSizeError() { branch(result, _, this, 82126985) }

    /** Get the on size error of this `Compute`. */
    override OnSizeErrorBranch getOnSizeError() { branch(result, _, this, 23507810) }

    /** Get the list of result operands belonging to this `Compute`. */
    IdentifierList getResultOperandsList() { identifier_list(result, this, 31224210) }

    /** Get the nth result operands of this `Compute`. */
    Identifier getResultOperand(int n) { result = this.getResultOperandsList().getItem(n) }

    /** Get a result operands belonging to this `Compute`. */
    Identifier getAResultOperand() { result = this.getResultOperandsList().getAnItem() }

    /** Get the first result operands in the list. */
    Identifier getFirstResultOperand() { result = this.getResultOperandsList().getFirstItem() }

    /** Get the last result operands in the list. */
    Identifier getLastResultOperand() { result = this.getResultOperandsList().getLastItem() }

    /** Get the number of elements in the list of result operands. */
    int getResultOperandsSize() { result = this.getResultOperandsList().size() }

    /** Get the scope terminator of this `Compute`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Compute" }

}

library class ConditionExpr_ extends @condition_expr, EvaluateSubject, Expr, WhenObject {

    override AstNode getParent() { none() }

    override string toString() { result = "ConditionExpr" }

}

library class ConditionNameConditionExpr_ extends @condition_name_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the name of this `ConditionNameConditionExpr`. */
    Identifier getName() { identifier(result, _, this, 61068390) }

    override string toString() { result = "ConditionNameConditionExpr" }

}

library class ConfigurationSection_ extends @configuration_section, Unit {

    /** Get the special names of this `ConfigurationSection`. */
    SpecialNamesParagraph getSpecialNames() { unit(result, _, this, 3038823) }

    override string toString() { result = "ConfigurationSection" }

}

library class ConstantEntry_ extends @constant_entry, DescriptionEntry {

    /** Get the level number of this `ConstantEntry`. */
    int getLevelNumber() { constant_entry_level_number(this, 72382198, result) }

    /** Get the name of this `ConstantEntry`. */
    override string getName() { constant_entry_name(this, 17630164, result) }

    override string toString() { result = "ConstantEntry" }

}

library class ContinueStmt_ extends @continue_stmt, Stmt {

    override string toString() { result = "ContinueStmt" }

}

library class Copy_ extends @copy, PreprocessingDirective, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the library name of this `Copy`. */
    string getLibraryName() { copy_library_name(this, 39156516, result) }

    /** Get the text name of this `Copy`. */
    string getTextName() { copy_text_name(this, 56143928, result) }

    override string toString() { result = "Copy" }

}

library class CopyEntry_ extends @copy_entry, DescriptionEntry {

    /** Get the copy of this `CopyEntry`. */
    Copy getCopy() { stmt(result, _, this, 28386585) }

    override string toString() { result = "CopyEntry" }

}

library class Copybook_ extends @copybook, Text {

    /** Get the list of entries belonging to this `Copybook`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `Copybook`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `Copybook`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    /** Get the list of paragraphs belonging to this `Copybook`. */
    ParagraphList getParagraphsList() { paragraph_list(result, this) }

    /** Get the nth paragraphs of this `Copybook`. */
    Paragraph getParagraph(int n) { result = this.getParagraphsList().getItem(n) }

    /** Get a paragraphs belonging to this `Copybook`. */
    Paragraph getAParagraph() { result = this.getParagraphsList().getAnItem() }

    /** Get the first paragraphs in the list. */
    Paragraph getFirstParagraph() { result = this.getParagraphsList().getFirstItem() }

    /** Get the last paragraphs in the list. */
    Paragraph getLastParagraph() { result = this.getParagraphsList().getLastItem() }

    /** Get the number of elements in the list of paragraphs. */
    int getParagraphsSize() { result = this.getParagraphsList().size() }

    /** Get the list of sections belonging to this `Copybook`. */
    SectionList getSectionsList() { section_list(result, this) }

    /** Get the nth sections of this `Copybook`. */
    Section getSection(int n) { result = this.getSectionsList().getItem(n) }

    /** Get a sections belonging to this `Copybook`. */
    Section getASection() { result = this.getSectionsList().getAnItem() }

    /** Get the first sections in the list. */
    Section getFirstSection() { result = this.getSectionsList().getFirstItem() }

    /** Get the last sections in the list. */
    Section getLastSection() { result = this.getSectionsList().getLastItem() }

    /** Get the number of elements in the list of sections. */
    int getSectionsSize() { result = this.getSectionsList().size() }

    /** Get the list of sentences belonging to this `Copybook`. */
    SentenceList getSentencesList() { sentence_list(result, this) }

    /** Get the nth sentences of this `Copybook`. */
    Sentence getSentence(int n) { result = this.getSentencesList().getItem(n) }

    /** Get a sentences belonging to this `Copybook`. */
    Sentence getASentence() { result = this.getSentencesList().getAnItem() }

    /** Get the first sentences in the list. */
    Sentence getFirstSentence() { result = this.getSentencesList().getFirstItem() }

    /** Get the last sentences in the list. */
    Sentence getLastSentence() { result = this.getSentencesList().getLastItem() }

    /** Get the number of elements in the list of sentences. */
    int getSentencesSize() { result = this.getSentencesList().size() }

    /** Get the list of statements belonging to this `Copybook`. */
    StmtList getStatementsList() { stmt_list(result, this) }

    /** Get the nth statements of this `Copybook`. */
    Stmt getStatement(int n) { result = this.getStatementsList().getItem(n) }

    /** Get a statements belonging to this `Copybook`. */
    Stmt getAStatement() { result = this.getStatementsList().getAnItem() }

    /** Get the first statements in the list. */
    Stmt getFirstStatement() { result = this.getStatementsList().getFirstItem() }

    /** Get the last statements in the list. */
    Stmt getLastStatement() { result = this.getStatementsList().getLastItem() }

    /** Get the number of elements in the list of statements. */
    int getStatementsSize() { result = this.getStatementsList().size() }

    /** Get the list of units belonging to this `Copybook`. */
    UnitList getUnitsList() { unit_list(result, this) }

    /** Get the nth units of this `Copybook`. */
    Unit getUnit(int n) { result = this.getUnitsList().getItem(n) }

    /** Get a units belonging to this `Copybook`. */
    Unit getAUnit() { result = this.getUnitsList().getAnItem() }

    /** Get the first units in the list. */
    Unit getFirstUnit() { result = this.getUnitsList().getFirstItem() }

    /** Get the last units in the list. */
    Unit getLastUnit() { result = this.getUnitsList().getLastItem() }

    /** Get the number of elements in the list of units. */
    int getUnitsSize() { result = this.getUnitsList().size() }

    override string toString() { result = "Copybook" }

}

library class CorrespondingClause_ extends @corresponding_clause, Clause {

    /** Get the identifier of this `CorrespondingClause`. */
    Identifier getIdentifier() { identifier(result, _, this, 68656865) }

    override string toString() { result = "CorrespondingClause" }

}

library class DataAddressIdentifier_ extends @data_address_identifier, Identifier {

    /** Get the identifier of this `DataAddressIdentifier`. */
    Identifier getIdentifier() { identifier(result, _, this, 68656865) }

    override string toString() { result = "DataAddressIdentifier" }

}

library class DataDescriptionEntry_ extends @data_description_entry, DescriptionEntry {

    /** Get the level number of this `DataDescriptionEntry`. */
    int getLevelNumber() { data_description_entry_level_number(this, 72382198, result) }

    /** Get the name of this `DataDescriptionEntry`. */
    override string getName() { data_description_entry_name(this, 17630164, result) }

    /** Get the occurs of this `DataDescriptionEntry`. */
    OccursClause getOccurs() { clause(result, _, this, 90984231) }

    /** Get the picture of this `DataDescriptionEntry`. */
    PictureClause getPicture() { clause(result, _, this, 41993279) }

    /** Get the redefines of this `DataDescriptionEntry`. */
    DataReference getRedefines() { reference(result, _, this, 33901801) }

    /** Get the sign of this `DataDescriptionEntry`. */
    SignClause getSign() { clause(result, _, this, 78498927) }

    /** Get the usage of this `DataDescriptionEntry`. */
    UsageClause getUsage() { clause(result, _, this, 31974695) }

    /** Get the value of this `DataDescriptionEntry`. */
    ValueClause getValue() { clause(result, _, this, 33913569) }

    override string toString() { result = "DataDescriptionEntry" }

}

library class DataDivision_ extends @data_division, Division, Unit {

    override AstNode getParent() { result = Unit.super.getParent() }

    /** Get the communication section of this `DataDivision`. */
    CommunicationSection getCommunicationSection() { unit(result, _, this, 58534488) }

    /** Get the file section of this `DataDivision`. */
    FileSection getFileSection() { unit(result, _, this, 76505732) }

    /** Get the linkage section of this `DataDivision`. */
    LinkageSection getLinkageSection() { unit(result, _, this, 77861615) }

    /** Get the local storage section of this `DataDivision`. */
    LocalStorageSection getLocalStorageSection() { unit(result, _, this, 79506363) }

    /** Get the object storage section of this `DataDivision`. */
    ObjectStorageSection getObjectStorageSection() { unit(result, _, this, 21460199) }

    /** Get the report section of this `DataDivision`. */
    ReportSection getReportSection() { unit(result, _, this, 87621868) }

    /** Get the screen section of this `DataDivision`. */
    ScreenSection getScreenSection() { unit(result, _, this, 31856495) }

    /** Get the thread local storage section of this `DataDivision`. */
    ThreadLocalStorageSection getThreadLocalStorageSection() { unit(result, _, this, 28171504) }

    /** Get the working storage section of this `DataDivision`. */
    WorkingStorageSection getWorkingStorageSection() { unit(result, _, this, 89962372) }

    override string toString() { result = "DataDivision" }

}

library class DataReference_ extends @data_reference, Reference {

    /** Get the name of this `DataReference`. */
    override string getName() { data_reference_name(this, 17630164, result) }

    /** Get the list of qualifiers belonging to this `DataReference`. */
    QualifiersList getQualifiersList() { qualifiers_list(result, this) }

    /** Get the nth qualifiers of this `DataReference`. */
    string getQualifier(int n) { result = this.getQualifiersList().getItem(n) }

    /** Get a qualifiers belonging to this `DataReference`. */
    string getAQualifier() { result = this.getQualifiersList().getAnItem() }

    /** Get the first qualifiers in the list. */
    string getFirstQualifier() { result = this.getQualifiersList().getFirstItem() }

    /** Get the last qualifiers in the list. */
    string getLastQualifier() { result = this.getQualifiersList().getLastItem() }

    /** Get the number of elements in the list of qualifiers. */
    int getQualifiersSize() { result = this.getQualifiersList().size() }

    override string toString() { result = "DataReference" }

}

library class Declaratives_ extends @declaratives, Unit {

    /** Get the list of sections belonging to this `Declaratives`. */
    SectionList getSectionsList() { section_list(result, this) }

    /** Get the nth sections of this `Declaratives`. */
    Section getSection(int n) { result = this.getSectionsList().getItem(n) }

    /** Get a sections belonging to this `Declaratives`. */
    Section getASection() { result = this.getSectionsList().getAnItem() }

    /** Get the first sections in the list. */
    Section getFirstSection() { result = this.getSectionsList().getFirstItem() }

    /** Get the last sections in the list. */
    Section getLastSection() { result = this.getSectionsList().getLastItem() }

    /** Get the number of elements in the list of sections. */
    int getSectionsSize() { result = this.getSectionsList().size() }

    override string toString() { result = "Declaratives" }

}

library class Delete_ extends @delete, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the file of this `Delete`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the invalid key of this `Delete`. */
    InvalidKeyBranch getInvalidKey() { branch(result, _, this, 38268067) }

    /** Get the not invalid key of this `Delete`. */
    NotInvalidKeyBranch getNotInvalidKey() { branch(result, _, this, 50171949) }

    /** Get the scope terminator of this `Delete`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Delete" }

}

library class DependingOnClause_ extends @depending_on_clause, Clause {

    override string toString() { result = "DependingOnClause" }

}

library class DescriptionEntry_ extends @description_entry, AstNode {

    override AstNode getParent() { description_entry(this, _, result, _) }

    /** Get the name of this `DescriptionEntry`. */
    string getName() { description_entry_name(this, 17630164, result) }

    /** Get the list of nested entries belonging to this `DescriptionEntry`. */
    DescriptionEntryList getNestedEntriesList() { description_entry_list(result, this) }

    /** Get the nth nested entries of this `DescriptionEntry`. */
    DescriptionEntry getNestedEntry(int n) { result = this.getNestedEntriesList().getItem(n) }

    /** Get a nested entries belonging to this `DescriptionEntry`. */
    DescriptionEntry getANestedEntry() { result = this.getNestedEntriesList().getAnItem() }

    /** Get the first nested entries in the list. */
    DescriptionEntry getFirstNestedEntry() { result = this.getNestedEntriesList().getFirstItem() }

    /** Get the last nested entries in the list. */
    DescriptionEntry getLastNestedEntry() { result = this.getNestedEntriesList().getLastItem() }

    /** Get the number of elements in the list of nested entries. */
    int getNestedEntriesSize() { result = this.getNestedEntriesList().size() }

    override string toString() { result = "DescriptionEntry" }

}

library class DescriptionEntryList_ extends @description_entry_list, AstNode {

    override AstNode getParent() { description_entry_list(this, result) }

    /** Get an item of this `DescriptionEntryList` */
    DescriptionEntry getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `DescriptionEntryList` */
    DescriptionEntry getItem(int n) { description_entry(result, _, this, n) }

    DescriptionEntry getFirstItem() { result = this.getItem(0) }

    DescriptionEntry getLastItem() { result = this.getItem(size() - 1) }

    DescriptionEntry getNextItem(DescriptionEntry item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "DescriptionEntryList" }

}

library class Directive_ extends @directive, AstNode {

    override AstNode getParent() { directive(this, _, result, _) }

    override string toString() { result = "Directive" }

}

library class DirectiveList_ extends @directive_list, AstNode {

    override AstNode getParent() { directive_list(this, result) }

    /** Get an item of this `DirectiveList` */
    Directive getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `DirectiveList` */
    Directive getItem(int n) { directive(result, _, this, n) }

    Directive getFirstItem() { result = this.getItem(0) }

    Directive getLastItem() { result = this.getItem(size() - 1) }

    Directive getNextItem(Directive item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "DirectiveList" }

}

library class Display_ extends @display, Stmt {

    /** Get the not on exception of this `Display`. */
    NotOnExceptionBranch getNotOnException() { branch(result, _, this, 62817523) }

    /** Get the on exception of this `Display`. */
    OnExceptionBranch getOnException() { branch(result, _, this, 76275576) }

    /** Get the scope terminator of this `Display`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Display" }

}

library class DivExpr_ extends @div_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `DivExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `DivExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "DivExpr" }

}

library class Divide_ extends @divide, ComputationalStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the list of giving operands belonging to this `Divide`. */
    IdentifierList getGivingOperandsList() { identifier_list(result, this, 74908846) }

    /** Get the nth giving operands of this `Divide`. */
    Identifier getGivingOperand(int n) { result = this.getGivingOperandsList().getItem(n) }

    /** Get a giving operands belonging to this `Divide`. */
    Identifier getAGivingOperand() { result = this.getGivingOperandsList().getAnItem() }

    /** Get the first giving operands in the list. */
    Identifier getFirstGivingOperand() { result = this.getGivingOperandsList().getFirstItem() }

    /** Get the last giving operands in the list. */
    Identifier getLastGivingOperand() { result = this.getGivingOperandsList().getLastItem() }

    /** Get the number of elements in the list of giving operands. */
    int getGivingOperandsSize() { result = this.getGivingOperandsList().size() }

    /** Get the initial operand of this `Divide`. */
    Identifier getInitialOperand() { identifier(result, _, this, 14128980) }

    /** Get the list of into operands belonging to this `Divide`. */
    IdentifierList getIntoOperandsList() { identifier_list(result, this, 29350036) }

    /** Get the nth into operands of this `Divide`. */
    Identifier getIntoOperand(int n) { result = this.getIntoOperandsList().getItem(n) }

    /** Get an into operands belonging to this `Divide`. */
    Identifier getAnIntoOperand() { result = this.getIntoOperandsList().getAnItem() }

    /** Get the first into operands in the list. */
    Identifier getFirstIntoOperand() { result = this.getIntoOperandsList().getFirstItem() }

    /** Get the last into operands in the list. */
    Identifier getLastIntoOperand() { result = this.getIntoOperandsList().getLastItem() }

    /** Get the number of elements in the list of into operands. */
    int getIntoOperandsSize() { result = this.getIntoOperandsList().size() }

    /** Get the not on size error of this `Divide`. */
    override NotOnSizeErrorBranch getNotOnSizeError() { branch(result, _, this, 82126985) }

    /** Get the on size error of this `Divide`. */
    override OnSizeErrorBranch getOnSizeError() { branch(result, _, this, 23507810) }

    /** Get the remainder operand of this `Divide`. */
    Identifier getRemainderOperand() { identifier(result, _, this, 35117796) }

    /** Get the scope terminator of this `Divide`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Divide" }

}

library class Division_ extends @division, Unit {

    override string toString() { result = "Division" }

}

library class ElseBranch_ extends @else_branch, Branch {

    override string toString() { result = "ElseBranch" }

}

library class Entry_ extends @entry, Stmt {

    override string toString() { result = "Entry" }

}

library class EnvironmentDivision_ extends @environment_division, Division, Unit {

    override AstNode getParent() { result = Unit.super.getParent() }

    /** Get the configuration section of this `EnvironmentDivision`. */
    ConfigurationSection getConfigurationSection() { unit(result, _, this, 56413948) }

    /** Get the io section of this `EnvironmentDivision`. */
    IoSection getIoSection() { unit(result, _, this, 64713121) }

    /** Get the object section of this `EnvironmentDivision`. */
    ObjectSection getObjectSection() { unit(result, _, this, 11036021) }

    override string toString() { result = "EnvironmentDivision" }

}

library class EqOp_ extends @eq_op, RelationOperator {

    override string toString() { result = "EqOp" }

}

library class Evaluate_ extends @evaluate, Stmt {

    /** Get the list of branches belonging to this `Evaluate`. */
    BranchList getBranchesList() { branch_list(result, this) }

    /** Get the nth branches of this `Evaluate`. */
    Branch getBranch(int n) { result = this.getBranchesList().getItem(n) }

    /** Get a branches belonging to this `Evaluate`. */
    Branch getABranch() { result = this.getBranchesList().getAnItem() }

    /** Get the first branches in the list. */
    Branch getFirstBranch() { result = this.getBranchesList().getFirstItem() }

    /** Get the last branches in the list. */
    Branch getLastBranch() { result = this.getBranchesList().getLastItem() }

    /** Get the number of elements in the list of branches. */
    int getBranchesSize() { result = this.getBranchesList().size() }

    /** Get the scope terminator of this `Evaluate`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    /** Get the list of subjects belonging to this `Evaluate`. */
    EvaluateSubjectList getSubjectsList() { evaluate_subject_list(result, this) }

    /** Get the nth subjects of this `Evaluate`. */
    EvaluateSubject getSubject(int n) { result = this.getSubjectsList().getItem(n) }

    /** Get a subjects belonging to this `Evaluate`. */
    EvaluateSubject getASubject() { result = this.getSubjectsList().getAnItem() }

    /** Get the first subjects in the list. */
    EvaluateSubject getFirstSubject() { result = this.getSubjectsList().getFirstItem() }

    /** Get the last subjects in the list. */
    EvaluateSubject getLastSubject() { result = this.getSubjectsList().getLastItem() }

    /** Get the number of elements in the list of subjects. */
    int getSubjectsSize() { result = this.getSubjectsList().size() }

    override string toString() { result = "Evaluate" }

}

library class EvaluateSubject_ extends @evaluate_subject, AstNode {

    override string toString() { result = "EvaluateSubject" }

}

library class EvaluateSubjectList_ extends @evaluate_subject_list, AstNode {

    override AstNode getParent() { evaluate_subject_list(this, result) }

    /** Get an item of this `EvaluateSubjectList` */
    EvaluateSubject getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `EvaluateSubjectList` */
    EvaluateSubject getItem(int n) {
           expr(result, _, this, n)
        or identifier(result, _, this, n)
        or literal(result, _, this, n)
    }

    EvaluateSubject getFirstItem() { result = this.getItem(0) }

    EvaluateSubject getLastItem() { result = this.getItem(size() - 1) }

    EvaluateSubject getNextItem(EvaluateSubject item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "EvaluateSubjectList" }

}

library class Exit_ extends @exit, Stmt {

    /** Get the endpoint of this `Exit`. */
    string getEndpoint() { exit_endpoint(this, 79263669, result) }

    override string toString() { result = "Exit" }

}

library class ExitNode_ extends @exit_node, Meta {

    override string toString() { result = "ExitNode" }

}

library class Expr_ extends @expr, AstNode {

    override AstNode getParent() { expr(this, _, result, _) }

    override string toString() { result = "Expr" }

}

library class FalseExpr_ extends @false_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    override string toString() { result = "FalseExpr" }

}

library class FigurativeConstantExpr_ extends @figurative_constant_expr, Expr, RelationOperand {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the value of this `FigurativeConstantExpr`. */
    string getValue() { figurative_constant_expr_value(this, 62802739, result) }

    override string toString() { result = "FigurativeConstantExpr" }

}

library class FigurativeConstantLiteral_ extends @figurative_constant_literal, Literal {

    /** Get the literal of this `FigurativeConstantLiteral`. */
    Literal getLiteral() { literal(result, _, this, 81581247) }

    override string toString() { result = "FigurativeConstantLiteral" }

}

library class FileControlEntry_ extends @file_control_entry, DescriptionEntry {

    /** Get the file status of this `FileControlEntry`. */
    DataReference getFileStatus() { reference(result, _, this, 61020675) }

    /** Get the name of this `FileControlEntry`. */
    override string getName() { file_control_entry_name(this, 17630164, result) }

    override string toString() { result = "FileControlEntry" }

}

library class FileControlEntryList_ extends @file_control_entry_list, AstNode {

    override AstNode getParent() { file_control_entry_list(this, result) }

    /** Get an item of this `FileControlEntryList` */
    DescriptionEntry getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `FileControlEntryList` */
    DescriptionEntry getItem(int n) { description_entry(result, _, this, n) }

    DescriptionEntry getFirstItem() { result = this.getItem(0) }

    DescriptionEntry getLastItem() { result = this.getItem(size() - 1) }

    DescriptionEntry getNextItem(DescriptionEntry item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "FileControlEntryList" }

}

library class FileControlParagraph_ extends @file_control_paragraph, Unit {

    /** Get the list of entries belonging to this `FileControlParagraph`. */
    FileControlEntryList getEntriesList() { file_control_entry_list(result, this) }

    /** Get the nth entries of this `FileControlParagraph`. */
    FileControlEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `FileControlParagraph`. */
    FileControlEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    FileControlEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    FileControlEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "FileControlParagraph" }

}

library class FileDescription_ extends @file_description, DescriptionEntry {

    override string toString() { result = "FileDescription" }

}

library class FileDescriptionEntry_ extends @file_description_entry, DescriptionEntry, FileDescription {

    override AstNode getParent() { result = DescriptionEntry.super.getParent() }

    /** Get the block contains of this `FileDescriptionEntry`. */
    BlockContainsClause getBlockContains() { clause(result, _, this, 9263068) }

    /** Get the name of this `FileDescriptionEntry`. */
    override string getName() { file_description_entry_name(this, 17630164, result) }

    override string toString() { result = "FileDescriptionEntry" }

}

library class FileIOStmt_ extends @file_i_o_stmt, Stmt {

    override string toString() { result = "FileIOStmt" }

}

library class FileReference_ extends @file_reference, Reference {

    /** Get the name of this `FileReference`. */
    override string getName() { file_reference_name(this, 17630164, result) }

    override string toString() { result = "FileReference" }

}

library class FileReferenceList_ extends @file_reference_list, AstNode {

    override AstNode getParent() { file_reference_list(this, result, _) }

    /** Get an item of this `FileReferenceList` */
    Reference getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `FileReferenceList` */
    Reference getItem(int n) { reference(result, _, this, n) }

    Reference getFirstItem() { result = this.getItem(0) }

    Reference getLastItem() { result = this.getItem(size() - 1) }

    Reference getNextItem(Reference item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "FileReferenceList" }

}

library class FileSection_ extends @file_section, Unit {

    /** Get the list of entries belonging to this `FileSection`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `FileSection`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `FileSection`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "FileSection" }

}

library class FunctionDefinition_ extends @function_definition, Unit {

    /** Get the data division of this `FunctionDefinition`. */
    DataDivision getDataDivision() { unit(result, _, this, 16098283) }

    /** Get the environment division of this `FunctionDefinition`. */
    EnvironmentDivision getEnvironmentDivision() { unit(result, _, this, 83900149) }

    /** Get the identification division of this `FunctionDefinition`. */
    IdentificationDivision getIdentificationDivision() { unit(result, _, this, 29590964) }

    /** Get the procedure division of this `FunctionDefinition`. */
    ProcedureDivision getProcedureDivision() { unit(result, _, this, 84902220) }

    override string toString() { result = "FunctionDefinition" }

}

library class FunctionIdentifier_ extends @function_identifier, Identifier {

    /** Get the list of arguments belonging to this `FunctionIdentifier`. */
    ArgumentList getArgumentsList() { argument_list(result, this) }

    /** Get the nth arguments of this `FunctionIdentifier`. */
    Argument getArgument(int n) { result = this.getArgumentsList().getItem(n) }

    /** Get an arguments belonging to this `FunctionIdentifier`. */
    Argument getAnArgument() { result = this.getArgumentsList().getAnItem() }

    /** Get the first arguments in the list. */
    Argument getFirstArgument() { result = this.getArgumentsList().getFirstItem() }

    /** Get the last arguments in the list. */
    Argument getLastArgument() { result = this.getArgumentsList().getLastItem() }

    /** Get the number of elements in the list of arguments. */
    int getArgumentsSize() { result = this.getArgumentsList().size() }

    /** Get the name of this `FunctionIdentifier`. */
    string getName() { function_identifier_name(this, 17630164, result) }

    override string toString() { result = "FunctionIdentifier" }

}

library class GEOp_ extends @g_e_op, RelationOperator {

    override string toString() { result = "GEOp" }

}

library class GTOp_ extends @g_t_op, RelationOperator {

    override string toString() { result = "GTOp" }

}

library class GoTo_ extends @go_to, Stmt {

    /** Get the depending on of this `GoTo`. */
    DependingOnClause getDependingOn() { clause(result, _, this, 97302751) }

    /** Get the list of targets belonging to this `GoTo`. */
    ProcedureReferenceList getTargetsList() { procedure_reference_list(result, this) }

    /** Get the nth targets of this `GoTo`. */
    ProcedureReference getTarget(int n) { result = this.getTargetsList().getItem(n) }

    /** Get a targets belonging to this `GoTo`. */
    ProcedureReference getATarget() { result = this.getTargetsList().getAnItem() }

    /** Get the first targets in the list. */
    ProcedureReference getFirstTarget() { result = this.getTargetsList().getFirstItem() }

    /** Get the last targets in the list. */
    ProcedureReference getLastTarget() { result = this.getTargetsList().getLastItem() }

    /** Get the number of elements in the list of targets. */
    int getTargetsSize() { result = this.getTargetsList().size() }

    override string toString() { result = "GoTo" }

}

library class Goback_ extends @goback, Stmt {

    override string toString() { result = "Goback" }

}

library class Header_ extends @header, AstNode {

    override AstNode getParent() { header(this, _, result) }

    override string toString() { result = "Header" }

}

library class IdentificationDivision_ extends @identification_division, Division, NamedUnit, Unit {

    override AstNode getParent() { result = Unit.super.getParent() }

    /** Get the name of this `IdentificationDivision`. */
    override string getName() { identification_division_name(this, 17630164, result) }

    override string toString() { result = "IdentificationDivision" }

}

library class Identifier_ extends @identifier, Argument, CallArgValue, CallGiving, EvaluateSubject, IdentifierOrLiteral, ProgramName, RelationOperand, WhenObject {

    override AstNode getParent() { identifier(this, _, result, _) }

    override string toString() { result = "Identifier" }

}

library class IdentifierExpr_ extends @identifier_expr, ArithmeticExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the identifier of this `IdentifierExpr`. */
    Identifier getIdentifier() { identifier(result, _, this, 68656865) }

    override string toString() { result = "IdentifierExpr" }

}

library class IdentifierList_ extends @identifier_list, AstNode {

    override AstNode getParent() { identifier_list(this, result, _) }

    /** Get an item of this `IdentifierList` */
    Identifier getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `IdentifierList` */
    Identifier getItem(int n) { identifier(result, _, this, n) }

    Identifier getFirstItem() { result = this.getItem(0) }

    Identifier getLastItem() { result = this.getItem(size() - 1) }

    Identifier getNextItem(Identifier item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "IdentifierList" }

}

library class IdentifierOrLiteral_ extends @identifier_or_literal, AstNode {

    override string toString() { result = "IdentifierOrLiteral" }

}

library class IfThenElse_ extends @if_then_else, Stmt {

    /** Get the condition of this `IfThenElse`. */
    ConditionExpr getCondition() { expr(result, _, this, 86580183) }

    /** Get the else of this `IfThenElse`. */
    ElseBranch getElse() { branch(result, _, this, 85458288) }

    /** Get the scope terminator of this `IfThenElse`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    /** Get the then of this `IfThenElse`. */
    ThenBranch getThen() { branch(result, _, this, 64840251) }

    override string toString() { result = "IfThenElse" }

}

library class IndexedBy_ extends @indexed_by, Phrase {

    /** Get the list of indices belonging to this `IndexedBy`. */
    IndicesList getIndicesList() { indices_list(result, this) }

    /** Get the nth indices of this `IndexedBy`. */
    string getIndex(int n) { result = this.getIndicesList().getItem(n) }

    /** Get an indices belonging to this `IndexedBy`. */
    string getAnIndex() { result = this.getIndicesList().getAnItem() }

    /** Get the first indices in the list. */
    string getFirstIndex() { result = this.getIndicesList().getFirstItem() }

    /** Get the last indices in the list. */
    string getLastIndex() { result = this.getIndicesList().getLastItem() }

    /** Get the number of elements in the list of indices. */
    int getIndicesSize() { result = this.getIndicesList().size() }

    override string toString() { result = "IndexedBy" }

}

library class IndicesList_ extends @indices_list, AstNode {

    override AstNode getParent() { indices_list(this, result) }

    /** Get an item of this `IndicesList` */
    string getAnItem() { indices_list_list(this, _, result) }

    /** Get the nth item of this `IndicesList` */
    string getItem(int n) { indices_list_list(this, n, result) }

    string getFirstItem() { result = this.getItem(0) }

    string getLastItem() { result = this.getItem(size() - 1) }

    string getNextItem(string item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "IndicesList" }

}

library class InvalidKeyBranch_ extends @invalid_key_branch, Branch {

    override string toString() { result = "InvalidKeyBranch" }

}

library class IoSection_ extends @io_section, Unit {

    /** Get the file control paragraph of this `IoSection`. */
    FileControlParagraph getFileControlParagraph() { unit(result, _, this, 81760468) }

    override string toString() { result = "IoSection" }

}

library class LEOp_ extends @l_e_op, RelationOperator {

    override string toString() { result = "LEOp" }

}

library class LTOp_ extends @l_t_op, RelationOperator {

    override string toString() { result = "LTOp" }

}

library class LinkageSection_ extends @linkage_section, Unit {

    /** Get the list of entries belonging to this `LinkageSection`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `LinkageSection`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `LinkageSection`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "LinkageSection" }

}

library class Literal_ extends @literal, Argument, CallArgValue, EvaluateSubject, IdentifierOrLiteral, ProgramName, RelationOperand, Subscript, WhenObject {

    override AstNode getParent() { literal(this, _, result, _) }

    /** Get the value of this `Literal`. */
    string getValue() { literal_value(this, 62802739, result) }

    override string toString() { result = "Literal" }

}

library class LocalStorageSection_ extends @local_storage_section, Unit {

    /** Get the list of entries belonging to this `LocalStorageSection`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `LocalStorageSection`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `LocalStorageSection`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "LocalStorageSection" }

}

library class LogAndExpr_ extends @log_and_expr, BinaryExpr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `LogAndExpr`. */
    override ConditionExpr getLeftOperand() { expr(result, _, this, 88038131) }

    /** Get the right operand of this `LogAndExpr`. */
    override ConditionExpr getRightOperand() { expr(result, _, this, 87465991) }

    override string toString() { result = "LogAndExpr" }

}

library class LogNotExpr_ extends @log_not_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the expression of this `LogNotExpr`. */
    ConditionExpr getExpression() { expr(result, _, this, 77707790) }

    override string toString() { result = "LogNotExpr" }

}

library class LogOrExpr_ extends @log_or_expr, BinaryExpr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `LogOrExpr`. */
    override ConditionExpr getLeftOperand() { expr(result, _, this, 88038131) }

    /** Get the right operand of this `LogOrExpr`. */
    override ConditionExpr getRightOperand() { expr(result, _, this, 87465991) }

    override string toString() { result = "LogOrExpr" }

}

library class LoopForm_ extends @loop_form, Phrase {

    override string toString() { result = "LoopForm" }

}

library class MFSetStatement_ extends @m_f_set_statement, Directive {

    /** Get the format of this `MFSetStatement`. */
    string getFormat() { m_f_set_statement_format(this, 25978564, result) }

    override string toString() { result = "MFSetStatement" }

}

library class Merge_ extends @merge, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the file of this `Merge`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the list of givings belonging to this `Merge`. */
    FileReferenceList getGivingList() { file_reference_list(result, this, 97224510) }

    /** Get the nth giving of this `Merge`. */
    FileReference getGiving(int n) { result = this.getGivingList().getItem(n) }

    /** Get a giving belonging to this `Merge`. */
    FileReference getAGiving() { result = this.getGivingList().getAnItem() }

    /** Get the first giving in the list. */
    FileReference getFirstGiving() { result = this.getGivingList().getFirstItem() }

    /** Get the last giving in the list. */
    FileReference getLastGiving() { result = this.getGivingList().getLastItem() }

    /** Get the number of elements in the list of givings. */
    int getGivingSize() { result = this.getGivingList().size() }

    /** Get the list of usings belonging to this `Merge`. */
    FileReferenceList getUsingList() { file_reference_list(result, this, 1495477) }

    /** Get the nth using of this `Merge`. */
    FileReference getUsing(int n) { result = this.getUsingList().getItem(n) }

    /** Get a using belonging to this `Merge`. */
    FileReference getAUsing() { result = this.getUsingList().getAnItem() }

    /** Get the first using in the list. */
    FileReference getFirstUsing() { result = this.getUsingList().getFirstItem() }

    /** Get the last using in the list. */
    FileReference getLastUsing() { result = this.getUsingList().getLastItem() }

    /** Get the number of elements in the list of usings. */
    int getUsingSize() { result = this.getUsingList().size() }

    override string toString() { result = "Merge" }

}

library class Meta_ extends @meta, AstNode {

    override AstNode getParent() { meta(this, _, result) }

    override string toString() { result = "Meta" }

}

library class Move_ extends @move, Stmt {

    /** Get the corresponding of this `Move`. */
    CorrespondingClause getCorresponding() { clause(result, _, this, 38615929) }

    /** Get the initial operand of this `Move`. */
    Identifier getInitialOperand() { identifier(result, _, this, 14128980) }

    /** Get the list of to operands belonging to this `Move`. */
    IdentifierList getToOperandsList() { identifier_list(result, this, 52389977) }

    /** Get the nth to operands of this `Move`. */
    Identifier getToOperand(int n) { result = this.getToOperandsList().getItem(n) }

    /** Get a to operands belonging to this `Move`. */
    Identifier getAToOperand() { result = this.getToOperandsList().getAnItem() }

    /** Get the first to operands in the list. */
    Identifier getFirstToOperand() { result = this.getToOperandsList().getFirstItem() }

    /** Get the last to operands in the list. */
    Identifier getLastToOperand() { result = this.getToOperandsList().getLastItem() }

    /** Get the number of elements in the list of to operands. */
    int getToOperandsSize() { result = this.getToOperandsList().size() }

    override string toString() { result = "Move" }

}

library class MulExpr_ extends @mul_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `MulExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `MulExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "MulExpr" }

}

library class Multiply_ extends @multiply, ComputationalStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the list of by operands belonging to this `Multiply`. */
    IdentifierList getByOperandsList() { identifier_list(result, this, 93520550) }

    /** Get the nth by operands of this `Multiply`. */
    Identifier getByOperand(int n) { result = this.getByOperandsList().getItem(n) }

    /** Get a by operands belonging to this `Multiply`. */
    Identifier getAByOperand() { result = this.getByOperandsList().getAnItem() }

    /** Get the first by operands in the list. */
    Identifier getFirstByOperand() { result = this.getByOperandsList().getFirstItem() }

    /** Get the last by operands in the list. */
    Identifier getLastByOperand() { result = this.getByOperandsList().getLastItem() }

    /** Get the number of elements in the list of by operands. */
    int getByOperandsSize() { result = this.getByOperandsList().size() }

    /** Get the list of giving operands belonging to this `Multiply`. */
    IdentifierList getGivingOperandsList() { identifier_list(result, this, 74908846) }

    /** Get the nth giving operands of this `Multiply`. */
    Identifier getGivingOperand(int n) { result = this.getGivingOperandsList().getItem(n) }

    /** Get a giving operands belonging to this `Multiply`. */
    Identifier getAGivingOperand() { result = this.getGivingOperandsList().getAnItem() }

    /** Get the first giving operands in the list. */
    Identifier getFirstGivingOperand() { result = this.getGivingOperandsList().getFirstItem() }

    /** Get the last giving operands in the list. */
    Identifier getLastGivingOperand() { result = this.getGivingOperandsList().getLastItem() }

    /** Get the number of elements in the list of giving operands. */
    int getGivingOperandsSize() { result = this.getGivingOperandsList().size() }

    /** Get the initial operand of this `Multiply`. */
    Identifier getInitialOperand() { identifier(result, _, this, 14128980) }

    /** Get the not on size error of this `Multiply`. */
    override NotOnSizeErrorBranch getNotOnSizeError() { branch(result, _, this, 82126985) }

    /** Get the on size error of this `Multiply`. */
    override OnSizeErrorBranch getOnSizeError() { branch(result, _, this, 23507810) }

    /** Get the scope terminator of this `Multiply`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Multiply" }

}

library class NEqOp_ extends @n_eq_op, RelationOperator {

    override string toString() { result = "NEqOp" }

}

library class NamedUnit_ extends @named_unit, Unit {

    /** Get the name of this `NamedUnit`. */
    abstract string getName();

    override string toString() { result = "NamedUnit" }

}

library class NegExpr_ extends @neg_expr, ArithmeticExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the expression of this `NegExpr`. */
    ArithmeticExpr getExpression() { expr(result, _, this, 4913101) }

    override string toString() { result = "NegExpr" }

}

library class NextSentence_ extends @next_sentence, Stmt {

    override string toString() { result = "NextSentence" }

}

library class NoDataBranch_ extends @no_data_branch, Branch {

    override string toString() { result = "NoDataBranch" }

}

library class NotAtEndBranch_ extends @not_at_end_branch, Branch {

    override string toString() { result = "NotAtEndBranch" }

}

library class NotAtEndOfPageBranch_ extends @not_at_end_of_page_branch, Branch {

    override string toString() { result = "NotAtEndOfPageBranch" }

}

library class NotClassConditionExpr_ extends @not_class_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the class type of this `NotClassConditionExpr`. */
    ClassType getClassType() { class_type(result, _, this) }

    /** Get the identifier of this `NotClassConditionExpr`. */
    Identifier getIdentifier() { identifier(result, _, this, 68656865) }

    override string toString() { result = "NotClassConditionExpr" }

}

library class NotInvalidKeyBranch_ extends @not_invalid_key_branch, Branch {

    override string toString() { result = "NotInvalidKeyBranch" }

}

library class NotOmittedConditionExpr_ extends @not_omitted_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the data name of this `NotOmittedConditionExpr`. */
    string getDataName() { not_omitted_condition_expr_data_name(this, 40055468, result) }

    override string toString() { result = "NotOmittedConditionExpr" }

}

library class NotOnEscapeBranch_ extends @not_on_escape_branch, Branch {

    override string toString() { result = "NotOnEscapeBranch" }

}

library class NotOnExceptionBranch_ extends @not_on_exception_branch, Branch {

    override string toString() { result = "NotOnExceptionBranch" }

}

library class NotOnOverflowBranch_ extends @not_on_overflow_branch, Branch {

    override string toString() { result = "NotOnOverflowBranch" }

}

library class NotOnSizeErrorBranch_ extends @not_on_size_error_branch, Branch {

    override string toString() { result = "NotOnSizeErrorBranch" }

}

library class NotSignConditionExpr_ extends @not_sign_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the expr of this `NotSignConditionExpr`. */
    ArithmeticExpr getExpr() { expr(result, _, this, 59595097) }

    /** Get the sign type of this `NotSignConditionExpr`. */
    string getSignType() { not_sign_condition_expr_sign_type(this, 74014681, result) }

    override string toString() { result = "NotSignConditionExpr" }

}

library class NumericExpr_ extends @numeric_expr, ArithmeticExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the literal of this `NumericExpr`. */
    Literal getLiteral() { literal(result, _, this, 81581247) }

    override string toString() { result = "NumericExpr" }

}

library class NumericLiteral_ extends @numeric_literal, Literal {

    override string toString() { result = "NumericLiteral" }

}

library class NumericSignClause_ extends @numeric_sign_clause, Clause {

    /** Get the position of this `NumericSignClause`. */
    string getPosition() { numeric_sign_clause_position(this, 38774791, result) }

    /** Get the separate of this `NumericSignClause`. */
    string getSeparate() { numeric_sign_clause_separate(this, 89431000, result) }

    override string toString() { result = "NumericSignClause" }

}

library class ObjectSection_ extends @object_section, Unit {

    override string toString() { result = "ObjectSection" }

}

library class ObjectStorageSection_ extends @object_storage_section, Unit {

    override string toString() { result = "ObjectStorageSection" }

}

library class OccursClause_ extends @occurs_clause, Clause {

    /** Get the indexed by of this `OccursClause`. */
    IndexedBy getIndexedBy() { phrase(result, _, this, 67808443) }

    /** Get the maximum of this `OccursClause`. */
    int getMaximum() { occurs_clause_maximum(this, 21560422, result) }

    /** Get the minimum of this `OccursClause`. */
    int getMinimum() { occurs_clause_minimum(this, 87579192, result) }

    /** Get the object of this `OccursClause`. */
    DataReference getObject() { reference(result, _, this, 86745860) }

    override string toString() { result = "OccursClause" }

}

library class Omitted_ extends @omitted, CallArgValue, Phrase {

    override AstNode getParent() { result = Phrase.super.getParent() }

    override string toString() { result = "Omitted" }

}

library class OmittedConditionExpr_ extends @omitted_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the data name of this `OmittedConditionExpr`. */
    string getDataName() { omitted_condition_expr_data_name(this, 40055468, result) }

    override string toString() { result = "OmittedConditionExpr" }

}

library class OnEscapeBranch_ extends @on_escape_branch, Branch {

    override string toString() { result = "OnEscapeBranch" }

}

library class OnExceptionBranch_ extends @on_exception_branch, Branch {

    override string toString() { result = "OnExceptionBranch" }

}

library class OnOverflowBranch_ extends @on_overflow_branch, Branch {

    override string toString() { result = "OnOverflowBranch" }

}

library class OnSizeErrorBranch_ extends @on_size_error_branch, Branch {

    override string toString() { result = "OnSizeErrorBranch" }

}

library class Open_ extends @open, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the list of files belonging to this `Open`. */
    FileReferenceList getFilesList() { file_reference_list(result, this, 28907142) }

    /** Get the nth files of this `Open`. */
    FileReference getFile(int n) { result = this.getFilesList().getItem(n) }

    /** Get a files belonging to this `Open`. */
    FileReference getAFile() { result = this.getFilesList().getAnItem() }

    /** Get the first files in the list. */
    FileReference getFirstFile() { result = this.getFilesList().getFirstItem() }

    /** Get the last files in the list. */
    FileReference getLastFile() { result = this.getFilesList().getLastItem() }

    /** Get the number of elements in the list of files. */
    int getFilesSize() { result = this.getFilesList().size() }

    override string toString() { result = "Open" }

}

library class Optional_ extends @optional, Phrase {

    override string toString() { result = "Optional" }

}

library class OtherHeader_ extends @other_header, Header {

    override string toString() { result = "OtherHeader" }

}

library class OtherLiteral_ extends @other_literal, Literal {

    override string toString() { result = "OtherLiteral" }

}

library class OtherStmt_ extends @other_stmt, Stmt {

    /** Get the at end of this `OtherStmt`. */
    AtEndBranch getAtEnd() { branch(result, _, this, 72396675) }

    /** Get the at end of page of this `OtherStmt`. */
    AtEndOfPageBranch getAtEndOfPage() { branch(result, _, this, 88262394) }

    /** Get the invalid key of this `OtherStmt`. */
    InvalidKeyBranch getInvalidKey() { branch(result, _, this, 38268067) }

    /** Get the no data of this `OtherStmt`. */
    NoDataBranch getNoData() { branch(result, _, this, 7895265) }

    /** Get the not at end of this `OtherStmt`. */
    NotAtEndBranch getNotAtEnd() { branch(result, _, this, 60202861) }

    /** Get the not at end of page of this `OtherStmt`. */
    NotAtEndOfPageBranch getNotAtEndOfPage() { branch(result, _, this, 6939967) }

    /** Get the not invalid key of this `OtherStmt`. */
    NotInvalidKeyBranch getNotInvalidKey() { branch(result, _, this, 50171949) }

    /** Get the not on exception of this `OtherStmt`. */
    NotOnExceptionBranch getNotOnException() { branch(result, _, this, 62817523) }

    /** Get the not on overflow of this `OtherStmt`. */
    NotOnOverflowBranch getNotOnOverflow() { branch(result, _, this, 1081926) }

    /** Get the not on size error of this `OtherStmt`. */
    NotOnSizeErrorBranch getNotOnSizeError() { branch(result, _, this, 82126985) }

    /** Get the on exception of this `OtherStmt`. */
    OnExceptionBranch getOnException() { branch(result, _, this, 76275576) }

    /** Get the on overflow of this `OtherStmt`. */
    OnOverflowBranch getOnOverflow() { branch(result, _, this, 6269505) }

    /** Get the on size error of this `OtherStmt`. */
    OnSizeErrorBranch getOnSizeError() { branch(result, _, this, 23507810) }

    /** Get the with data of this `OtherStmt`. */
    WithDataBranch getWithData() { branch(result, _, this, 22034517) }

    override string toString() { result = "OtherStmt" }

}

library class Paragraph_ extends @paragraph, NamedUnit, Unit {

    override AstNode getParent() { result = Unit.super.getParent() }

    /** Get the exit node of this `Paragraph`. */
    ExitNode getExitNode() { meta(result, _, this) }

    /** Get the name of this `Paragraph`. */
    override string getName() { paragraph_name(this, 17630164, result) }

    /** Get the list of sentences belonging to this `Paragraph`. */
    SentenceList getSentencesList() { sentence_list(result, this) }

    /** Get the nth sentences of this `Paragraph`. */
    Sentence getSentence(int n) { result = this.getSentencesList().getItem(n) }

    /** Get a sentences belonging to this `Paragraph`. */
    Sentence getASentence() { result = this.getSentencesList().getAnItem() }

    /** Get the first sentences in the list. */
    Sentence getFirstSentence() { result = this.getSentencesList().getFirstItem() }

    /** Get the last sentences in the list. */
    Sentence getLastSentence() { result = this.getSentencesList().getLastItem() }

    /** Get the number of elements in the list of sentences. */
    int getSentencesSize() { result = this.getSentencesList().size() }

    override string toString() { result = "Paragraph" }

}

library class ParagraphList_ extends @paragraph_list, AstNode {

    override AstNode getParent() { paragraph_list(this, result) }

    /** Get an item of this `ParagraphList` */
    Unit getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `ParagraphList` */
    Unit getItem(int n) { unit(result, _, this, n) }

    Unit getFirstItem() { result = this.getItem(0) }

    Unit getLastItem() { result = this.getItem(size() - 1) }

    Unit getNextItem(Unit item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "ParagraphList" }

}

library class Perform_ extends @perform, Stmt {

    /** Get the loop form of this `Perform`. */
    abstract LoopForm getLoopForm();

    override string toString() { result = "Perform" }

}

library class PerformInline_ extends @perform_inline, Perform, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the loop form of this `PerformInline`. */
    override LoopForm getLoopForm() { phrase(result, _, this, 69939199) }

    /** Get the list of statements belonging to this `PerformInline`. */
    StmtList getStatementsList() { stmt_list(result, this) }

    /** Get the nth statements of this `PerformInline`. */
    Stmt getStatement(int n) { result = this.getStatementsList().getItem(n) }

    /** Get a statements belonging to this `PerformInline`. */
    Stmt getAStatement() { result = this.getStatementsList().getAnItem() }

    /** Get the first statements in the list. */
    Stmt getFirstStatement() { result = this.getStatementsList().getFirstItem() }

    /** Get the last statements in the list. */
    Stmt getLastStatement() { result = this.getStatementsList().getLastItem() }

    /** Get the number of elements in the list of statements. */
    int getStatementsSize() { result = this.getStatementsList().size() }

    override string toString() { result = "PerformInline" }

}

library class PerformOutofline_ extends @perform_outofline, Perform, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the loop form of this `PerformOutofline`. */
    override LoopForm getLoopForm() { phrase(result, _, this, 69939199) }

    /** Get the procedure name 1 of this `PerformOutofline`. */
    ProcedureReference getProcedureName1() { reference(result, _, this, 62197436) }

    /** Get the procedure name 2 of this `PerformOutofline`. */
    ProcedureReference getProcedureName2() { reference(result, _, this, 43466907) }

    override string toString() { result = "PerformOutofline" }

}

library class Phrase_ extends @phrase, AstNode {

    override AstNode getParent() { phrase(this, _, result, _) }

    override string toString() { result = "Phrase" }

}

library class PictureClause_ extends @picture_clause, Clause {

    /** Get the category of this `PictureClause`. */
    string getCategory() { picture_clause_category(this, 91772045, result) }

    /** Get the normalized picture string of this `PictureClause`. */
    string getNormalizedPictureString() {
        picture_clause_normalized_picture_string(this, 61801571, result)
    }

    /** Get the picture string of this `PictureClause`. */
    string getPictureString() { picture_clause_picture_string(this, 93832147, result) }

    override string toString() { result = "PictureClause" }

}

library class PlusExpr_ extends @plus_expr, ArithmeticExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the expression of this `PlusExpr`. */
    ArithmeticExpr getExpression() { expr(result, _, this, 4913101) }

    override string toString() { result = "PlusExpr" }

}

library class PowExpr_ extends @pow_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `PowExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `PowExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "PowExpr" }

}

library class PredefinedClassType_ extends @predefined_class_type, ClassType {

    override string toString() { result = "PredefinedClassType" }

}

library class PredefinedObject_ extends @predefined_object, Identifier {

    /** Get the value of this `PredefinedObject`. */
    string getValue() { predefined_object_value(this, 62802739, result) }

    override string toString() { result = "PredefinedObject" }

}

library class PreprocessingDirective_ extends @preprocessing_directive, AstNode {

    override string toString() { result = "PreprocessingDirective" }

}

library class PreprocessingDirectiveList_ extends @preprocessing_directive_list, AstNode {

    override AstNode getParent() { preprocessing_directive_list(this, result) }

    /** Get an item of this `PreprocessingDirectiveList` */
    PreprocessingDirective getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `PreprocessingDirectiveList` */
    PreprocessingDirective getItem(int n) {
           call_arg(result, _, this, n)
        or stmt(result, _, this, n)
    }

    PreprocessingDirective getFirstItem() { result = this.getItem(0) }

    PreprocessingDirective getLastItem() { result = this.getItem(size() - 1) }

    PreprocessingDirective getNextItem(PreprocessingDirective item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "PreprocessingDirectiveList" }

}

library class ProcedureDivision_ extends @procedure_division, Division, Unit {

    override AstNode getParent() { result = Unit.super.getParent() }

    /** Get the declaratives of this `ProcedureDivision`. */
    Declaratives getDeclaratives() { unit(result, _, this, 30214743) }

    /** Get the exit node of this `ProcedureDivision`. */
    ExitNode getExitNode() { meta(result, _, this) }

    /** Get the header of this `ProcedureDivision`. */
    override ProcedureDivisionHeader getHeader() { header(result, _, this) }

    /** Get the list of paragraphs belonging to this `ProcedureDivision`. */
    ParagraphList getParagraphsList() { paragraph_list(result, this) }

    /** Get the nth paragraphs of this `ProcedureDivision`. */
    Paragraph getParagraph(int n) { result = this.getParagraphsList().getItem(n) }

    /** Get a paragraphs belonging to this `ProcedureDivision`. */
    Paragraph getAParagraph() { result = this.getParagraphsList().getAnItem() }

    /** Get the first paragraphs in the list. */
    Paragraph getFirstParagraph() { result = this.getParagraphsList().getFirstItem() }

    /** Get the last paragraphs in the list. */
    Paragraph getLastParagraph() { result = this.getParagraphsList().getLastItem() }

    /** Get the number of elements in the list of paragraphs. */
    int getParagraphsSize() { result = this.getParagraphsList().size() }

    /** Get the list of sections belonging to this `ProcedureDivision`. */
    SectionList getSectionsList() { section_list(result, this) }

    /** Get the nth sections of this `ProcedureDivision`. */
    Section getSection(int n) { result = this.getSectionsList().getItem(n) }

    /** Get a sections belonging to this `ProcedureDivision`. */
    Section getASection() { result = this.getSectionsList().getAnItem() }

    /** Get the first sections in the list. */
    Section getFirstSection() { result = this.getSectionsList().getFirstItem() }

    /** Get the last sections in the list. */
    Section getLastSection() { result = this.getSectionsList().getLastItem() }

    /** Get the number of elements in the list of sections. */
    int getSectionsSize() { result = this.getSectionsList().size() }

    /** Get the list of sentences belonging to this `ProcedureDivision`. */
    SentenceList getSentencesList() { sentence_list(result, this) }

    /** Get the nth sentences of this `ProcedureDivision`. */
    Sentence getSentence(int n) { result = this.getSentencesList().getItem(n) }

    /** Get a sentences belonging to this `ProcedureDivision`. */
    Sentence getASentence() { result = this.getSentencesList().getAnItem() }

    /** Get the first sentences in the list. */
    Sentence getFirstSentence() { result = this.getSentencesList().getFirstItem() }

    /** Get the last sentences in the list. */
    Sentence getLastSentence() { result = this.getSentencesList().getLastItem() }

    /** Get the number of elements in the list of sentences. */
    int getSentencesSize() { result = this.getSentencesList().size() }

    override string toString() { result = "ProcedureDivision" }

}

library class ProcedureDivisionHeader_ extends @procedure_division_header, Header {

    /** Get the returning of this `ProcedureDivisionHeader`. */
    Identifier getReturning() { identifier(result, _, this, 62494607) }

    /** Get the list of usings belonging to this `ProcedureDivisionHeader`. */
    ProcedureDivisionParameterList getUsingList() {
        procedure_division_parameter_list(result, this)
    }

    /** Get the nth using of this `ProcedureDivisionHeader`. */
    ProcedureDivisionParameter getUsing(int n) { result = this.getUsingList().getItem(n) }

    /** Get a using belonging to this `ProcedureDivisionHeader`. */
    ProcedureDivisionParameter getAUsing() { result = this.getUsingList().getAnItem() }

    /** Get the first using in the list. */
    ProcedureDivisionParameter getFirstUsing() { result = this.getUsingList().getFirstItem() }

    /** Get the last using in the list. */
    ProcedureDivisionParameter getLastUsing() { result = this.getUsingList().getLastItem() }

    /** Get the number of elements in the list of usings. */
    int getUsingSize() { result = this.getUsingList().size() }

    override string toString() { result = "ProcedureDivisionHeader" }

}

library class ProcedureDivisionParameter_ extends @procedure_division_parameter, AstNode {

    override AstNode getParent() { procedure_division_parameter(this, _, result, _) }

    /** Get the optional of this `ProcedureDivisionParameter`. */
    Optional getOptional() { phrase(result, _, this, 60112871) }

    /** Get the value of this `ProcedureDivisionParameter`. */
    Identifier getValue() { identifier(result, _, this, 7947762) }

    override string toString() { result = "ProcedureDivisionParameter" }

}

library class ProcedureDivisionParameterByOutput_ extends @procedure_division_parameter_by_output, ProcedureDivisionParameter {

    override string toString() { result = "ProcedureDivisionParameterByOutput" }

}

library class ProcedureDivisionParameterByReference_ extends @procedure_division_parameter_by_reference, ProcedureDivisionParameter {

    override string toString() { result = "ProcedureDivisionParameterByReference" }

}

library class ProcedureDivisionParameterByValue_ extends @procedure_division_parameter_by_value, ProcedureDivisionParameter {

    override string toString() { result = "ProcedureDivisionParameterByValue" }

}

library class ProcedureDivisionParameterList_ extends @procedure_division_parameter_list, AstNode {

    override AstNode getParent() { procedure_division_parameter_list(this, result) }

    /** Get an item of this `ProcedureDivisionParameterList` */
    ProcedureDivisionParameter getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `ProcedureDivisionParameterList` */
    ProcedureDivisionParameter getItem(int n) { procedure_division_parameter(result, _, this, n) }

    ProcedureDivisionParameter getFirstItem() { result = this.getItem(0) }

    ProcedureDivisionParameter getLastItem() { result = this.getItem(size() - 1) }

    ProcedureDivisionParameter getNextItem(ProcedureDivisionParameter item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "ProcedureDivisionParameterList" }

}

library class ProcedureReference_ extends @procedure_reference, Reference {

    /** Get the name of this `ProcedureReference`. */
    override string getName() { procedure_reference_name(this, 17630164, result) }

    /** Get the qualification of this `ProcedureReference`. */
    string getQualification() { procedure_reference_qualification(this, 22515511, result) }

    override string toString() { result = "ProcedureReference" }

}

library class ProcedureReferenceList_ extends @procedure_reference_list, AstNode {

    override AstNode getParent() { procedure_reference_list(this, result) }

    /** Get an item of this `ProcedureReferenceList` */
    Reference getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `ProcedureReferenceList` */
    Reference getItem(int n) { reference(result, _, this, n) }

    Reference getFirstItem() { result = this.getItem(0) }

    Reference getLastItem() { result = this.getItem(size() - 1) }

    Reference getNextItem(Reference item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "ProcedureReferenceList" }

}

library class ProgramDefinition_ extends @program_definition, Unit {

    /** Get the data division of this `ProgramDefinition`. */
    DataDivision getDataDivision() { unit(result, _, this, 16098283) }

    /** Get the environment division of this `ProgramDefinition`. */
    EnvironmentDivision getEnvironmentDivision() { unit(result, _, this, 83900149) }

    /** Get the identification division of this `ProgramDefinition`. */
    IdentificationDivision getIdentificationDivision() { unit(result, _, this, 29590964) }

    /** Get the procedure division of this `ProgramDefinition`. */
    ProcedureDivision getProcedureDivision() { unit(result, _, this, 84902220) }

    /** Get the list of source units belonging to this `ProgramDefinition`. */
    UnitList getSourceUnitsList() { unit_list(result, this) }

    /** Get the nth source units of this `ProgramDefinition`. */
    Unit getSourceUnit(int n) { result = this.getSourceUnitsList().getItem(n) }

    /** Get a source units belonging to this `ProgramDefinition`. */
    Unit getASourceUnit() { result = this.getSourceUnitsList().getAnItem() }

    /** Get the first source units in the list. */
    Unit getFirstSourceUnit() { result = this.getSourceUnitsList().getFirstItem() }

    /** Get the last source units in the list. */
    Unit getLastSourceUnit() { result = this.getSourceUnitsList().getLastItem() }

    /** Get the number of elements in the list of source units. */
    int getSourceUnitsSize() { result = this.getSourceUnitsList().size() }

    override string toString() { result = "ProgramDefinition" }

}

library class ProgramName_ extends @program_name, AstNode {

    override string toString() { result = "ProgramName" }

}

library class QualifiedDataNameWithSubscripts_ extends @qualified_data_name_with_subscripts, Identifier {

    /** Get the reference of this `QualifiedDataNameWithSubscripts`. */
    DataReference getReference() { reference(result, _, this, 55859486) }

    /** Get the reference modifier of this `QualifiedDataNameWithSubscripts`. */
    ReferenceModifier getReferenceModifier() { reference_modifier_t(result, _, this) }

    /** Get the list of subscripts belonging to this `QualifiedDataNameWithSubscripts`. */
    SubscriptList getSubscriptsList() { subscript_list(result, this) }

    /** Get the nth subscripts of this `QualifiedDataNameWithSubscripts`. */
    Subscript getSubscript(int n) { result = this.getSubscriptsList().getItem(n) }

    /** Get a subscripts belonging to this `QualifiedDataNameWithSubscripts`. */
    Subscript getASubscript() { result = this.getSubscriptsList().getAnItem() }

    /** Get the first subscripts in the list. */
    Subscript getFirstSubscript() { result = this.getSubscriptsList().getFirstItem() }

    /** Get the last subscripts in the list. */
    Subscript getLastSubscript() { result = this.getSubscriptsList().getLastItem() }

    /** Get the number of elements in the list of subscripts. */
    int getSubscriptsSize() { result = this.getSubscriptsList().size() }

    override string toString() { result = "QualifiedDataNameWithSubscripts" }

}

library class QualifiedLinageCounter_ extends @qualified_linage_counter, Identifier {

    /** Get the qualification of this `QualifiedLinageCounter`. */
    string getQualification() { qualified_linage_counter_qualification(this, 22515511, result) }

    override string toString() { result = "QualifiedLinageCounter" }

}

library class QualifiedLineCounter_ extends @qualified_line_counter, Identifier, QualifiedReportCounter {

    override AstNode getParent() { result = Identifier.super.getParent() }

    /** Get the qualification of this `QualifiedLineCounter`. */
    string getQualification() { qualified_line_counter_qualification(this, 22515511, result) }

    override string toString() { result = "QualifiedLineCounter" }

}

library class QualifiedPageCounter_ extends @qualified_page_counter, Identifier, QualifiedReportCounter {

    override AstNode getParent() { result = Identifier.super.getParent() }

    /** Get the qualification of this `QualifiedPageCounter`. */
    string getQualification() { qualified_page_counter_qualification(this, 22515511, result) }

    override string toString() { result = "QualifiedPageCounter" }

}

library class QualifiedReportCounter_ extends @qualified_report_counter, Identifier {

    override string toString() { result = "QualifiedReportCounter" }

}

library class QualifiersList_ extends @qualifiers_list, AstNode {

    override AstNode getParent() { qualifiers_list(this, result) }

    /** Get an item of this `QualifiersList` */
    string getAnItem() { qualifiers_list_list(this, _, result) }

    /** Get the nth item of this `QualifiersList` */
    string getItem(int n) { qualifiers_list_list(this, n, result) }

    string getFirstItem() { result = this.getItem(0) }

    string getLastItem() { result = this.getItem(size() - 1) }

    string getNextItem(string item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "QualifiersList" }

}

library class Read_ extends @read, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the at end of this `Read`. */
    AtEndBranch getAtEnd() { branch(result, _, this, 72396675) }

    /** Get the file of this `Read`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the invalid key of this `Read`. */
    InvalidKeyBranch getInvalidKey() { branch(result, _, this, 38268067) }

    /** Get the not at end of this `Read`. */
    NotAtEndBranch getNotAtEnd() { branch(result, _, this, 60202861) }

    /** Get the not invalid key of this `Read`. */
    NotInvalidKeyBranch getNotInvalidKey() { branch(result, _, this, 50171949) }

    /** Get the scope terminator of this `Read`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Read" }

}

library class Reference_ extends @reference, AstNode {

    override AstNode getParent() { reference(this, _, result, _) }

    override string toString() { result = "Reference" }

}

library class ReferenceModifier_ extends @reference_modifier, ReferenceModifierT {

    /** Get the length of this `ReferenceModifier`. */
    ArithmeticExpr getLength() { expr(result, _, this, 37764999) }

    /** Get the start of this `ReferenceModifier`. */
    ArithmeticExpr getStart() { expr(result, _, this, 77965600) }

    override string toString() { result = "ReferenceModifier" }

}

library class ReferenceModifierT_ extends @reference_modifier_t, AstNode {

    override AstNode getParent() { reference_modifier_t(this, _, result) }

    override string toString() { result = "ReferenceModifierT" }

}

library class RelationObject_ extends @relation_object, AstNode {

    override string toString() { result = "RelationObject" }

}

library class RelationObjectExpr_ extends @relation_object_expr, AbbrLogExpr, Expr, WhenObject {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the operand of this `RelationObjectExpr`. */
    RelationObject getOperand() {
           expr(result, _, this, 38417992)
        or identifier(result, _, this, 38417992)
        or literal(result, _, this, 38417992)
        or special_register(result, _, this)
    }

    /** Get the operator of this `RelationObjectExpr`. */
    RelationOperator getOperator() { relation_operator(result, _, this) }

    override string toString() { result = "RelationObjectExpr" }

}

library class RelationOperand_ extends @relation_operand, RelationObject {

    override string toString() { result = "RelationOperand" }

}

library class RelationOperator_ extends @relation_operator, AstNode {

    override AstNode getParent() { relation_operator(this, _, result) }

    override string toString() { result = "RelationOperator" }

}

library class RelativeSubscript_ extends @relative_subscript, Expr, Subscript {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the modifier of this `RelativeSubscript`. */
    int getModifier() { relative_subscript_modifier(this, 30045931, result) }

    /** Get the reference of this `RelativeSubscript`. */
    Reference getReference() { reference(result, _, this, 93464331) }

    override string toString() { result = "RelativeSubscript" }

}

library class Replace_ extends @replace, PreprocessingDirective, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    override string toString() { result = "Replace" }

}

library class ReportDescriptionEntry_ extends @report_description_entry, DescriptionEntry {

    /** Get the name of this `ReportDescriptionEntry`. */
    override string getName() { report_description_entry_name(this, 17630164, result) }

    override string toString() { result = "ReportDescriptionEntry" }

}

library class ReportGroupDescriptionEntry_ extends @report_group_description_entry, DescriptionEntry {

    /** Get the level number of this `ReportGroupDescriptionEntry`. */
    int getLevelNumber() { report_group_description_entry_level_number(this, 72382198, result) }

    /** Get the name of this `ReportGroupDescriptionEntry`. */
    override string getName() { report_group_description_entry_name(this, 17630164, result) }

    /** Get the occurs of this `ReportGroupDescriptionEntry`. */
    OccursClause getOccurs() { clause(result, _, this, 90984231) }

    /** Get the picture of this `ReportGroupDescriptionEntry`. */
    PictureClause getPicture() { clause(result, _, this, 41993279) }

    override string toString() { result = "ReportGroupDescriptionEntry" }

}

library class ReportSection_ extends @report_section, Unit {

    /** Get the list of entries belonging to this `ReportSection`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `ReportSection`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `ReportSection`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "ReportSection" }

}

library class ReturnStmt_ extends @return_stmt, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the at end of this `ReturnStmt`. */
    AtEndBranch getAtEnd() { branch(result, _, this, 72396675) }

    /** Get the file of this `ReturnStmt`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the not at end of this `ReturnStmt`. */
    NotAtEndBranch getNotAtEnd() { branch(result, _, this, 60202861) }

    /** Get the scope terminator of this `ReturnStmt`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "ReturnStmt" }

}

library class Rewrite_ extends @rewrite, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the file of this `Rewrite`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the invalid key of this `Rewrite`. */
    InvalidKeyBranch getInvalidKey() { branch(result, _, this, 38268067) }

    /** Get the not invalid key of this `Rewrite`. */
    NotInvalidKeyBranch getNotInvalidKey() { branch(result, _, this, 50171949) }

    /** Get the record of this `Rewrite`. */
    Identifier getRecord() { identifier(result, _, this, 18063713) }

    /** Get the scope terminator of this `Rewrite`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Rewrite" }

}

library class ScopeTerminator_ extends @scope_terminator, Phrase {

    override string toString() { result = "ScopeTerminator" }

}

library class ScreenDescriptionEntry_ extends @screen_description_entry, DescriptionEntry {

    /** Get the level number of this `ScreenDescriptionEntry`. */
    int getLevelNumber() { screen_description_entry_level_number(this, 72382198, result) }

    /** Get the name of this `ScreenDescriptionEntry`. */
    override string getName() { screen_description_entry_name(this, 17630164, result) }

    /** Get the occurs of this `ScreenDescriptionEntry`. */
    OccursClause getOccurs() { clause(result, _, this, 90984231) }

    /** Get the picture of this `ScreenDescriptionEntry`. */
    PictureClause getPicture() { clause(result, _, this, 41993279) }

    /** Get the usage of this `ScreenDescriptionEntry`. */
    UsageClause getUsage() { clause(result, _, this, 31974695) }

    override string toString() { result = "ScreenDescriptionEntry" }

}

library class ScreenSection_ extends @screen_section, Unit {

    /** Get the list of entries belonging to this `ScreenSection`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `ScreenSection`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `ScreenSection`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "ScreenSection" }

}

library class Search_ extends @search, Stmt {

    /** Get the list of branches belonging to this `Search`. */
    BranchList getBranchesList() { branch_list(result, this) }

    /** Get the nth branches of this `Search`. */
    Branch getBranch(int n) { result = this.getBranchesList().getItem(n) }

    /** Get a branches belonging to this `Search`. */
    Branch getABranch() { result = this.getBranchesList().getAnItem() }

    /** Get the first branches in the list. */
    Branch getFirstBranch() { result = this.getBranchesList().getFirstItem() }

    /** Get the last branches in the list. */
    Branch getLastBranch() { result = this.getBranchesList().getLastItem() }

    /** Get the number of elements in the list of branches. */
    int getBranchesSize() { result = this.getBranchesList().size() }

    /** Get the scope terminator of this `Search`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Search" }

}

library class Section_ extends @section, NamedUnit, Unit {

    override AstNode getParent() { result = Unit.super.getParent() }

    /** Get the exit node of this `Section`. */
    ExitNode getExitNode() { meta(result, _, this) }

    /** Get the name of this `Section`. */
    override string getName() { section_name(this, 17630164, result) }

    /** Get the list of paragraphs belonging to this `Section`. */
    ParagraphList getParagraphsList() { paragraph_list(result, this) }

    /** Get the nth paragraphs of this `Section`. */
    Paragraph getParagraph(int n) { result = this.getParagraphsList().getItem(n) }

    /** Get a paragraphs belonging to this `Section`. */
    Paragraph getAParagraph() { result = this.getParagraphsList().getAnItem() }

    /** Get the first paragraphs in the list. */
    Paragraph getFirstParagraph() { result = this.getParagraphsList().getFirstItem() }

    /** Get the last paragraphs in the list. */
    Paragraph getLastParagraph() { result = this.getParagraphsList().getLastItem() }

    /** Get the number of elements in the list of paragraphs. */
    int getParagraphsSize() { result = this.getParagraphsList().size() }

    /** Get the list of sentences belonging to this `Section`. */
    SentenceList getSentencesList() { sentence_list(result, this) }

    /** Get the nth sentences of this `Section`. */
    Sentence getSentence(int n) { result = this.getSentencesList().getItem(n) }

    /** Get a sentences belonging to this `Section`. */
    Sentence getASentence() { result = this.getSentencesList().getAnItem() }

    /** Get the first sentences in the list. */
    Sentence getFirstSentence() { result = this.getSentencesList().getFirstItem() }

    /** Get the last sentences in the list. */
    Sentence getLastSentence() { result = this.getSentencesList().getLastItem() }

    /** Get the number of elements in the list of sentences. */
    int getSentencesSize() { result = this.getSentencesList().size() }

    override string toString() { result = "Section" }

}

library class SectionList_ extends @section_list, AstNode {

    override AstNode getParent() { section_list(this, result) }

    /** Get an item of this `SectionList` */
    Unit getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `SectionList` */
    Unit getItem(int n) { unit(result, _, this, n) }

    Unit getFirstItem() { result = this.getItem(0) }

    Unit getLastItem() { result = this.getItem(size() - 1) }

    Unit getNextItem(Unit item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "SectionList" }

}

library class Sentence_ extends @sentence, Unit {

    /** Get the list of statements belonging to this `Sentence`. */
    StmtList getStatementsList() { stmt_list(result, this) }

    /** Get the nth statements of this `Sentence`. */
    Stmt getStatement(int n) { result = this.getStatementsList().getItem(n) }

    /** Get a statements belonging to this `Sentence`. */
    Stmt getAStatement() { result = this.getStatementsList().getAnItem() }

    /** Get the first statements in the list. */
    Stmt getFirstStatement() { result = this.getStatementsList().getFirstItem() }

    /** Get the last statements in the list. */
    Stmt getLastStatement() { result = this.getStatementsList().getLastItem() }

    /** Get the number of elements in the list of statements. */
    int getStatementsSize() { result = this.getStatementsList().size() }

    override string toString() { result = "Sentence" }

}

library class SentenceList_ extends @sentence_list, AstNode {

    override AstNode getParent() { sentence_list(this, result) }

    /** Get an item of this `SentenceList` */
    Unit getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `SentenceList` */
    Unit getItem(int n) { unit(result, _, this, n) }

    Unit getFirstItem() { result = this.getItem(0) }

    Unit getLastItem() { result = this.getItem(size() - 1) }

    Unit getNextItem(Unit item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "SentenceList" }

}

library class SignClause_ extends @sign_clause, Clause {

    /** Get the position of this `SignClause`. */
    string getPosition() { sign_clause_position(this, 38774791, result) }

    /** Get the separate of this `SignClause`. */
    string getSeparate() { sign_clause_separate(this, 89431000, result) }

    override string toString() { result = "SignClause" }

}

library class SignConditionExpr_ extends @sign_condition_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the expr of this `SignConditionExpr`. */
    ArithmeticExpr getExpr() { expr(result, _, this, 59595097) }

    /** Get the sign type of this `SignConditionExpr`. */
    string getSignType() { sign_condition_expr_sign_type(this, 74014681, result) }

    override string toString() { result = "SignConditionExpr" }

}

library class Sort_ extends @sort, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the file of this `Sort`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the list of givings belonging to this `Sort`. */
    FileReferenceList getGivingList() { file_reference_list(result, this, 97224510) }

    /** Get the nth giving of this `Sort`. */
    FileReference getGiving(int n) { result = this.getGivingList().getItem(n) }

    /** Get a giving belonging to this `Sort`. */
    FileReference getAGiving() { result = this.getGivingList().getAnItem() }

    /** Get the first giving in the list. */
    FileReference getFirstGiving() { result = this.getGivingList().getFirstItem() }

    /** Get the last giving in the list. */
    FileReference getLastGiving() { result = this.getGivingList().getLastItem() }

    /** Get the number of elements in the list of givings. */
    int getGivingSize() { result = this.getGivingList().size() }

    /** Get the list of usings belonging to this `Sort`. */
    FileReferenceList getUsingList() { file_reference_list(result, this, 1495477) }

    /** Get the nth using of this `Sort`. */
    FileReference getUsing(int n) { result = this.getUsingList().getItem(n) }

    /** Get a using belonging to this `Sort`. */
    FileReference getAUsing() { result = this.getUsingList().getAnItem() }

    /** Get the first using in the list. */
    FileReference getFirstUsing() { result = this.getUsingList().getFirstItem() }

    /** Get the last using in the list. */
    FileReference getLastUsing() { result = this.getUsingList().getLastItem() }

    /** Get the number of elements in the list of usings. */
    int getUsingSize() { result = this.getUsingList().size() }

    override string toString() { result = "Sort" }

}

library class SortMergeFileDescriptionEntry_ extends @sort_merge_file_description_entry, DescriptionEntry, FileDescription {

    override AstNode getParent() { result = DescriptionEntry.super.getParent() }

    /** Get the block contains of this `SortMergeFileDescriptionEntry`. */
    BlockContainsClause getBlockContains() { clause(result, _, this, 9263068) }

    /** Get the name of this `SortMergeFileDescriptionEntry`. */
    override string getName() { sort_merge_file_description_entry_name(this, 17630164, result) }

    override string toString() { result = "SortMergeFileDescriptionEntry" }

}

library class SourceFormatDirective_ extends @source_format_directive, Directive {

    /** Get the format of this `SourceFormatDirective`. */
    string getFormat() { source_format_directive_format(this, 25978564, result) }

    override string toString() { result = "SourceFormatDirective" }

}

library class SourceUnit_ extends @source_unit, Unit {

    /** Get the list of source units belonging to this `SourceUnit`. */
    UnitList getSourceUnitsList() { unit_list(result, this) }

    /** Get the nth source units of this `SourceUnit`. */
    Unit getSourceUnit(int n) { result = this.getSourceUnitsList().getItem(n) }

    /** Get a source units belonging to this `SourceUnit`. */
    Unit getASourceUnit() { result = this.getSourceUnitsList().getAnItem() }

    /** Get the first source units in the list. */
    Unit getFirstSourceUnit() { result = this.getSourceUnitsList().getFirstItem() }

    /** Get the last source units in the list. */
    Unit getLastSourceUnit() { result = this.getSourceUnitsList().getLastItem() }

    /** Get the number of elements in the list of source units. */
    int getSourceUnitsSize() { result = this.getSourceUnitsList().size() }

    override string toString() { result = "SourceUnit" }

}

library class SpecialNamesParagraph_ extends @special_names_paragraph, Unit {

    /** Get the numeric sign of this `SpecialNamesParagraph`. */
    NumericSignClause getNumericSign() { clause(result, _, this, 53677805) }

    override string toString() { result = "SpecialNamesParagraph" }

}

library class SpecialRegister_ extends @special_register, AstNode {

    override AstNode getParent() { special_register(this, _, result) }

    override string toString() { result = "SpecialRegister" }

}

library class Sql_ extends @sql, Stmt {

    /** Get the stmt of this `Sql`. */
    SqlStmt getStmt() { sql_stmt(result, _, this) }

    override string toString() { result = "Sql" }

}

library class SqlAggregateFunction_ extends @sql_aggregate_function, SqlSelection {

    override AstNode getParent() { sql_aggregate_function(this, _, result, _) }

    override string toString() { result = "SqlAggregateFunction" }

}

library class SqlAlterStmt_ extends @sql_alter_stmt, SqlDDL, SqlStmt {

    override AstNode getParent() { result = SqlStmt.super.getParent() }

    /** Get the subject of this `SqlAlterStmt`. */
    string getSubject() { sql_alter_stmt_subject(this, 93692621, result) }

    override string toString() { result = "SqlAlterStmt" }

}

library class SqlAndExpr_ extends @sql_and_expr, SqlConditionExpr, SqlExpr {

    override AstNode getParent() { result = SqlExpr.super.getParent() }

    /** Get the left operand of this `SqlAndExpr`. */
    SqlConditionExpr getLeftOperand() { sql_expr(result, _, this, 73170723) }

    /** Get the right operand of this `SqlAndExpr`. */
    SqlConditionExpr getRightOperand() { sql_expr(result, _, this, 22180757) }

    override string toString() { result = "SqlAndExpr" }

}

library class SqlClause_ extends @sql_clause, AstNode {

    override AstNode getParent() { sql_clause(this, _, result, _) }

    override string toString() { result = "SqlClause" }

}

library class SqlCloseStmt_ extends @sql_close_stmt, SqlStmt {

    /** Get the cursor of this `SqlCloseStmt`. */
    SqlCursorName getCursor() { sql_reference(result, _, this, 73600301) }

    override string toString() { result = "SqlCloseStmt" }

}

library class SqlComparison_ extends @sql_comparison, SqlConditionExpr, SqlExpr {

    override AstNode getParent() { result = SqlExpr.super.getParent() }

    /** Get the op of this `SqlComparison`. */
    SqlComparisonOp getOp() { sql_comparison_op(result, _, this) }

    override string toString() { result = "SqlComparison" }

}

library class SqlComparisonOp_ extends @sql_comparison_op, AstNode {

    override AstNode getParent() { sql_comparison_op(this, _, result) }

    override string toString() { result = "SqlComparisonOp" }

}

library class SqlConditionExpr_ extends @sql_condition_expr, SqlExpr {

    override string toString() { result = "SqlConditionExpr" }

}

library class SqlCountAll_ extends @sql_count_all, SqlAggregateFunction {

    override string toString() { result = "SqlCountAll" }

}

library class SqlCreateStmt_ extends @sql_create_stmt, SqlDDL, SqlStmt {

    override AstNode getParent() { result = SqlStmt.super.getParent() }

    override string toString() { result = "SqlCreateStmt" }

}

library class SqlCursorName_ extends @sql_cursor_name, SqlReference {

    /** Get the module of this `SqlCursorName`. */
    string getModule() { sql_cursor_name_module(this, 87449909, result) }

    /** Get the name of this `SqlCursorName`. */
    string getName() { sql_cursor_name_name(this, 17630164, result) }

    override string toString() { result = "SqlCursorName" }

}

library class SqlDDL_ extends @sql_d_d_l, SqlStmt {

    override string toString() { result = "SqlDDL" }

}

library class SqlDeclareCursorStmt_ extends @sql_declare_cursor_stmt, SqlStmt {

    /** Get the cursor of this `SqlDeclareCursorStmt`. */
    SqlCursorName getCursor() { sql_reference(result, _, this, 73600301) }

    override string toString() { result = "SqlDeclareCursorStmt" }

}

library class SqlDeleteStmt_ extends @sql_delete_stmt, SqlStmt {

    /** Get the table name of this `SqlDeleteStmt`. */
    SqlTableName getTableName() { sql_reference(result, _, this, 97143759) }

    override string toString() { result = "SqlDeleteStmt" }

}

library class SqlDropStmt_ extends @sql_drop_stmt, SqlDDL, SqlStmt {

    override AstNode getParent() { result = SqlStmt.super.getParent() }

    override string toString() { result = "SqlDropStmt" }

}

library class SqlEqOp_ extends @sql_eq_op, SqlComparisonOp {

    override string toString() { result = "SqlEqOp" }

}

library class SqlExpr_ extends @sql_expr, AstNode {

    override AstNode getParent() { sql_expr(this, _, result, _) }

    override string toString() { result = "SqlExpr" }

}

library class SqlFromClause_ extends @sql_from_clause, SqlClause {

    /** Get the list of targets belonging to this `SqlFromClause`. */
    SqlTableReferenceList getTargetsList() { sql_table_reference_list(result, this) }

    /** Get the nth targets of this `SqlFromClause`. */
    SqlTableReference getTarget(int n) { result = this.getTargetsList().getItem(n) }

    /** Get a targets belonging to this `SqlFromClause`. */
    SqlTableReference getATarget() { result = this.getTargetsList().getAnItem() }

    /** Get the first targets in the list. */
    SqlTableReference getFirstTarget() { result = this.getTargetsList().getFirstItem() }

    /** Get the last targets in the list. */
    SqlTableReference getLastTarget() { result = this.getTargetsList().getLastItem() }

    /** Get the number of elements in the list of targets. */
    int getTargetsSize() { result = this.getTargetsList().size() }

    override string toString() { result = "SqlFromClause" }

}

library class SqlGEOp_ extends @sql_g_e_op, SqlComparisonOp {

    override string toString() { result = "SqlGEOp" }

}

library class SqlGTOp_ extends @sql_g_t_op, SqlComparisonOp {

    override string toString() { result = "SqlGTOp" }

}

library class SqlHostParameterName_ extends @sql_host_parameter_name, SqlReference {

    /** Get the name of this `SqlHostParameterName`. */
    string getName() { sql_host_parameter_name_name(this, 17630164, result) }

    override string toString() { result = "SqlHostParameterName" }

}

library class SqlHostParameterSpecification_ extends @sql_host_parameter_specification, SqlIntoTarget, SqlSpec {

    override AstNode getParent() { result = SqlSpec.super.getParent() }

    /** Get the indicator of this `SqlHostParameterSpecification`. */
    SqlHostParameterName getIndicator() { sql_reference(result, _, this, 10210269) }

    /** Get the parameter of this `SqlHostParameterSpecification`. */
    SqlHostParameterName getParameter() { sql_reference(result, _, this, 53763872) }

    override string toString() { result = "SqlHostParameterSpecification" }

}

library class SqlIntoClause_ extends @sql_into_clause, SqlClause {

    /** Get the list of targets belonging to this `SqlIntoClause`. */
    SqlIntoTargetList getTargetsList() { sql_into_target_list(result, this) }

    /** Get the nth targets of this `SqlIntoClause`. */
    SqlIntoTarget getTarget(int n) { result = this.getTargetsList().getItem(n) }

    /** Get a targets belonging to this `SqlIntoClause`. */
    SqlIntoTarget getATarget() { result = this.getTargetsList().getAnItem() }

    /** Get the first targets in the list. */
    SqlIntoTarget getFirstTarget() { result = this.getTargetsList().getFirstItem() }

    /** Get the last targets in the list. */
    SqlIntoTarget getLastTarget() { result = this.getTargetsList().getLastItem() }

    /** Get the number of elements in the list of targets. */
    int getTargetsSize() { result = this.getTargetsList().size() }

    override string toString() { result = "SqlIntoClause" }

}

library class SqlIntoTarget_ extends @sql_into_target, SqlSpec {

    override string toString() { result = "SqlIntoTarget" }

}

library class SqlIntoTargetList_ extends @sql_into_target_list, AstNode {

    override AstNode getParent() { sql_into_target_list(this, result) }

    /** Get an item of this `SqlIntoTargetList` */
    SqlIntoTarget getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `SqlIntoTargetList` */
    SqlIntoTarget getItem(int n) { sql_spec(result, _, this, n) }

    SqlIntoTarget getFirstItem() { result = this.getItem(0) }

    SqlIntoTarget getLastItem() { result = this.getItem(size() - 1) }

    SqlIntoTarget getNextItem(SqlIntoTarget item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "SqlIntoTargetList" }

}

library class SqlLEOp_ extends @sql_l_e_op, SqlComparisonOp {

    override string toString() { result = "SqlLEOp" }

}

library class SqlLTOp_ extends @sql_l_t_op, SqlComparisonOp {

    override string toString() { result = "SqlLTOp" }

}

library class SqlLikePredicate_ extends @sql_like_predicate, SqlConditionExpr, SqlExpr {

    override AstNode getParent() { result = SqlExpr.super.getParent() }

    /** Get the pattern of this `SqlLikePredicate`. */
    string getPattern() { sql_like_predicate_pattern(this, 71052125, result) }

    override string toString() { result = "SqlLikePredicate" }

}

library class SqlLockTableStmt_ extends @sql_lock_table_stmt, SqlStmt {

    /** Get the table name of this `SqlLockTableStmt`. */
    SqlTableName getTableName() { sql_reference(result, _, this, 97143759) }

    override string toString() { result = "SqlLockTableStmt" }

}

library class SqlNEqOp_ extends @sql_n_eq_op, SqlComparisonOp {

    override string toString() { result = "SqlNEqOp" }

}

library class SqlNotExpr_ extends @sql_not_expr, SqlConditionExpr, SqlExpr {

    override AstNode getParent() { result = SqlExpr.super.getParent() }

    /** Get the expression of this `SqlNotExpr`. */
    SqlConditionExpr getExpression() { sql_expr(result, _, this, 58332710) }

    override string toString() { result = "SqlNotExpr" }

}

library class SqlOpenStmt_ extends @sql_open_stmt, SqlStmt {

    /** Get the cursor of this `SqlOpenStmt`. */
    SqlCursorName getCursor() { sql_reference(result, _, this, 73600301) }

    override string toString() { result = "SqlOpenStmt" }

}

library class SqlOrExpr_ extends @sql_or_expr, SqlConditionExpr, SqlExpr {

    override AstNode getParent() { result = SqlExpr.super.getParent() }

    /** Get the left operand of this `SqlOrExpr`. */
    SqlConditionExpr getLeftOperand() { sql_expr(result, _, this, 73170723) }

    /** Get the right operand of this `SqlOrExpr`. */
    SqlConditionExpr getRightOperand() { sql_expr(result, _, this, 22180757) }

    override string toString() { result = "SqlOrExpr" }

}

library class SqlOtherStmt_ extends @sql_other_stmt, SqlStmt {

    override string toString() { result = "SqlOtherStmt" }

}

library class SqlReference_ extends @sql_reference, AstNode {

    override AstNode getParent() { sql_reference(this, _, result, _) }

    override string toString() { result = "SqlReference" }

}

library class SqlRenameStmt_ extends @sql_rename_stmt, SqlDDL, SqlStmt {

    override AstNode getParent() { result = SqlStmt.super.getParent() }

    override string toString() { result = "SqlRenameStmt" }

}

library class SqlSelectStmt_ extends @sql_select_stmt, SqlStmt {

    /** Get the from of this `SqlSelectStmt`. */
    SqlFromClause getFrom() { sql_clause(result, _, this, 69265295) }

    /** Get the into of this `SqlSelectStmt`. */
    SqlIntoClause getInto() { sql_clause(result, _, this, 50257785) }

    /** Get the list of selections belonging to this `SqlSelectStmt`. */
    SqlSelectionList getSelectionList() { sql_selection_list(result, this) }

    /** Get the nth selection of this `SqlSelectStmt`. */
    SqlSelection getSelection(int n) { result = this.getSelectionList().getItem(n) }

    /** Get a selection belonging to this `SqlSelectStmt`. */
    SqlSelection getASelection() { result = this.getSelectionList().getAnItem() }

    /** Get the first selection in the list. */
    SqlSelection getFirstSelection() { result = this.getSelectionList().getFirstItem() }

    /** Get the last selection in the list. */
    SqlSelection getLastSelection() { result = this.getSelectionList().getLastItem() }

    /** Get the number of elements in the list of selections. */
    int getSelectionSize() { result = this.getSelectionList().size() }

    /** Get the where of this `SqlSelectStmt`. */
    SqlWhereClause getWhere() { sql_clause(result, _, this, 14294741) }

    override string toString() { result = "SqlSelectStmt" }

}

library class SqlSelection_ extends @sql_selection, AstNode {

    override string toString() { result = "SqlSelection" }

}

library class SqlSelectionList_ extends @sql_selection_list, AstNode {

    override AstNode getParent() { sql_selection_list(this, result) }

    /** Get an item of this `SqlSelectionList` */
    SqlSelection getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `SqlSelectionList` */
    SqlSelection getItem(int n) {
           sql_aggregate_function(result, _, this, n)
        or sql_expr(result, _, this, n)
    }

    SqlSelection getFirstItem() { result = this.getItem(0) }

    SqlSelection getLastItem() { result = this.getItem(size() - 1) }

    SqlSelection getNextItem(SqlSelection item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "SqlSelectionList" }

}

library class SqlSpec_ extends @sql_spec, AstNode {

    override AstNode getParent() { sql_spec(this, _, result, _) }

    override string toString() { result = "SqlSpec" }

}

library class SqlStmt_ extends @sql_stmt, AstNode {

    override AstNode getParent() { sql_stmt(this, _, result) }

    override string toString() { result = "SqlStmt" }

}

library class SqlTableName_ extends @sql_table_name, SqlReference, SqlTableReference {

    override AstNode getParent() { result = SqlReference.super.getParent() }

    /** Get the catalog of this `SqlTableName`. */
    string getCatalog() { sql_table_name_catalog(this, 45289086, result) }

    /** Get the module of this `SqlTableName`. */
    string getModule() { sql_table_name_module(this, 87449909, result) }

    /** Get the name of this `SqlTableName`. */
    string getName() { sql_table_name_name(this, 17630164, result) }

    /** Get the schema of this `SqlTableName`. */
    string getSchema() { sql_table_name_schema(this, 29949063, result) }

    override string toString() { result = "SqlTableName" }

}

library class SqlTableReference_ extends @sql_table_reference, SqlReference {

    override string toString() { result = "SqlTableReference" }

}

library class SqlTableReferenceList_ extends @sql_table_reference_list, AstNode {

    override AstNode getParent() { sql_table_reference_list(this, result) }

    /** Get an item of this `SqlTableReferenceList` */
    SqlTableReference getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `SqlTableReferenceList` */
    SqlTableReference getItem(int n) { sql_reference(result, _, this, n) }

    SqlTableReference getFirstItem() { result = this.getItem(0) }

    SqlTableReference getLastItem() { result = this.getItem(size() - 1) }

    SqlTableReference getNextItem(SqlTableReference item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "SqlTableReferenceList" }

}

library class SqlUnknownExpr_ extends @sql_unknown_expr, SqlConditionExpr, SqlExpr, SqlSelection {

    override AstNode getParent() { result = SqlExpr.super.getParent() }

    override string toString() { result = "SqlUnknownExpr" }

}

library class SqlUnknownReference_ extends @sql_unknown_reference, SqlReference, SqlTableReference {

    override AstNode getParent() { result = SqlReference.super.getParent() }

    override string toString() { result = "SqlUnknownReference" }

}

library class SqlUnknownSpec_ extends @sql_unknown_spec, SqlIntoTarget, SqlSpec {

    override AstNode getParent() { result = SqlSpec.super.getParent() }

    override string toString() { result = "SqlUnknownSpec" }

}

library class SqlUpdateStmt_ extends @sql_update_stmt, SqlStmt {

    /** Get the where of this `SqlUpdateStmt`. */
    SqlWhereClause getWhere() { sql_clause(result, _, this, 14294741) }

    override string toString() { result = "SqlUpdateStmt" }

}

library class SqlWhereClause_ extends @sql_where_clause, SqlClause {

    /** Get the search condition of this `SqlWhereClause`. */
    SqlConditionExpr getSearchCondition() { sql_expr(result, _, this, 45604265) }

    override string toString() { result = "SqlWhereClause" }

}

library class Start_ extends @start, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the file of this `Start`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the invalid key of this `Start`. */
    InvalidKeyBranch getInvalidKey() { branch(result, _, this, 38268067) }

    /** Get the not invalid key of this `Start`. */
    NotInvalidKeyBranch getNotInvalidKey() { branch(result, _, this, 50171949) }

    /** Get the scope terminator of this `Start`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Start" }

}

library class Stmt_ extends @stmt, AstNode {

    override AstNode getParent() { stmt(this, _, result, _) }

    override string toString() { result = "Stmt" }

}

library class StmtList_ extends @stmt_list, AstNode {

    override AstNode getParent() { stmt_list(this, result) }

    /** Get an item of this `StmtList` */
    Stmt getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `StmtList` */
    Stmt getItem(int n) { stmt(result, _, this, n) }

    Stmt getFirstItem() { result = this.getItem(0) }

    Stmt getLastItem() { result = this.getItem(size() - 1) }

    Stmt getNextItem(Stmt item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "StmtList" }

}

library class Stop_ extends @stop, Stmt {

    /** Get the endpoint of this `Stop`. */
    string getEndpoint() { stop_endpoint(this, 79263669, result) }

    /** Get the literal of this `Stop`. */
    string getLiteral() { stop_literal(this, 94670532, result) }

    override string toString() { result = "Stop" }

}

library class StringStmt_ extends @string_stmt, Stmt {

    /** Get the not on overflow of this `StringStmt`. */
    NotOnOverflowBranch getNotOnOverflow() { branch(result, _, this, 1081926) }

    /** Get the on overflow of this `StringStmt`. */
    OnOverflowBranch getOnOverflow() { branch(result, _, this, 6269505) }

    /** Get the scope terminator of this `StringStmt`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "StringStmt" }

}

library class SubExpr_ extends @sub_expr, ArithmeticExpr, BinaryExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    /** Get the left operand of this `SubExpr`. */
    override ArithmeticExpr getLeftOperand() { expr(result, _, this, 92462919) }

    /** Get the right operand of this `SubExpr`. */
    override ArithmeticExpr getRightOperand() { expr(result, _, this, 81834206) }

    override string toString() { result = "SubExpr" }

}

library class Subscript_ extends @subscript, AstNode {

    override string toString() { result = "Subscript" }

}

library class SubscriptList_ extends @subscript_list, AstNode {

    override AstNode getParent() { subscript_list(this, result) }

    /** Get an item of this `SubscriptList` */
    Subscript getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `SubscriptList` */
    Subscript getItem(int n) {
           expr(result, _, this, n)
        or literal(result, _, this, n)
    }

    Subscript getFirstItem() { result = this.getItem(0) }

    Subscript getLastItem() { result = this.getItem(size() - 1) }

    Subscript getNextItem(Subscript item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "SubscriptList" }

}

library class Subtract_ extends @subtract, ComputationalStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the corresponding of this `Subtract`. */
    CorrespondingClause getCorresponding() { clause(result, _, this, 38615929) }

    /** Get the list of from operands belonging to this `Subtract`. */
    IdentifierList getFromOperandsList() { identifier_list(result, this, 52161416) }

    /** Get the nth from operands of this `Subtract`. */
    Identifier getFromOperand(int n) { result = this.getFromOperandsList().getItem(n) }

    /** Get a from operands belonging to this `Subtract`. */
    Identifier getAFromOperand() { result = this.getFromOperandsList().getAnItem() }

    /** Get the first from operands in the list. */
    Identifier getFirstFromOperand() { result = this.getFromOperandsList().getFirstItem() }

    /** Get the last from operands in the list. */
    Identifier getLastFromOperand() { result = this.getFromOperandsList().getLastItem() }

    /** Get the number of elements in the list of from operands. */
    int getFromOperandsSize() { result = this.getFromOperandsList().size() }

    /** Get the list of giving operands belonging to this `Subtract`. */
    IdentifierList getGivingOperandsList() { identifier_list(result, this, 74908846) }

    /** Get the nth giving operands of this `Subtract`. */
    Identifier getGivingOperand(int n) { result = this.getGivingOperandsList().getItem(n) }

    /** Get a giving operands belonging to this `Subtract`. */
    Identifier getAGivingOperand() { result = this.getGivingOperandsList().getAnItem() }

    /** Get the first giving operands in the list. */
    Identifier getFirstGivingOperand() { result = this.getGivingOperandsList().getFirstItem() }

    /** Get the last giving operands in the list. */
    Identifier getLastGivingOperand() { result = this.getGivingOperandsList().getLastItem() }

    /** Get the number of elements in the list of giving operands. */
    int getGivingOperandsSize() { result = this.getGivingOperandsList().size() }

    /** Get the list of initial operands belonging to this `Subtract`. */
    IdentifierList getInitialOperandsList() { identifier_list(result, this, 46696978) }

    /** Get the nth initial operands of this `Subtract`. */
    Identifier getInitialOperand(int n) { result = this.getInitialOperandsList().getItem(n) }

    /** Get an initial operands belonging to this `Subtract`. */
    Identifier getAnInitialOperand() { result = this.getInitialOperandsList().getAnItem() }

    /** Get the first initial operands in the list. */
    Identifier getFirstInitialOperand() { result = this.getInitialOperandsList().getFirstItem() }

    /** Get the last initial operands in the list. */
    Identifier getLastInitialOperand() { result = this.getInitialOperandsList().getLastItem() }

    /** Get the number of elements in the list of initial operands. */
    int getInitialOperandsSize() { result = this.getInitialOperandsList().size() }

    /** Get the not on size error of this `Subtract`. */
    override NotOnSizeErrorBranch getNotOnSizeError() { branch(result, _, this, 82126985) }

    /** Get the on size error of this `Subtract`. */
    override OnSizeErrorBranch getOnSizeError() { branch(result, _, this, 23507810) }

    /** Get the scope terminator of this `Subtract`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Subtract" }

}

library class Text_ extends @text, AstNode {

    /** Get the list of handled directives belonging to this `Text`. */
    DirectiveList getHandledDirectivesList() { directive_list(result, this) }

    /** Get the nth handled directives of this `Text`. */
    Directive getHandledDirective(int n) { result = this.getHandledDirectivesList().getItem(n) }

    /** Get a handled directives belonging to this `Text`. */
    Directive getAHandledDirective() { result = this.getHandledDirectivesList().getAnItem() }

    /** Get the first handled directives in the list. */
    Directive getFirstHandledDirective() { result = this.getHandledDirectivesList().getFirstItem() }

    /** Get the last handled directives in the list. */
    Directive getLastHandledDirective() { result = this.getHandledDirectivesList().getLastItem() }

    /** Get the number of elements in the list of handled directives. */
    int getHandledDirectivesSize() { result = this.getHandledDirectivesList().size() }

    /** Get the list of preprocessing directives belonging to this `Text`. */
    PreprocessingDirectiveList getPreprocessingDirectivesList() {
        preprocessing_directive_list(result, this)
    }

    /** Get the nth preprocessing directives of this `Text`. */
    PreprocessingDirective getPreprocessingDirective(int n) {
        result = this.getPreprocessingDirectivesList().getItem(n)
    }

    /** Get a preprocessing directives belonging to this `Text`. */
    PreprocessingDirective getAPreprocessingDirective() {
        result = this.getPreprocessingDirectivesList().getAnItem()
    }

    /** Get the first preprocessing directives in the list. */
    PreprocessingDirective getFirstPreprocessingDirective() {
        result = this.getPreprocessingDirectivesList().getFirstItem()
    }

    /** Get the last preprocessing directives in the list. */
    PreprocessingDirective getLastPreprocessingDirective() {
        result = this.getPreprocessingDirectivesList().getLastItem()
    }

    /** Get the number of elements in the list of preprocessing directives. */
    int getPreprocessingDirectivesSize() { result = this.getPreprocessingDirectivesList().size() }

    override string toString() { result = "Text" }

}

library class ThenBranch_ extends @then_branch, Branch {

    override string toString() { result = "ThenBranch" }

}

library class ThreadLocalStorageSection_ extends @thread_local_storage_section, Unit {

    /** Get the list of entries belonging to this `ThreadLocalStorageSection`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `ThreadLocalStorageSection`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `ThreadLocalStorageSection`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "ThreadLocalStorageSection" }

}

library class Times_ extends @times, LoopForm, Phrase {

    override AstNode getParent() { result = Phrase.super.getParent() }

    override string toString() { result = "Times" }

}

library class TrueExpr_ extends @true_expr, ConditionExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    override string toString() { result = "TrueExpr" }

}

library class Unit_ extends @unit, AstNode {

    override AstNode getParent() { unit(this, _, result, _) }

    /** Get the header of this `Unit`. */
    Header getHeader() { header(result, _, this) }

    override string toString() { result = "Unit" }

}

library class UnitList_ extends @unit_list, AstNode {

    override AstNode getParent() { unit_list(this, result) }

    /** Get an item of this `UnitList` */
    Unit getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `UnitList` */
    Unit getItem(int n) { unit(result, _, this, n) }

    Unit getFirstItem() { result = this.getItem(0) }

    Unit getLastItem() { result = this.getItem(size() - 1) }

    Unit getNextItem(Unit item) { exists(int i | item = getItem(i) | result = getItem(i+1)) }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "UnitList" }

}

library class UnknownDirective_ extends @unknown_directive, Directive {

    override string toString() { result = "UnknownDirective" }

}

library class Unstring_ extends @unstring, Stmt {

    /** Get the not on overflow of this `Unstring`. */
    NotOnOverflowBranch getNotOnOverflow() { branch(result, _, this, 1081926) }

    /** Get the on overflow of this `Unstring`. */
    OnOverflowBranch getOnOverflow() { branch(result, _, this, 6269505) }

    /** Get the scope terminator of this `Unstring`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Unstring" }

}

library class Until_ extends @until, LoopForm, Phrase {

    override AstNode getParent() { result = Phrase.super.getParent() }

    /** Get the condition of this `Until`. */
    ConditionExpr getCondition() { expr(result, _, this, 86580183) }

    override string toString() { result = "Until" }

}

library class UsageClause_ extends @usage_clause, Clause {

    /** Get the operand of this `UsageClause`. */
    string getOperand() { usage_clause_operand(this, 92381128, result) }

    override string toString() { result = "UsageClause" }

}

library class Use_ extends @use, Stmt {

    override string toString() { result = "Use" }

}

library class UserDefinedClassType_ extends @user_defined_class_type, ClassType {

    override string toString() { result = "UserDefinedClassType" }

}

library class ValueClause_ extends @value_clause, Clause {

    /** Get the literal of this `ValueClause`. */
    Literal getLiteral() { literal(result, _, this, 81581247) }

    /** Get the through of this `ValueClause`. */
    Literal getThrough() { literal(result, _, this, 18358696) }

    override string toString() { result = "ValueClause" }

}

library class Varying_ extends @varying, LoopForm, Phrase {

    override AstNode getParent() { result = Phrase.super.getParent() }

    /** Get the list of after lists belonging to this `Varying`. */
    AfterList getAfterListList() { after_list(result, this) }

    /** Get the nth after list of this `Varying`. */
    After getAfter(int n) { result = this.getAfterListList().getItem(n) }

    /** Get an after list belonging to this `Varying`. */
    After getAnAfter() { result = this.getAfterListList().getAnItem() }

    /** Get the first after list in the list. */
    After getFirstAfter() { result = this.getAfterListList().getFirstItem() }

    /** Get the last after list in the list. */
    After getLastAfter() { result = this.getAfterListList().getLastItem() }

    /** Get the number of elements in the list of after lists. */
    int getAfterListSize() { result = this.getAfterListList().size() }

    /** Get the operand of this `Varying`. */
    Identifier getOperand() { identifier(result, _, this, 15567423) }

    /** Get the until of this `Varying`. */
    Until getUntil() { phrase(result, _, this, 41105173) }

    override string toString() { result = "Varying" }

}

library class WhenBranch_ extends @when_branch, Branch {

    /** Get the list of objects belonging to this `WhenBranch`. */
    WhenObjectList getObjectsList() { when_object_list(result, this) }

    /** Get the nth objects of this `WhenBranch`. */
    WhenObject getObject(int n) { result = this.getObjectsList().getItem(n) }

    /** Get an objects belonging to this `WhenBranch`. */
    WhenObject getAnObject() { result = this.getObjectsList().getAnItem() }

    /** Get the first objects in the list. */
    WhenObject getFirstObject() { result = this.getObjectsList().getFirstItem() }

    /** Get the last objects in the list. */
    WhenObject getLastObject() { result = this.getObjectsList().getLastItem() }

    /** Get the number of elements in the list of objects. */
    int getObjectsSize() { result = this.getObjectsList().size() }

    override string toString() { result = "WhenBranch" }

}

library class WhenObject_ extends @when_object, AstNode {

    override string toString() { result = "WhenObject" }

}

library class WhenObjectList_ extends @when_object_list, AstNode {

    override AstNode getParent() { when_object_list(this, result) }

    /** Get an item of this `WhenObjectList` */
    WhenObject getAnItem() { result = this.getItem(_) }

    /** Get the nth item of this `WhenObjectList` */
    WhenObject getItem(int n) {
           expr(result, _, this, n)
        or identifier(result, _, this, n)
        or literal(result, _, this, n)
    }

    WhenObject getFirstItem() { result = this.getItem(0) }

    WhenObject getLastItem() { result = this.getItem(size() - 1) }

    WhenObject getNextItem(WhenObject item) {
        exists(int i | item = getItem(i) | result = getItem(i+1))
    }

    int size() { result = count(this.getAnItem()) }

    override string toString() { result = "WhenObjectList" }

}

library class WhenOtherBranch_ extends @when_other_branch, Branch {

    override string toString() { result = "WhenOtherBranch" }

}

library class WithDataBranch_ extends @with_data_branch, Branch {

    override string toString() { result = "WithDataBranch" }

}

library class WorkingStorageSection_ extends @working_storage_section, Unit {

    /** Get the list of entries belonging to this `WorkingStorageSection`. */
    DescriptionEntryList getEntriesList() { description_entry_list(result, this) }

    /** Get the nth entries of this `WorkingStorageSection`. */
    DescriptionEntry getEntry(int n) { result = this.getEntriesList().getItem(n) }

    /** Get an entries belonging to this `WorkingStorageSection`. */
    DescriptionEntry getAnEntry() { result = this.getEntriesList().getAnItem() }

    /** Get the first entries in the list. */
    DescriptionEntry getFirstEntry() { result = this.getEntriesList().getFirstItem() }

    /** Get the last entries in the list. */
    DescriptionEntry getLastEntry() { result = this.getEntriesList().getLastItem() }

    /** Get the number of elements in the list of entries. */
    int getEntriesSize() { result = this.getEntriesList().size() }

    override string toString() { result = "WorkingStorageSection" }

}

library class Write_ extends @write, FileIOStmt, Stmt {

    override AstNode getParent() { result = Stmt.super.getParent() }

    /** Get the at end of this `Write`. */
    AtEndBranch getAtEnd() { branch(result, _, this, 72396675) }

    /** Get the at end of page of this `Write`. */
    AtEndOfPageBranch getAtEndOfPage() { branch(result, _, this, 88262394) }

    /** Get the file of this `Write`. */
    FileReference getFile() { reference(result, _, this, 94537106) }

    /** Get the invalid key of this `Write`. */
    InvalidKeyBranch getInvalidKey() { branch(result, _, this, 38268067) }

    /** Get the not at end of this `Write`. */
    NotAtEndBranch getNotAtEnd() { branch(result, _, this, 60202861) }

    /** Get the not at end of page of this `Write`. */
    NotAtEndOfPageBranch getNotAtEndOfPage() { branch(result, _, this, 6939967) }

    /** Get the not invalid key of this `Write`. */
    NotInvalidKeyBranch getNotInvalidKey() { branch(result, _, this, 50171949) }

    /** Get the record of this `Write`. */
    Identifier getRecord() { identifier(result, _, this, 18063713) }

    /** Get the scope terminator of this `Write`. */
    ScopeTerminator getScopeTerminator() { phrase(result, _, this, 53379696) }

    override string toString() { result = "Write" }

}

library class ZeroExpr_ extends @zero_expr, ArithmeticExpr, Expr {

    override AstNode getParent() { result = Expr.super.getParent() }

    override string toString() { result = "ZeroExpr" }

}

