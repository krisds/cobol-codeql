package com.semmle.cobol.population;

import java.util.Map;

import koopa.core.data.markers.Start;

/**
 * This class is auto-generated by 'tools/java_default_types.py', from the same data
 * definition as the Cobol database schema and QL wrapper classes.
 */
public class CobolTypesFromSpec {
    public static void populateDefaultTypes(Map<Start, String> defaultTypes) {
        defaultTypes.put(Start.on("cobol", "abbreviatedNegation"), "abbr_log_not_expr");
        defaultTypes.put(Start.on("cobol", "acceptStatement"), "accept");
        defaultTypes.put(Start.on("cobol", "addStatement"), "add");
        defaultTypes.put(Start.on("cobol", "addressOf"), "address_of_register");
        defaultTypes.put(Start.on("cobol", "after"), "after");
        defaultTypes.put(Start.on("cobol", "alterStatement"), "alter");
        defaultTypes.put(Start.on("cobol", "alterationClause"), "alteration_clause");
        defaultTypes.put(Start.on("cobol", "atEnd"), "at_end_branch");
        defaultTypes.put(Start.on("cobol", "atEndOfPage"), "at_end_of_page_branch");
        defaultTypes.put(Start.on("cobol", "blockContainsClause"), "block_contains_clause");
        defaultTypes.put(Start.on("cobol", "callStatement"), "call");
        defaultTypes.put(Start.on("cobol", "execCICSStatement"), "cics");
        defaultTypes.put(Start.on("cobol", "cics_option_ref"), "cics_option_reference");
        defaultTypes.put(Start.on("cobol", "closeStatement"), "close");
        defaultTypes.put(Start.on("cobol", "communicationSection"), "communication_section");
        defaultTypes.put(Start.on("cobol", "relationCondition"), "comparison_expr");
        defaultTypes.put(Start.on("cobol", "compilationGroup"), "compilation_group");
        defaultTypes.put(Start.on("cobol", "computeStatement"), "compute");
        defaultTypes.put(Start.on("cobol", "conditionNameCondition"), "condition_name_condition_expr");
        defaultTypes.put(Start.on("cobol", "configurationSection"), "configuration_section");
        defaultTypes.put(Start.on("cobol", "constantEntry"), "constant_entry");
        defaultTypes.put(Start.on("cobol", "continueStatement"), "continue_stmt");
        defaultTypes.put(Start.on("cobol", "copyStatement"), "copy");
        defaultTypes.put(Start.on("cobol", "copybook"), "copybook");
        defaultTypes.put(Start.on("cobol", "corresponding"), "corresponding_clause");
        defaultTypes.put(Start.on("cobol", "dataAddressIdentifier"), "data_address_identifier");
        defaultTypes.put(Start.on("cobol", "dataDescriptionEntry"), "data_description_entry");
        defaultTypes.put(Start.on("cobol", "dataDivision"), "data_division");
        defaultTypes.put(Start.on("cobol", "data_reference"), "data_reference");
        defaultTypes.put(Start.on("cobol", "declaratives"), "declaratives");
        defaultTypes.put(Start.on("cobol", "deleteStatement"), "delete");
        defaultTypes.put(Start.on("cobol", "dependingOn"), "depending_on_clause");
        defaultTypes.put(Start.on("cobol", "displayStatement"), "display");
        defaultTypes.put(Start.on("cobol", "divideStatement"), "divide");
        defaultTypes.put(Start.on("cobol", "elseBranch"), "else_branch");
        defaultTypes.put(Start.on("cobol", "entryStatement"), "entry");
        defaultTypes.put(Start.on("cobol", "environmentDivision"), "environment_division");
        defaultTypes.put(Start.on("cobol", "evaluateStatement"), "evaluate");
        defaultTypes.put(Start.on("cobol", "exitStatement"), "exit");
        defaultTypes.put(Start.on("cflow", "exit_node"), "exit_node");
        defaultTypes.put(Start.on("cobol", "false"), "false_expr");
        defaultTypes.put(Start.on("cobol", "figurativeConstant"), "figurative_constant_expr");
        defaultTypes.put(Start.on("cobol", "selectStatement"), "file_control_entry");
        defaultTypes.put(Start.on("cobol", "fileControlParagraph"), "file_control_paragraph");
        defaultTypes.put(Start.on("cobol", "fdFileDescriptionEntry"), "file_description_entry");
        defaultTypes.put(Start.on("cobol", "fileName"), "file_reference");
        defaultTypes.put(Start.on("cobol", "fileSection"), "file_section");
        defaultTypes.put(Start.on("cobol", "functionDefinition"), "function_definition");
        defaultTypes.put(Start.on("cobol", "function"), "function_identifier");
        defaultTypes.put(Start.on("cobol", "goToStatement"), "go_to");
        defaultTypes.put(Start.on("cobol", "gobackStatement"), "goback");
        defaultTypes.put(Start.on("cobol", "identificationDivision"), "identification_division");
        defaultTypes.put(Start.on("cobol", "identifierAtom"), "identifier_expr");
        defaultTypes.put(Start.on("cobol", "ifStatement"), "if_then_else");
        defaultTypes.put(Start.on("cobol", "indexedBy"), "indexed_by");
        defaultTypes.put(Start.on("cobol", "invalidKey"), "invalid_key_branch");
        defaultTypes.put(Start.on("cobol", "ioSection"), "io_section");
        defaultTypes.put(Start.on("cobol", "linkageSection"), "linkage_section");
        defaultTypes.put(Start.on("cobol", "localStorageSection"), "local_storage_section");
        defaultTypes.put(Start.on("cobol", "negation"), "log_not_expr");
        defaultTypes.put(Start.on("cobol", "mergeStatement"), "merge");
        defaultTypes.put(Start.on("cobol", "moveStatement"), "move");
        defaultTypes.put(Start.on("cobol", "multiplyStatement"), "multiply");
        defaultTypes.put(Start.on("cobol", "nextSentenceStatement"), "next_sentence");
        defaultTypes.put(Start.on("cobol", "noData"), "no_data_branch");
        defaultTypes.put(Start.on("cobol", "notAtEnd"), "not_at_end_branch");
        defaultTypes.put(Start.on("cobol", "notAtEndOfPage"), "not_at_end_of_page_branch");
        defaultTypes.put(Start.on("cobol", "notInvalidKey"), "not_invalid_key_branch");
        defaultTypes.put(Start.on("cobol", "notOnEscape"), "not_on_escape_branch");
        defaultTypes.put(Start.on("cobol", "notOnException"), "not_on_exception_branch");
        defaultTypes.put(Start.on("cobol", "notOnOverflow"), "not_on_overflow_branch");
        defaultTypes.put(Start.on("cobol", "notOnSizeError"), "not_on_size_error_branch");
        defaultTypes.put(Start.on("cobol", "numericAtom"), "numeric_expr");
        defaultTypes.put(Start.on("cobol", "objectSection"), "object_section");
        defaultTypes.put(Start.on("cobol", "objectStorageSection"), "object_storage_section");
        defaultTypes.put(Start.on("cobol", "occursClause"), "occurs_clause");
        defaultTypes.put(Start.on("cobol", "omitted"), "omitted");
        defaultTypes.put(Start.on("cobol", "onEscape"), "on_escape_branch");
        defaultTypes.put(Start.on("cobol", "onException"), "on_exception_branch");
        defaultTypes.put(Start.on("cobol", "onOverflow"), "on_overflow_branch");
        defaultTypes.put(Start.on("cobol", "onSizeError"), "on_size_error_branch");
        defaultTypes.put(Start.on("cobol", "openStatement"), "open");
        defaultTypes.put(Start.on("cobol", "optional"), "optional");
        defaultTypes.put(Start.on("cobol", "header"), "other_header");
        defaultTypes.put(Start.on("cobol", "other_stmt"), "other_stmt");
        defaultTypes.put(Start.on("cobol", "paragraph"), "paragraph");
        defaultTypes.put(Start.on("cobol", "identifier_format6"), "predefined_object");
        defaultTypes.put(Start.on("cobol", "procedureDivision"), "procedure_division");
        defaultTypes.put(Start.on("cobol", "procedureName"), "procedure_reference");
        defaultTypes.put(Start.on("cobol", "programDefinition"), "program_definition");
        defaultTypes.put(Start.on("cobol", "qualifiedDataName"), "qualified_data_name_with_subscripts");
        defaultTypes.put(Start.on("cobol", "qualifiedLinageCounter"), "qualified_linage_counter");
        defaultTypes.put(Start.on("cobol", "readStatement"), "read");
        defaultTypes.put(Start.on("cobol", "referenceModifier"), "reference_modifier");
        defaultTypes.put(Start.on("cobol", "relativeSubscript"), "relative_subscript");
        defaultTypes.put(Start.on("cobol", "replaceStatement"), "replace");
        defaultTypes.put(Start.on("cobol", "reportDescriptionEntry"), "report_description_entry");
        defaultTypes.put(Start.on("cobol", "reportGroupDescriptionEntry"), "report_group_description_entry");
        defaultTypes.put(Start.on("cobol", "reportSection"), "report_section");
        defaultTypes.put(Start.on("cobol", "returnStatement"), "return_stmt");
        defaultTypes.put(Start.on("cobol", "rewriteStatement"), "rewrite");
        defaultTypes.put(Start.on("cobol", "screenDescriptionEntry"), "screen_description_entry");
        defaultTypes.put(Start.on("cobol", "screenSection"), "screen_section");
        defaultTypes.put(Start.on("cobol", "searchStatement"), "search");
        defaultTypes.put(Start.on("cobol", "section"), "section");
        defaultTypes.put(Start.on("cobol", "sentence"), "sentence");
        defaultTypes.put(Start.on("cobol", "signClause"), "sign_clause");
        defaultTypes.put(Start.on("cobol", "sortStatement"), "sort");
        defaultTypes.put(Start.on("cobol", "sdFileDescriptionEntry"), "sort_merge_file_description_entry");
        defaultTypes.put(Start.on("cobol", "source_unit"), "source_unit");
        defaultTypes.put(Start.on("cobol", "specialNamesParagraph"), "special_names_paragraph");
        defaultTypes.put(Start.on("cobol", "execSQLStatement"), "sql");
        defaultTypes.put(Start.on("sql", "alterStatement"), "sql_alter_stmt");
        defaultTypes.put(Start.on("sql", "closeStatement"), "sql_close_stmt");
        defaultTypes.put(Start.on("sql", "comparison"), "sql_comparison");
        defaultTypes.put(Start.on("sql", "countAll"), "sql_count_all");
        defaultTypes.put(Start.on("sql", "createStatement"), "sql_create_stmt");
        defaultTypes.put(Start.on("sql", "cursorName"), "sql_cursor_name");
        defaultTypes.put(Start.on("sql", "declareCursorStatement"), "sql_declare_cursor_stmt");
        defaultTypes.put(Start.on("sql", "deleteStatement"), "sql_delete_stmt");
        defaultTypes.put(Start.on("sql", "dropStatement"), "sql_drop_stmt");
        defaultTypes.put(Start.on("sql", "equalsOp"), "sql_eq_op");
        defaultTypes.put(Start.on("sql", "from"), "sql_from_clause");
        defaultTypes.put(Start.on("sql", "greaterThanOrEqualsOp"), "sql_g_e_op");
        defaultTypes.put(Start.on("sql", "greaterThanOp"), "sql_g_t_op");
        defaultTypes.put(Start.on("sql", "hostParameterName"), "sql_host_parameter_name");
        defaultTypes.put(Start.on("sql", "hostParameterSpecification"), "sql_host_parameter_specification");
        defaultTypes.put(Start.on("sql", "into"), "sql_into_clause");
        defaultTypes.put(Start.on("sql", "lessThanOrEqualsOp"), "sql_l_e_op");
        defaultTypes.put(Start.on("sql", "lessThanOp"), "sql_l_t_op");
        defaultTypes.put(Start.on("sql", "likePredicate"), "sql_like_predicate");
        defaultTypes.put(Start.on("sql", "lockTableStatement"), "sql_lock_table_stmt");
        defaultTypes.put(Start.on("sql", "notEqualsOp"), "sql_n_eq_op");
        defaultTypes.put(Start.on("sql", "negation"), "sql_not_expr");
        defaultTypes.put(Start.on("sql", "openStatement"), "sql_open_stmt");
        defaultTypes.put(Start.on("sql", "sql_other_stmt"), "sql_other_stmt");
        defaultTypes.put(Start.on("sql", "renameStatement"), "sql_rename_stmt");
        defaultTypes.put(Start.on("sql", "selectStatement"), "sql_select_stmt");
        defaultTypes.put(Start.on("sql", "tableName"), "sql_table_name");
        defaultTypes.put(Start.on("sql", "unknown_expr"), "sql_unknown_expr");
        defaultTypes.put(Start.on("sql", "unknown_ref"), "sql_unknown_reference");
        defaultTypes.put(Start.on("sql", "unknown_spec"), "sql_unknown_spec");
        defaultTypes.put(Start.on("sql", "updateStatement"), "sql_update_stmt");
        defaultTypes.put(Start.on("sql", "where"), "sql_where_clause");
        defaultTypes.put(Start.on("cobol", "startStatement"), "start");
        defaultTypes.put(Start.on("cobol", "stopStatement"), "stop");
        defaultTypes.put(Start.on("cobol", "stringStatement"), "string_stmt");
        defaultTypes.put(Start.on("cobol", "subtractStatement"), "subtract");
        defaultTypes.put(Start.on("cobol", "thenBranch"), "then_branch");
        defaultTypes.put(Start.on("cobol", "threadLocalStorageSection"), "thread_local_storage_section");
        defaultTypes.put(Start.on("cobol", "times"), "times");
        defaultTypes.put(Start.on("cobol", "true"), "true_expr");
        defaultTypes.put(Start.on("cobol", "unstringStatement"), "unstring");
        defaultTypes.put(Start.on("cobol", "until"), "until");
        defaultTypes.put(Start.on("cobol", "usageClause"), "usage_clause");
        defaultTypes.put(Start.on("cobol", "useStatement"), "use");
        defaultTypes.put(Start.on("cobol", "valueClause"), "value_clause");
        defaultTypes.put(Start.on("cobol", "varying"), "varying");
        defaultTypes.put(Start.on("cobol", "when"), "when_branch");
        defaultTypes.put(Start.on("cobol", "whenOther"), "when_other_branch");
        defaultTypes.put(Start.on("cobol", "withData"), "with_data_branch");
        defaultTypes.put(Start.on("cobol", "workingStorageSection"), "working_storage_section");
        defaultTypes.put(Start.on("cobol", "writeStatement"), "write");
        defaultTypes.put(Start.on("cobol", "zeroAtom"), "zero_expr");
    }
}
