package com.semmle.cobol.population;

import com.semmle.cobol.generator.tables.DatabaseScheme;
import com.semmle.cobol.generator.tables.Relation;
import com.semmle.cobol.generator.types.DBType;
import com.semmle.cobol.generator.types.CaseType;
import com.semmle.cobol.generator.types.ListType;
import com.semmle.cobol.generator.types.Partition;
import com.semmle.cobol.generator.types.PrimitiveType;
import com.semmle.cobol.generator.types.QLType;
import com.semmle.cobol.generator.types.BaseCaseType;
import com.semmle.cobol.generator.types.TypeSystem;
import com.semmle.cobol.generator.types.UnionType;

/**
 * This class is auto-generated by 'tools/java_gen.py', from the same data
 * definition as the Cobol database schema and QL wrapper classes.
 *
 * The single method is used to populate the extractor's internal
 * representation of the database schema ({@link DatabaseScheme}) and the
 * higher-level data model using 'types' with 'attributes' ({@link TypeSystem}).
 */
public class CobolPopulator {
    public static void populate(DatabaseScheme dbScheme, TypeSystem typeSystem) {
        // Original types ...

        CaseType abbr_log_and_expr = new CaseType("abbr_log_and_expr", "expr", 94815278);
        typeSystem.addType(abbr_log_and_expr);
        abbr_log_and_expr.addAttribute("left_operand", "abbr_log_expr", 458467);
        abbr_log_and_expr.addAttribute("right_operand", "abbr_log_expr", 3554934);

        UnionType abbr_log_expr = new UnionType("abbr_log_expr", "abbr_log_and_expr", "abbr_log_not_expr", "abbr_log_or_expr", "relation_object_expr");
        typeSystem.addType(abbr_log_expr);

        CaseType abbr_log_not_expr = new CaseType("abbr_log_not_expr", "expr", 71417626);
        typeSystem.addType(abbr_log_not_expr);
        abbr_log_not_expr.addAttribute("expression", "abbr_log_expr", 73166051);

        CaseType abbr_log_or_expr = new CaseType("abbr_log_or_expr", "expr", 89631765);
        typeSystem.addType(abbr_log_or_expr);
        abbr_log_or_expr.addAttribute("left_operand", "abbr_log_expr", 458467);
        abbr_log_or_expr.addAttribute("right_operand", "abbr_log_expr", 3554934);

        CaseType abbr_not_sign_condition_expr = new CaseType("abbr_not_sign_condition_expr", "expr", 56501833);
        typeSystem.addType(abbr_not_sign_condition_expr);
        abbr_not_sign_condition_expr.addAttribute("sign_type", "string", 74014681);

        CaseType abbr_sign_condition_expr = new CaseType("abbr_sign_condition_expr", "expr", 80414538);
        typeSystem.addType(abbr_sign_condition_expr);
        abbr_sign_condition_expr.addAttribute("sign_type", "string", 74014681);

        CaseType accept = new CaseType("accept", "stmt", 63950982);
        typeSystem.addType(accept);
        accept.addAttribute("on_exception", "on_exception_branch", 76275576);
        accept.addAttribute("not_on_exception", "not_on_exception_branch", 62817523);
        accept.addAttribute("on_escape", "on_escape_branch", 57719082);
        accept.addAttribute("not_on_escape", "not_on_escape_branch", 81748194);
        accept.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType add = new CaseType("add", "stmt", 40345906);
        typeSystem.addType(add);
        add.addAttribute("corresponding", "corresponding_clause", 38615929);
        add.addAttribute("initial_operands", "identifier_list", 46696978);
        add.addAttribute("to_operands", "identifier_list", 52389977);
        add.addAttribute("giving_operands", "identifier_list", 74908846);
        add.addAttribute("on_size_error", "on_size_error_branch", 23507810);
        add.addAttribute("not_on_size_error", "not_on_size_error_branch", 82126985);
        add.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType add_expr = new CaseType("add_expr", "expr", 26709863);
        typeSystem.addType(add_expr);
        add_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        add_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        CaseType address_of_register = new CaseType("address_of_register", "special_register", 24135644);
        typeSystem.addType(address_of_register);
        address_of_register.addAttribute("data_item", "identifier", 22386806);

        CaseType after = new CaseType("after", "phrase", 10743562);
        typeSystem.addType(after);
        after.addAttribute("operand", "identifier", 15567423);
        after.addAttribute("until", "until", 41105173);

        ListType after_list = new ListType("after_list", "after");
        typeSystem.addType(after_list);

        CaseType alphanumeric_literal = new CaseType("alphanumeric_literal", "literal", 44634461);
        typeSystem.addType(alphanumeric_literal);

        CaseType alter = new CaseType("alter", "stmt", 32717598);
        typeSystem.addType(alter);
        alter.addAttribute("alterations", "alteration_clause_list");

        CaseType alteration_clause = new CaseType("alteration_clause", "clause", 8924790);
        typeSystem.addType(alteration_clause);
        alteration_clause.addAttribute("from", "procedure_reference", 72384692);
        alteration_clause.addAttribute("to", "procedure_reference", 10107670);

        ListType alteration_clause_list = new ListType("alteration_clause_list", "alteration_clause");
        typeSystem.addType(alteration_clause_list);

        UnionType argument = new UnionType("argument", "arithmetic_expr", "identifier", "literal");
        typeSystem.addType(argument);

        ListType argument_list = new ListType("argument_list", "argument");
        typeSystem.addType(argument_list);

        UnionType arithmetic_expr = new UnionType("arithmetic_expr", "add_expr", "bit_and_expr", "bit_not_expr", "bit_or_expr", "bit_x_or_expr", "div_expr", "identifier_expr", "mul_expr", "neg_expr", "numeric_expr", "plus_expr", "pow_expr", "sub_expr", "zero_expr");
        typeSystem.addType(arithmetic_expr);

        UnionType ast_node = new UnionType("ast_node", "abbr_log_expr", "after_list", "alteration_clause_list", "argument", "argument_list", "arithmetic_expr", "binary_expr", "branch", "branch_list", "call_arg", "call_arg_list", "call_arg_value", "call_arg_with_value", "call_giving", "class_type", "clause", "comment", "computational_stmt", "condition_expr", "description_entry", "description_entry_list", "directive", "directive_list", "division", "evaluate_subject", "evaluate_subject_list", "expr", "file_control_entry_list", "file_description", "file_i_o_stmt", "file_reference_list", "header", "identifier", "identifier_list", "identifier_or_literal", "indices_list", "literal", "loop_form", "meta", "named_unit", "paragraph_list", "perform", "phrase", "preprocessing_directive", "preprocessing_directive_list", "procedure_division_parameter", "procedure_division_parameter_list", "procedure_reference_list", "program_name", "qualified_report_counter", "qualifiers_list", "reference", "reference_modifier_t", "relation_object", "relation_operand", "relation_operator", "section_list", "sentence_list", "special_register", "sql_aggregate_function", "sql_clause", "sql_comparison_op", "sql_condition_expr", "sql_d_d_l", "sql_expr", "sql_into_target", "sql_into_target_list", "sql_reference", "sql_selection", "sql_selection_list", "sql_spec", "sql_stmt", "sql_table_reference", "sql_table_reference_list", "stmt", "stmt_list", "subscript", "subscript_list", "text", "unit", "unit_list", "when_object", "when_object_list");
        typeSystem.addType(ast_node);

        CaseType at_end_branch = new CaseType("at_end_branch", "branch", 4548312);
        typeSystem.addType(at_end_branch);

        CaseType at_end_of_page_branch = new CaseType("at_end_of_page_branch", "branch", 21415270);
        typeSystem.addType(at_end_of_page_branch);

        CaseType basic_comment = new CaseType("basic_comment", "comment", 7210600);
        typeSystem.addType(basic_comment);

        UnionType binary_expr = new UnionType("binary_expr", "abbr_log_and_expr", "abbr_log_or_expr", "add_expr", "bit_and_expr", "bit_or_expr", "bit_x_or_expr", "div_expr", "log_and_expr", "log_or_expr", "mul_expr", "pow_expr", "sub_expr");
        typeSystem.addType(binary_expr);

        CaseType bit_and_expr = new CaseType("bit_and_expr", "expr", 26985215);
        typeSystem.addType(bit_and_expr);
        bit_and_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        bit_and_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        CaseType bit_not_expr = new CaseType("bit_not_expr", "expr", 70408535);
        typeSystem.addType(bit_not_expr);
        bit_not_expr.addAttribute("expression", "arithmetic_expr", 4913101);

        CaseType bit_or_expr = new CaseType("bit_or_expr", "expr", 2811409);
        typeSystem.addType(bit_or_expr);
        bit_or_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        bit_or_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        CaseType bit_x_or_expr = new CaseType("bit_x_or_expr", "expr", 87233649);
        typeSystem.addType(bit_x_or_expr);
        bit_x_or_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        bit_x_or_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        CaseType block_contains_clause = new CaseType("block_contains_clause", "clause", 90719305);
        typeSystem.addType(block_contains_clause);
        block_contains_clause.addAttribute("minimum_size", "int", 35322440);
        block_contains_clause.addAttribute("maximum_size", "int", 20557532);

        PrimitiveType bool_primitive = new PrimitiveType("bool", DBType.BOOLEAN, QLType.BOOLEAN);
        typeSystem.addType(bool_primitive);

        BaseCaseType branch = new BaseCaseType("branch");
        typeSystem.addType(branch);
        branch.addAttribute("statements", "stmt_list");

        ListType branch_list = new ListType("branch_list", "branch");
        typeSystem.addType(branch_list);

        CaseType call = new CaseType("call", "stmt", 64050861);
        typeSystem.addType(call);
        call.addAttribute("program_name", "program_name", 84788938);
        call.addAttribute("using", "call_arg_list");
        call.addAttribute("giving", "call_giving", 63322551);
        call.addAttribute("on_overflow", "on_overflow_branch", 6269505);
        call.addAttribute("on_exception", "on_exception_branch", 76275576);
        call.addAttribute("not_on_exception", "not_on_exception_branch", 62817523);
        call.addAttribute("scope_terminator", "scope_terminator", 53379696);

        BaseCaseType call_arg = new BaseCaseType("call_arg");
        typeSystem.addType(call_arg);

        CaseType call_arg_by_content = new CaseType("call_arg_by_content", "call_arg", 67010191);
        typeSystem.addType(call_arg_by_content);
        call_arg_by_content.addAttribute("value", "call_arg_value", 73484022);

        CaseType call_arg_by_reference = new CaseType("call_arg_by_reference", "call_arg", 58049367);
        typeSystem.addType(call_arg_by_reference);
        call_arg_by_reference.addAttribute("value", "call_arg_value", 73484022);

        CaseType call_arg_by_value = new CaseType("call_arg_by_value", "call_arg", 72533998);
        typeSystem.addType(call_arg_by_value);
        call_arg_by_value.addAttribute("value", "call_arg_value", 73484022);

        CaseType call_arg_copied = new CaseType("call_arg_copied", "call_arg", 66829047);
        typeSystem.addType(call_arg_copied);
        call_arg_copied.addAttribute("copy", "copy", 28386585);

        ListType call_arg_list = new ListType("call_arg_list", "call_arg");
        typeSystem.addType(call_arg_list);

        UnionType call_arg_value = new UnionType("call_arg_value", "address_of_register", "arithmetic_expr", "identifier", "literal", "omitted");
        typeSystem.addType(call_arg_value);

        UnionType call_arg_with_value = new UnionType("call_arg_with_value", "call_arg_by_content", "call_arg_by_reference", "call_arg_by_value");
        typeSystem.addType(call_arg_with_value);

        UnionType call_giving = new UnionType("call_giving", "address_of_register", "identifier");
        typeSystem.addType(call_giving);

        CaseType cics = new CaseType("cics", "stmt", 55889814);
        typeSystem.addType(cics);
        cics.addAttribute("command", "string", 6011894);
        cics.addAttribute("map", "cics_option_reference", 74605949);
        cics.addAttribute("queue", "cics_option_reference", 38711984);
        cics.addAttribute("file", "cics_option_reference", 11378846);
        cics.addAttribute("resp", "cics_option_reference", 20351100);

        CaseType cics_option_reference = new CaseType("cics_option_reference", "reference", 84815480);
        typeSystem.addType(cics_option_reference);
        cics_option_reference.addAttribute("value", "string", 62802739);

        CaseType class_condition_expr = new CaseType("class_condition_expr", "expr", 25915293);
        typeSystem.addType(class_condition_expr);
        class_condition_expr.addAttribute("identifier", "identifier", 68656865);
        class_condition_expr.addAttribute("class_type", "class_type");

        BaseCaseType class_type = new BaseCaseType("class_type");
        typeSystem.addType(class_type);
        class_type.addAttribute("name", "string", 17630164);

        BaseCaseType clause = new BaseCaseType("clause");
        typeSystem.addType(clause);

        CaseType close = new CaseType("close", "stmt", 33524263);
        typeSystem.addType(close);
        close.addAttribute("files", "file_reference_list", 28907142);

        BaseCaseType comment = new BaseCaseType("comment");
        typeSystem.addType(comment);
        comment.addAttribute("text", "string", 28393803);

        CaseType communication_section = new CaseType("communication_section", "unit", 53332087);
        typeSystem.addType(communication_section);

        CaseType comparison_expr = new CaseType("comparison_expr", "expr", 56786085);
        typeSystem.addType(comparison_expr);
        comparison_expr.addAttribute("subject", "relation_operand", 64190441);
        comparison_expr.addAttribute("object", "abbr_log_expr", 79408916);

        CaseType compilation_group = new CaseType("compilation_group", "text", 86031017);
        typeSystem.addType(compilation_group);
        compilation_group.addAttribute("source_units", "unit_list");

        UnionType computational_stmt = new UnionType("computational_stmt", "add", "compute", "divide", "multiply", "subtract");
        typeSystem.addType(computational_stmt);

        CaseType compute = new CaseType("compute", "stmt", 99580317);
        typeSystem.addType(compute);
        compute.addAttribute("result_operands", "identifier_list", 31224210);
        compute.addAttribute("expr", "arithmetic_expr", 59595097);
        compute.addAttribute("on_size_error", "on_size_error_branch", 23507810);
        compute.addAttribute("not_on_size_error", "not_on_size_error_branch", 82126985);
        compute.addAttribute("scope_terminator", "scope_terminator", 53379696);

        UnionType condition_expr = new UnionType("condition_expr", "abbr_not_sign_condition_expr", "abbr_sign_condition_expr", "class_condition_expr", "comparison_expr", "condition_name_condition_expr", "false_expr", "log_and_expr", "log_not_expr", "log_or_expr", "not_class_condition_expr", "not_omitted_condition_expr", "not_sign_condition_expr", "omitted_condition_expr", "sign_condition_expr", "true_expr");
        typeSystem.addType(condition_expr);

        CaseType condition_name_condition_expr = new CaseType("condition_name_condition_expr", "expr", 20235324);
        typeSystem.addType(condition_name_condition_expr);
        condition_name_condition_expr.addAttribute("name", "identifier", 61068390);

        CaseType configuration_section = new CaseType("configuration_section", "unit", 63383976);
        typeSystem.addType(configuration_section);
        configuration_section.addAttribute("special_names", "special_names_paragraph", 3038823);

        CaseType constant_entry = new CaseType("constant_entry", "description_entry", 32787735);
        typeSystem.addType(constant_entry);
        constant_entry.addAttribute("name", "string", 17630164);
        constant_entry.addAttribute("level_number", "int", 72382198);

        CaseType continue_stmt = new CaseType("continue_stmt", "stmt", 71885842);
        typeSystem.addType(continue_stmt);

        CaseType copy = new CaseType("copy", "stmt", 99062136);
        typeSystem.addType(copy);
        copy.addAttribute("text_name", "string", 56143928);
        copy.addAttribute("library_name", "string", 39156516);

        CaseType copy_entry = new CaseType("copy_entry", "description_entry", 75998696);
        typeSystem.addType(copy_entry);
        copy_entry.addAttribute("copy", "copy", 28386585);

        CaseType copybook = new CaseType("copybook", "text", 78160378);
        typeSystem.addType(copybook);
        copybook.addAttribute("units", "unit_list");
        copybook.addAttribute("statements", "stmt_list");
        copybook.addAttribute("sentences", "sentence_list");
        copybook.addAttribute("paragraphs", "paragraph_list");
        copybook.addAttribute("sections", "section_list");
        copybook.addAttribute("entries", "description_entry_list");

        CaseType corresponding_clause = new CaseType("corresponding_clause", "clause", 75337175);
        typeSystem.addType(corresponding_clause);
        corresponding_clause.addAttribute("identifier", "identifier", 68656865);

        CaseType data_address_identifier = new CaseType("data_address_identifier", "identifier", 48399853);
        typeSystem.addType(data_address_identifier);
        data_address_identifier.addAttribute("identifier", "identifier", 68656865);

        CaseType data_description_entry = new CaseType("data_description_entry", "description_entry", 93298226);
        typeSystem.addType(data_description_entry);
        data_description_entry.addAttribute("name", "string", 17630164);
        data_description_entry.addAttribute("level_number", "int", 72382198);
        data_description_entry.addAttribute("picture", "picture_clause", 41993279);
        data_description_entry.addAttribute("usage", "usage_clause", 31974695);
        data_description_entry.addAttribute("occurs", "occurs_clause", 90984231);
        data_description_entry.addAttribute("value", "value_clause", 33913569);
        data_description_entry.addAttribute("sign", "sign_clause", 78498927);
        data_description_entry.addAttribute("redefines", "data_reference", 33901801);

        CaseType data_division = new CaseType("data_division", "unit", 18790975);
        typeSystem.addType(data_division);
        data_division.addAttribute("file_section", "file_section", 76505732);
        data_division.addAttribute("working_storage_section", "working_storage_section", 89962372);
        data_division.addAttribute("thread_local_storage_section", "thread_local_storage_section", 28171504);
        data_division.addAttribute("object_storage_section", "object_storage_section", 21460199);
        data_division.addAttribute("local_storage_section", "local_storage_section", 79506363);
        data_division.addAttribute("linkage_section", "linkage_section", 77861615);
        data_division.addAttribute("communication_section", "communication_section", 58534488);
        data_division.addAttribute("report_section", "report_section", 87621868);
        data_division.addAttribute("screen_section", "screen_section", 31856495);

        CaseType data_reference = new CaseType("data_reference", "reference", 63253429);
        typeSystem.addType(data_reference);
        data_reference.addAttribute("name", "string", 17630164);
        data_reference.addAttribute("qualifiers", "qualifiers_list");

        CaseType declaratives = new CaseType("declaratives", "unit", 33662);
        typeSystem.addType(declaratives);
        declaratives.addAttribute("sections", "section_list");

        CaseType delete = new CaseType("delete", "stmt", 57835108);
        typeSystem.addType(delete);
        delete.addAttribute("file", "file_reference", 94537106);
        delete.addAttribute("invalid_key", "invalid_key_branch", 38268067);
        delete.addAttribute("not_invalid_key", "not_invalid_key_branch", 50171949);
        delete.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType depending_on_clause = new CaseType("depending_on_clause", "clause", 93734242);
        typeSystem.addType(depending_on_clause);

        BaseCaseType description_entry = new BaseCaseType("description_entry");
        typeSystem.addType(description_entry);
        description_entry.addAttribute("name", "string", 17630164);
        description_entry.addAttribute("nested_entries", "description_entry_list");

        ListType description_entry_list = new ListType("description_entry_list", "description_entry");
        typeSystem.addType(description_entry_list);

        BaseCaseType directive = new BaseCaseType("directive");
        typeSystem.addType(directive);

        ListType directive_list = new ListType("directive_list", "directive");
        typeSystem.addType(directive_list);

        CaseType display = new CaseType("display", "stmt", 14206128);
        typeSystem.addType(display);
        display.addAttribute("scope_terminator", "scope_terminator", 53379696);
        display.addAttribute("on_exception", "on_exception_branch", 76275576);
        display.addAttribute("not_on_exception", "not_on_exception_branch", 62817523);

        CaseType div_expr = new CaseType("div_expr", "expr", 11944077);
        typeSystem.addType(div_expr);
        div_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        div_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        CaseType divide = new CaseType("divide", "stmt", 99974697);
        typeSystem.addType(divide);
        divide.addAttribute("initial_operand", "identifier", 14128980);
        divide.addAttribute("into_operands", "identifier_list", 29350036);
        divide.addAttribute("giving_operands", "identifier_list", 74908846);
        divide.addAttribute("remainder_operand", "identifier", 35117796);
        divide.addAttribute("on_size_error", "on_size_error_branch", 23507810);
        divide.addAttribute("not_on_size_error", "not_on_size_error_branch", 82126985);
        divide.addAttribute("scope_terminator", "scope_terminator", 53379696);

        UnionType division = new UnionType("division", "data_division", "environment_division", "identification_division", "procedure_division");
        typeSystem.addType(division);

        CaseType else_branch = new CaseType("else_branch", "branch", 79406370);
        typeSystem.addType(else_branch);

        CaseType entry = new CaseType("entry", "stmt", 50795505);
        typeSystem.addType(entry);

        CaseType environment_division = new CaseType("environment_division", "unit", 81237203);
        typeSystem.addType(environment_division);
        environment_division.addAttribute("configuration_section", "configuration_section", 56413948);
        environment_division.addAttribute("io_section", "io_section", 64713121);
        environment_division.addAttribute("object_section", "object_section", 11036021);

        CaseType eq_op = new CaseType("eq_op", "relation_operator", 45445539);
        typeSystem.addType(eq_op);

        CaseType evaluate = new CaseType("evaluate", "stmt", 40176784);
        typeSystem.addType(evaluate);
        evaluate.addAttribute("subjects", "evaluate_subject_list");
        evaluate.addAttribute("branches", "branch_list");
        evaluate.addAttribute("scope_terminator", "scope_terminator", 53379696);

        UnionType evaluate_subject = new UnionType("evaluate_subject", "arithmetic_expr", "condition_expr", "identifier", "literal");
        typeSystem.addType(evaluate_subject);

        ListType evaluate_subject_list = new ListType("evaluate_subject_list", "evaluate_subject");
        typeSystem.addType(evaluate_subject_list);

        CaseType exit = new CaseType("exit", "stmt", 99381355);
        typeSystem.addType(exit);
        exit.addAttribute("endpoint", "string", 79263669);

        CaseType exit_node = new CaseType("exit_node", "meta", 70460015);
        typeSystem.addType(exit_node);

        BaseCaseType expr = new BaseCaseType("expr");
        typeSystem.addType(expr);

        CaseType false_expr = new CaseType("false_expr", "expr", 68840714);
        typeSystem.addType(false_expr);

        CaseType figurative_constant_expr = new CaseType("figurative_constant_expr", "expr", 48159124);
        typeSystem.addType(figurative_constant_expr);
        figurative_constant_expr.addAttribute("value", "string", 62802739);

        CaseType figurative_constant_literal = new CaseType("figurative_constant_literal", "literal", 53533146);
        typeSystem.addType(figurative_constant_literal);
        figurative_constant_literal.addAttribute("literal", "literal", 81581247);

        CaseType file_control_entry = new CaseType("file_control_entry", "description_entry", 88396224);
        typeSystem.addType(file_control_entry);
        file_control_entry.addAttribute("name", "string", 17630164);
        file_control_entry.addAttribute("file_status", "data_reference", 61020675);

        ListType file_control_entry_list = new ListType("file_control_entry_list", "file_control_entry");
        typeSystem.addType(file_control_entry_list);

        CaseType file_control_paragraph = new CaseType("file_control_paragraph", "unit", 45924471);
        typeSystem.addType(file_control_paragraph);
        file_control_paragraph.addAttribute("entries", "file_control_entry_list");

        UnionType file_description = new UnionType("file_description", "file_description_entry", "sort_merge_file_description_entry");
        typeSystem.addType(file_description);

        CaseType file_description_entry = new CaseType("file_description_entry", "description_entry", 97619008);
        typeSystem.addType(file_description_entry);
        file_description_entry.addAttribute("name", "string", 17630164);
        file_description_entry.addAttribute("block_contains", "block_contains_clause", 9263068);

        UnionType file_i_o_stmt = new UnionType("file_i_o_stmt", "close", "delete", "merge", "open", "read", "return_stmt", "rewrite", "sort", "start", "write");
        typeSystem.addType(file_i_o_stmt);

        CaseType file_reference = new CaseType("file_reference", "reference", 91992543);
        typeSystem.addType(file_reference);
        file_reference.addAttribute("name", "string", 17630164);

        ListType file_reference_list = new ListType("file_reference_list", "file_reference");
        typeSystem.addType(file_reference_list);

        CaseType file_section = new CaseType("file_section", "unit", 16690279);
        typeSystem.addType(file_section);
        file_section.addAttribute("entries", "description_entry_list");

        CaseType function_definition = new CaseType("function_definition", "unit", 21502715);
        typeSystem.addType(function_definition);
        function_definition.addAttribute("identification_division", "identification_division", 29590964);
        function_definition.addAttribute("environment_division", "environment_division", 83900149);
        function_definition.addAttribute("data_division", "data_division", 16098283);
        function_definition.addAttribute("procedure_division", "procedure_division", 84902220);

        CaseType function_identifier = new CaseType("function_identifier", "identifier", 35960551);
        typeSystem.addType(function_identifier);
        function_identifier.addAttribute("name", "string", 17630164);
        function_identifier.addAttribute("arguments", "argument_list");

        CaseType g_e_op = new CaseType("g_e_op", "relation_operator", 36003967);
        typeSystem.addType(g_e_op);

        CaseType g_t_op = new CaseType("g_t_op", "relation_operator", 79766551);
        typeSystem.addType(g_t_op);

        CaseType go_to = new CaseType("go_to", "stmt", 72373627);
        typeSystem.addType(go_to);
        go_to.addAttribute("targets", "procedure_reference_list");
        go_to.addAttribute("depending_on", "depending_on_clause", 97302751);

        CaseType goback = new CaseType("goback", "stmt", 39388375);
        typeSystem.addType(goback);

        BaseCaseType header = new BaseCaseType("header");
        typeSystem.addType(header);

        CaseType identification_division = new CaseType("identification_division", "unit", 29225838);
        typeSystem.addType(identification_division);
        identification_division.addAttribute("name", "string", 17630164);

        BaseCaseType identifier = new BaseCaseType("identifier");
        typeSystem.addType(identifier);

        CaseType identifier_expr = new CaseType("identifier_expr", "expr", 46256944);
        typeSystem.addType(identifier_expr);
        identifier_expr.addAttribute("identifier", "identifier", 68656865);

        ListType identifier_list = new ListType("identifier_list", "identifier");
        typeSystem.addType(identifier_list);

        UnionType identifier_or_literal = new UnionType("identifier_or_literal", "identifier", "literal");
        typeSystem.addType(identifier_or_literal);

        CaseType if_then_else = new CaseType("if_then_else", "stmt", 30192054);
        typeSystem.addType(if_then_else);
        if_then_else.addAttribute("condition", "condition_expr", 86580183);
        if_then_else.addAttribute("then", "then_branch", 64840251);
        if_then_else.addAttribute("else", "else_branch", 85458288);
        if_then_else.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType indexed_by = new CaseType("indexed_by", "phrase", 10083246);
        typeSystem.addType(indexed_by);
        indexed_by.addAttribute("indices", "indices_list");

        ListType indices_list = new ListType("indices_list", "string");
        typeSystem.addType(indices_list);

        PrimitiveType int_primitive = new PrimitiveType("int", DBType.INT, QLType.INT);
        typeSystem.addType(int_primitive);

        CaseType invalid_key_branch = new CaseType("invalid_key_branch", "branch", 12658175);
        typeSystem.addType(invalid_key_branch);

        CaseType io_section = new CaseType("io_section", "unit", 7011318);
        typeSystem.addType(io_section);
        io_section.addAttribute("file_control_paragraph", "file_control_paragraph", 81760468);

        CaseType l_e_op = new CaseType("l_e_op", "relation_operator", 20807695);
        typeSystem.addType(l_e_op);

        CaseType l_t_op = new CaseType("l_t_op", "relation_operator", 75856650);
        typeSystem.addType(l_t_op);

        CaseType linkage_section = new CaseType("linkage_section", "unit", 60508624);
        typeSystem.addType(linkage_section);
        linkage_section.addAttribute("entries", "description_entry_list");

        BaseCaseType literal = new BaseCaseType("literal");
        typeSystem.addType(literal);
        literal.addAttribute("value", "string", 62802739);

        CaseType local_storage_section = new CaseType("local_storage_section", "unit", 30994435);
        typeSystem.addType(local_storage_section);
        local_storage_section.addAttribute("entries", "description_entry_list");

        CaseType log_and_expr = new CaseType("log_and_expr", "expr", 55189697);
        typeSystem.addType(log_and_expr);
        log_and_expr.addAttribute("left_operand", "condition_expr", 88038131);
        log_and_expr.addAttribute("right_operand", "condition_expr", 87465991);

        CaseType log_not_expr = new CaseType("log_not_expr", "expr", 53207118);
        typeSystem.addType(log_not_expr);
        log_not_expr.addAttribute("expression", "condition_expr", 77707790);

        CaseType log_or_expr = new CaseType("log_or_expr", "expr", 67316360);
        typeSystem.addType(log_or_expr);
        log_or_expr.addAttribute("left_operand", "condition_expr", 88038131);
        log_or_expr.addAttribute("right_operand", "condition_expr", 87465991);

        UnionType loop_form = new UnionType("loop_form", "times", "until", "varying");
        typeSystem.addType(loop_form);

        CaseType m_f_set_statement = new CaseType("m_f_set_statement", "directive", 75320758);
        typeSystem.addType(m_f_set_statement);
        m_f_set_statement.addAttribute("format", "string", 25978564);

        CaseType merge = new CaseType("merge", "stmt", 85312199);
        typeSystem.addType(merge);
        merge.addAttribute("file", "file_reference", 94537106);
        merge.addAttribute("using", "file_reference_list", 1495477);
        merge.addAttribute("giving", "file_reference_list", 97224510);

        BaseCaseType meta = new BaseCaseType("meta");
        typeSystem.addType(meta);

        CaseType move = new CaseType("move", "stmt", 29405582);
        typeSystem.addType(move);
        move.addAttribute("corresponding", "corresponding_clause", 38615929);
        move.addAttribute("initial_operand", "identifier", 14128980);
        move.addAttribute("to_operands", "identifier_list", 52389977);

        CaseType mul_expr = new CaseType("mul_expr", "expr", 63347770);
        typeSystem.addType(mul_expr);
        mul_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        mul_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        CaseType multiply = new CaseType("multiply", "stmt", 80623613);
        typeSystem.addType(multiply);
        multiply.addAttribute("initial_operand", "identifier", 14128980);
        multiply.addAttribute("by_operands", "identifier_list", 93520550);
        multiply.addAttribute("giving_operands", "identifier_list", 74908846);
        multiply.addAttribute("on_size_error", "on_size_error_branch", 23507810);
        multiply.addAttribute("not_on_size_error", "not_on_size_error_branch", 82126985);
        multiply.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType n_eq_op = new CaseType("n_eq_op", "relation_operator", 67256513);
        typeSystem.addType(n_eq_op);

        UnionType named_unit = new UnionType("named_unit", "identification_division", "paragraph", "section");
        typeSystem.addType(named_unit);

        CaseType neg_expr = new CaseType("neg_expr", "expr", 27349015);
        typeSystem.addType(neg_expr);
        neg_expr.addAttribute("expression", "arithmetic_expr", 4913101);

        CaseType next_sentence = new CaseType("next_sentence", "stmt", 91341859);
        typeSystem.addType(next_sentence);

        CaseType no_data_branch = new CaseType("no_data_branch", "branch", 55839133);
        typeSystem.addType(no_data_branch);

        CaseType not_at_end_branch = new CaseType("not_at_end_branch", "branch", 7751222);
        typeSystem.addType(not_at_end_branch);

        CaseType not_at_end_of_page_branch = new CaseType("not_at_end_of_page_branch", "branch", 65522369);
        typeSystem.addType(not_at_end_of_page_branch);

        CaseType not_class_condition_expr = new CaseType("not_class_condition_expr", "expr", 44966726);
        typeSystem.addType(not_class_condition_expr);
        not_class_condition_expr.addAttribute("identifier", "identifier", 68656865);
        not_class_condition_expr.addAttribute("class_type", "class_type");

        CaseType not_invalid_key_branch = new CaseType("not_invalid_key_branch", "branch", 28007936);
        typeSystem.addType(not_invalid_key_branch);

        CaseType not_omitted_condition_expr = new CaseType("not_omitted_condition_expr", "expr", 28834916);
        typeSystem.addType(not_omitted_condition_expr);
        not_omitted_condition_expr.addAttribute("data_name", "string", 40055468);

        CaseType not_on_escape_branch = new CaseType("not_on_escape_branch", "branch", 73860253);
        typeSystem.addType(not_on_escape_branch);

        CaseType not_on_exception_branch = new CaseType("not_on_exception_branch", "branch", 38911707);
        typeSystem.addType(not_on_exception_branch);

        CaseType not_on_overflow_branch = new CaseType("not_on_overflow_branch", "branch", 15349203);
        typeSystem.addType(not_on_overflow_branch);

        CaseType not_on_size_error_branch = new CaseType("not_on_size_error_branch", "branch", 79164214);
        typeSystem.addType(not_on_size_error_branch);

        CaseType not_sign_condition_expr = new CaseType("not_sign_condition_expr", "expr", 22165803);
        typeSystem.addType(not_sign_condition_expr);
        not_sign_condition_expr.addAttribute("expr", "arithmetic_expr", 59595097);
        not_sign_condition_expr.addAttribute("sign_type", "string", 74014681);

        CaseType numeric_expr = new CaseType("numeric_expr", "expr", 67467299);
        typeSystem.addType(numeric_expr);
        numeric_expr.addAttribute("literal", "literal", 81581247);

        CaseType numeric_literal = new CaseType("numeric_literal", "literal", 90000993);
        typeSystem.addType(numeric_literal);

        CaseType numeric_sign_clause = new CaseType("numeric_sign_clause", "clause", 53555754);
        typeSystem.addType(numeric_sign_clause);
        numeric_sign_clause.addAttribute("position", "string", 38774791);
        numeric_sign_clause.addAttribute("separate", "string", 89431000);

        CaseType object_section = new CaseType("object_section", "unit", 87415743);
        typeSystem.addType(object_section);

        CaseType object_storage_section = new CaseType("object_storage_section", "unit", 92536471);
        typeSystem.addType(object_storage_section);

        CaseType occurs_clause = new CaseType("occurs_clause", "clause", 40944695);
        typeSystem.addType(occurs_clause);
        occurs_clause.addAttribute("minimum", "int", 87579192);
        occurs_clause.addAttribute("maximum", "int", 21560422);
        occurs_clause.addAttribute("object", "data_reference", 86745860);
        occurs_clause.addAttribute("indexed_by", "indexed_by", 67808443);

        CaseType omitted = new CaseType("omitted", "phrase", 60765697);
        typeSystem.addType(omitted);

        CaseType omitted_condition_expr = new CaseType("omitted_condition_expr", "expr", 33386671);
        typeSystem.addType(omitted_condition_expr);
        omitted_condition_expr.addAttribute("data_name", "string", 40055468);

        CaseType on_escape_branch = new CaseType("on_escape_branch", "branch", 68837992);
        typeSystem.addType(on_escape_branch);

        CaseType on_exception_branch = new CaseType("on_exception_branch", "branch", 82482940);
        typeSystem.addType(on_exception_branch);

        CaseType on_overflow_branch = new CaseType("on_overflow_branch", "branch", 35273347);
        typeSystem.addType(on_overflow_branch);

        CaseType on_size_error_branch = new CaseType("on_size_error_branch", "branch", 80680704);
        typeSystem.addType(on_size_error_branch);

        CaseType open = new CaseType("open", "stmt", 86546025);
        typeSystem.addType(open);
        open.addAttribute("files", "file_reference_list", 28907142);

        CaseType optional = new CaseType("optional", "phrase", 98926093);
        typeSystem.addType(optional);

        CaseType other_header = new CaseType("other_header", "header", 17432981);
        typeSystem.addType(other_header);

        CaseType other_literal = new CaseType("other_literal", "literal", 5167313);
        typeSystem.addType(other_literal);

        CaseType other_stmt = new CaseType("other_stmt", "stmt", 86975814);
        typeSystem.addType(other_stmt);
        other_stmt.addAttribute("on_exception", "on_exception_branch", 76275576);
        other_stmt.addAttribute("not_on_exception", "not_on_exception_branch", 62817523);
        other_stmt.addAttribute("on_size_error", "on_size_error_branch", 23507810);
        other_stmt.addAttribute("not_on_size_error", "not_on_size_error_branch", 82126985);
        other_stmt.addAttribute("on_overflow", "on_overflow_branch", 6269505);
        other_stmt.addAttribute("not_on_overflow", "not_on_overflow_branch", 1081926);
        other_stmt.addAttribute("invalid_key", "invalid_key_branch", 38268067);
        other_stmt.addAttribute("not_invalid_key", "not_invalid_key_branch", 50171949);
        other_stmt.addAttribute("at_end", "at_end_branch", 72396675);
        other_stmt.addAttribute("not_at_end", "not_at_end_branch", 60202861);
        other_stmt.addAttribute("at_end_of_page", "at_end_of_page_branch", 88262394);
        other_stmt.addAttribute("not_at_end_of_page", "not_at_end_of_page_branch", 6939967);
        other_stmt.addAttribute("with_data", "with_data_branch", 22034517);
        other_stmt.addAttribute("no_data", "no_data_branch", 7895265);

        CaseType paragraph = new CaseType("paragraph", "unit", 47042237);
        typeSystem.addType(paragraph);
        paragraph.addAttribute("name", "string", 17630164);
        paragraph.addAttribute("sentences", "sentence_list");
        paragraph.addAttribute("exit_node", "exit_node");

        ListType paragraph_list = new ListType("paragraph_list", "paragraph");
        typeSystem.addType(paragraph_list);

        UnionType perform = new UnionType("perform", "perform_inline", "perform_outofline");
        typeSystem.addType(perform);

        CaseType perform_inline = new CaseType("perform_inline", "stmt", 75938159);
        typeSystem.addType(perform_inline);
        perform_inline.addAttribute("loop_form", "loop_form", 69939199);
        perform_inline.addAttribute("statements", "stmt_list");

        CaseType perform_outofline = new CaseType("perform_outofline", "stmt", 10051469);
        typeSystem.addType(perform_outofline);
        perform_outofline.addAttribute("procedure_name_1", "procedure_reference", 62197436);
        perform_outofline.addAttribute("procedure_name_2", "procedure_reference", 43466907);
        perform_outofline.addAttribute("loop_form", "loop_form", 69939199);

        BaseCaseType phrase = new BaseCaseType("phrase");
        typeSystem.addType(phrase);

        CaseType picture_clause = new CaseType("picture_clause", "clause", 44758392);
        typeSystem.addType(picture_clause);
        picture_clause.addAttribute("picture_string", "string", 93832147);
        picture_clause.addAttribute("normalized_picture_string", "string", 61801571);
        picture_clause.addAttribute("category", "string", 91772045);

        CaseType plus_expr = new CaseType("plus_expr", "expr", 28052887);
        typeSystem.addType(plus_expr);
        plus_expr.addAttribute("expression", "arithmetic_expr", 4913101);

        CaseType pow_expr = new CaseType("pow_expr", "expr", 28880227);
        typeSystem.addType(pow_expr);
        pow_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        pow_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        CaseType predefined_class_type = new CaseType("predefined_class_type", "class_type", 8510397);
        typeSystem.addType(predefined_class_type);

        CaseType predefined_object = new CaseType("predefined_object", "identifier", 80020922);
        typeSystem.addType(predefined_object);
        predefined_object.addAttribute("value", "string", 62802739);

        UnionType preprocessing_directive = new UnionType("preprocessing_directive", "call_arg_copied", "copy", "replace");
        typeSystem.addType(preprocessing_directive);

        ListType preprocessing_directive_list = new ListType("preprocessing_directive_list", "preprocessing_directive");
        typeSystem.addType(preprocessing_directive_list);

        CaseType procedure_division = new CaseType("procedure_division", "unit", 11471252);
        typeSystem.addType(procedure_division);
        procedure_division.addAttribute("header", "procedure_division_header");
        procedure_division.addAttribute("declaratives", "declaratives", 30214743);
        procedure_division.addAttribute("sentences", "sentence_list");
        procedure_division.addAttribute("paragraphs", "paragraph_list");
        procedure_division.addAttribute("sections", "section_list");
        procedure_division.addAttribute("exit_node", "exit_node");

        CaseType procedure_division_header = new CaseType("procedure_division_header", "header", 4192020);
        typeSystem.addType(procedure_division_header);
        procedure_division_header.addAttribute("using", "procedure_division_parameter_list");
        procedure_division_header.addAttribute("returning", "identifier", 62494607);

        BaseCaseType procedure_division_parameter = new BaseCaseType("procedure_division_parameter");
        typeSystem.addType(procedure_division_parameter);
        procedure_division_parameter.addAttribute("optional", "optional", 60112871);
        procedure_division_parameter.addAttribute("value", "identifier", 7947762);

        CaseType procedure_division_parameter_by_output = new CaseType("procedure_division_parameter_by_output", "procedure_division_parameter", 74575927);
        typeSystem.addType(procedure_division_parameter_by_output);

        CaseType procedure_division_parameter_by_reference = new CaseType("procedure_division_parameter_by_reference", "procedure_division_parameter", 40926420);
        typeSystem.addType(procedure_division_parameter_by_reference);

        CaseType procedure_division_parameter_by_value = new CaseType("procedure_division_parameter_by_value", "procedure_division_parameter", 993095);
        typeSystem.addType(procedure_division_parameter_by_value);

        ListType procedure_division_parameter_list = new ListType("procedure_division_parameter_list", "procedure_division_parameter");
        typeSystem.addType(procedure_division_parameter_list);

        CaseType procedure_reference = new CaseType("procedure_reference", "reference", 737377);
        typeSystem.addType(procedure_reference);
        procedure_reference.addAttribute("name", "string", 17630164);
        procedure_reference.addAttribute("qualification", "string", 22515511);

        ListType procedure_reference_list = new ListType("procedure_reference_list", "procedure_reference");
        typeSystem.addType(procedure_reference_list);

        CaseType program_definition = new CaseType("program_definition", "unit", 86367018);
        typeSystem.addType(program_definition);
        program_definition.addAttribute("identification_division", "identification_division", 29590964);
        program_definition.addAttribute("environment_division", "environment_division", 83900149);
        program_definition.addAttribute("data_division", "data_division", 16098283);
        program_definition.addAttribute("procedure_division", "procedure_division", 84902220);
        program_definition.addAttribute("source_units", "unit_list");

        UnionType program_name = new UnionType("program_name", "identifier", "literal");
        typeSystem.addType(program_name);

        CaseType qualified_data_name_with_subscripts = new CaseType("qualified_data_name_with_subscripts", "identifier", 52217627);
        typeSystem.addType(qualified_data_name_with_subscripts);
        qualified_data_name_with_subscripts.addAttribute("reference", "data_reference", 55859486);
        qualified_data_name_with_subscripts.addAttribute("subscripts", "subscript_list");
        qualified_data_name_with_subscripts.addAttribute("reference_modifier", "reference_modifier");

        CaseType qualified_linage_counter = new CaseType("qualified_linage_counter", "identifier", 53603973);
        typeSystem.addType(qualified_linage_counter);
        qualified_linage_counter.addAttribute("qualification", "string", 22515511);

        CaseType qualified_line_counter = new CaseType("qualified_line_counter", "identifier", 83010015);
        typeSystem.addType(qualified_line_counter);
        qualified_line_counter.addAttribute("qualification", "string", 22515511);

        CaseType qualified_page_counter = new CaseType("qualified_page_counter", "identifier", 48167559);
        typeSystem.addType(qualified_page_counter);
        qualified_page_counter.addAttribute("qualification", "string", 22515511);

        UnionType qualified_report_counter = new UnionType("qualified_report_counter", "qualified_line_counter", "qualified_page_counter");
        typeSystem.addType(qualified_report_counter);

        ListType qualifiers_list = new ListType("qualifiers_list", "string");
        typeSystem.addType(qualifiers_list);

        CaseType read = new CaseType("read", "stmt", 67929438);
        typeSystem.addType(read);
        read.addAttribute("file", "file_reference", 94537106);
        read.addAttribute("invalid_key", "invalid_key_branch", 38268067);
        read.addAttribute("not_invalid_key", "not_invalid_key_branch", 50171949);
        read.addAttribute("at_end", "at_end_branch", 72396675);
        read.addAttribute("not_at_end", "not_at_end_branch", 60202861);
        read.addAttribute("scope_terminator", "scope_terminator", 53379696);

        BaseCaseType reference = new BaseCaseType("reference");
        typeSystem.addType(reference);

        CaseType reference_modifier = new CaseType("reference_modifier", "reference_modifier_t", 27929631);
        typeSystem.addType(reference_modifier);
        reference_modifier.addAttribute("start", "arithmetic_expr", 77965600);
        reference_modifier.addAttribute("length", "arithmetic_expr", 37764999);

        BaseCaseType reference_modifier_t = new BaseCaseType("reference_modifier_t");
        typeSystem.addType(reference_modifier_t);

        UnionType relation_object = new UnionType("relation_object", "abbr_log_expr", "relation_operand");
        typeSystem.addType(relation_object);

        CaseType relation_object_expr = new CaseType("relation_object_expr", "expr", 35843252);
        typeSystem.addType(relation_object_expr);
        relation_object_expr.addAttribute("operator", "relation_operator");
        relation_object_expr.addAttribute("operand", "relation_object", 38417992);

        UnionType relation_operand = new UnionType("relation_operand", "address_of_register", "arithmetic_expr", "figurative_constant_expr", "identifier", "literal");
        typeSystem.addType(relation_operand);

        BaseCaseType relation_operator = new BaseCaseType("relation_operator");
        typeSystem.addType(relation_operator);

        CaseType relative_subscript = new CaseType("relative_subscript", "expr", 12663031);
        typeSystem.addType(relative_subscript);
        relative_subscript.addAttribute("reference", "reference", 93464331);
        relative_subscript.addAttribute("modifier", "int", 30045931);

        CaseType replace = new CaseType("replace", "stmt", 94841500);
        typeSystem.addType(replace);

        CaseType report_description_entry = new CaseType("report_description_entry", "description_entry", 93128927);
        typeSystem.addType(report_description_entry);
        report_description_entry.addAttribute("name", "string", 17630164);

        CaseType report_group_description_entry = new CaseType("report_group_description_entry", "description_entry", 42695521);
        typeSystem.addType(report_group_description_entry);
        report_group_description_entry.addAttribute("name", "string", 17630164);
        report_group_description_entry.addAttribute("level_number", "int", 72382198);
        report_group_description_entry.addAttribute("picture", "picture_clause", 41993279);
        report_group_description_entry.addAttribute("occurs", "occurs_clause", 90984231);

        CaseType report_section = new CaseType("report_section", "unit", 34485178);
        typeSystem.addType(report_section);
        report_section.addAttribute("entries", "description_entry_list");

        CaseType return_stmt = new CaseType("return_stmt", "stmt", 31498362);
        typeSystem.addType(return_stmt);
        return_stmt.addAttribute("file", "file_reference", 94537106);
        return_stmt.addAttribute("at_end", "at_end_branch", 72396675);
        return_stmt.addAttribute("not_at_end", "not_at_end_branch", 60202861);
        return_stmt.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType rewrite = new CaseType("rewrite", "stmt", 41714145);
        typeSystem.addType(rewrite);
        rewrite.addAttribute("file", "file_reference", 94537106);
        rewrite.addAttribute("record", "identifier", 18063713);
        rewrite.addAttribute("invalid_key", "invalid_key_branch", 38268067);
        rewrite.addAttribute("not_invalid_key", "not_invalid_key_branch", 50171949);
        rewrite.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType scope_terminator = new CaseType("scope_terminator", "phrase", 5378602);
        typeSystem.addType(scope_terminator);

        CaseType screen_description_entry = new CaseType("screen_description_entry", "description_entry", 49068152);
        typeSystem.addType(screen_description_entry);
        screen_description_entry.addAttribute("name", "string", 17630164);
        screen_description_entry.addAttribute("level_number", "int", 72382198);
        screen_description_entry.addAttribute("picture", "picture_clause", 41993279);
        screen_description_entry.addAttribute("usage", "usage_clause", 31974695);
        screen_description_entry.addAttribute("occurs", "occurs_clause", 90984231);

        CaseType screen_section = new CaseType("screen_section", "unit", 98475414);
        typeSystem.addType(screen_section);
        screen_section.addAttribute("entries", "description_entry_list");

        CaseType search = new CaseType("search", "stmt", 21542037);
        typeSystem.addType(search);
        search.addAttribute("branches", "branch_list");
        search.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType section = new CaseType("section", "unit", 79343999);
        typeSystem.addType(section);
        section.addAttribute("name", "string", 17630164);
        section.addAttribute("sentences", "sentence_list");
        section.addAttribute("paragraphs", "paragraph_list");
        section.addAttribute("exit_node", "exit_node");

        ListType section_list = new ListType("section_list", "section");
        typeSystem.addType(section_list);

        CaseType sentence = new CaseType("sentence", "unit", 48817600);
        typeSystem.addType(sentence);
        sentence.addAttribute("statements", "stmt_list");

        ListType sentence_list = new ListType("sentence_list", "sentence");
        typeSystem.addType(sentence_list);

        CaseType sign_clause = new CaseType("sign_clause", "clause", 96857507);
        typeSystem.addType(sign_clause);
        sign_clause.addAttribute("position", "string", 38774791);
        sign_clause.addAttribute("separate", "string", 89431000);

        CaseType sign_condition_expr = new CaseType("sign_condition_expr", "expr", 48968428);
        typeSystem.addType(sign_condition_expr);
        sign_condition_expr.addAttribute("expr", "arithmetic_expr", 59595097);
        sign_condition_expr.addAttribute("sign_type", "string", 74014681);

        CaseType sort = new CaseType("sort", "stmt", 1861511);
        typeSystem.addType(sort);
        sort.addAttribute("file", "file_reference", 94537106);
        sort.addAttribute("using", "file_reference_list", 1495477);
        sort.addAttribute("giving", "file_reference_list", 97224510);

        CaseType sort_merge_file_description_entry = new CaseType("sort_merge_file_description_entry", "description_entry", 27158113);
        typeSystem.addType(sort_merge_file_description_entry);
        sort_merge_file_description_entry.addAttribute("name", "string", 17630164);
        sort_merge_file_description_entry.addAttribute("block_contains", "block_contains_clause", 9263068);

        CaseType source_format_directive = new CaseType("source_format_directive", "directive", 28401452);
        typeSystem.addType(source_format_directive);
        source_format_directive.addAttribute("format", "string", 25978564);

        CaseType source_unit = new CaseType("source_unit", "unit", 84808098);
        typeSystem.addType(source_unit);
        source_unit.addAttribute("source_units", "unit_list");

        CaseType special_names_paragraph = new CaseType("special_names_paragraph", "unit", 20758307);
        typeSystem.addType(special_names_paragraph);
        special_names_paragraph.addAttribute("numeric_sign", "numeric_sign_clause", 53677805);

        BaseCaseType special_register = new BaseCaseType("special_register");
        typeSystem.addType(special_register);

        CaseType sql = new CaseType("sql", "stmt", 31914026);
        typeSystem.addType(sql);
        sql.addAttribute("stmt", "sql_stmt");

        BaseCaseType sql_aggregate_function = new BaseCaseType("sql_aggregate_function");
        typeSystem.addType(sql_aggregate_function);

        CaseType sql_alter_stmt = new CaseType("sql_alter_stmt", "sql_stmt", 67625042);
        typeSystem.addType(sql_alter_stmt);
        sql_alter_stmt.addAttribute("subject", "string", 93692621);

        CaseType sql_and_expr = new CaseType("sql_and_expr", "sql_expr", 41472225);
        typeSystem.addType(sql_and_expr);
        sql_and_expr.addAttribute("left_operand", "sql_condition_expr", 73170723);
        sql_and_expr.addAttribute("right_operand", "sql_condition_expr", 22180757);

        BaseCaseType sql_clause = new BaseCaseType("sql_clause");
        typeSystem.addType(sql_clause);

        CaseType sql_close_stmt = new CaseType("sql_close_stmt", "sql_stmt", 41757648);
        typeSystem.addType(sql_close_stmt);
        sql_close_stmt.addAttribute("cursor", "sql_cursor_name", 73600301);

        CaseType sql_comparison = new CaseType("sql_comparison", "sql_expr", 12035953);
        typeSystem.addType(sql_comparison);
        sql_comparison.addAttribute("op", "sql_comparison_op");

        BaseCaseType sql_comparison_op = new BaseCaseType("sql_comparison_op");
        typeSystem.addType(sql_comparison_op);

        UnionType sql_condition_expr = new UnionType("sql_condition_expr", "sql_and_expr", "sql_comparison", "sql_like_predicate", "sql_not_expr", "sql_or_expr", "sql_unknown_expr");
        typeSystem.addType(sql_condition_expr);

        CaseType sql_count_all = new CaseType("sql_count_all", "sql_aggregate_function", 86401840);
        typeSystem.addType(sql_count_all);

        CaseType sql_create_stmt = new CaseType("sql_create_stmt", "sql_stmt", 1940085);
        typeSystem.addType(sql_create_stmt);

        CaseType sql_cursor_name = new CaseType("sql_cursor_name", "sql_reference", 65435066);
        typeSystem.addType(sql_cursor_name);
        sql_cursor_name.addAttribute("name", "string", 17630164);
        sql_cursor_name.addAttribute("module", "string", 87449909);

        UnionType sql_d_d_l = new UnionType("sql_d_d_l", "sql_alter_stmt", "sql_create_stmt", "sql_drop_stmt", "sql_rename_stmt");
        typeSystem.addType(sql_d_d_l);

        CaseType sql_declare_cursor_stmt = new CaseType("sql_declare_cursor_stmt", "sql_stmt", 79644383);
        typeSystem.addType(sql_declare_cursor_stmt);
        sql_declare_cursor_stmt.addAttribute("cursor", "sql_cursor_name", 73600301);

        CaseType sql_delete_stmt = new CaseType("sql_delete_stmt", "sql_stmt", 36068901);
        typeSystem.addType(sql_delete_stmt);
        sql_delete_stmt.addAttribute("table_name", "sql_table_name", 97143759);

        CaseType sql_drop_stmt = new CaseType("sql_drop_stmt", "sql_stmt", 56390012);
        typeSystem.addType(sql_drop_stmt);

        CaseType sql_eq_op = new CaseType("sql_eq_op", "sql_comparison_op", 15644519);
        typeSystem.addType(sql_eq_op);

        BaseCaseType sql_expr = new BaseCaseType("sql_expr");
        typeSystem.addType(sql_expr);

        CaseType sql_from_clause = new CaseType("sql_from_clause", "sql_clause", 39913810);
        typeSystem.addType(sql_from_clause);
        sql_from_clause.addAttribute("targets", "sql_table_reference_list");

        CaseType sql_g_e_op = new CaseType("sql_g_e_op", "sql_comparison_op", 27601532);
        typeSystem.addType(sql_g_e_op);

        CaseType sql_g_t_op = new CaseType("sql_g_t_op", "sql_comparison_op", 42732544);
        typeSystem.addType(sql_g_t_op);

        CaseType sql_host_parameter_name = new CaseType("sql_host_parameter_name", "sql_reference", 14038525);
        typeSystem.addType(sql_host_parameter_name);
        sql_host_parameter_name.addAttribute("name", "string", 17630164);

        CaseType sql_host_parameter_specification = new CaseType("sql_host_parameter_specification", "sql_spec", 76864992);
        typeSystem.addType(sql_host_parameter_specification);
        sql_host_parameter_specification.addAttribute("parameter", "sql_host_parameter_name", 53763872);
        sql_host_parameter_specification.addAttribute("indicator", "sql_host_parameter_name", 10210269);

        CaseType sql_into_clause = new CaseType("sql_into_clause", "sql_clause", 32450578);
        typeSystem.addType(sql_into_clause);
        sql_into_clause.addAttribute("targets", "sql_into_target_list");

        UnionType sql_into_target = new UnionType("sql_into_target", "sql_host_parameter_specification", "sql_unknown_spec");
        typeSystem.addType(sql_into_target);

        ListType sql_into_target_list = new ListType("sql_into_target_list", "sql_into_target");
        typeSystem.addType(sql_into_target_list);

        CaseType sql_l_e_op = new CaseType("sql_l_e_op", "sql_comparison_op", 39787689);
        typeSystem.addType(sql_l_e_op);

        CaseType sql_l_t_op = new CaseType("sql_l_t_op", "sql_comparison_op", 95303694);
        typeSystem.addType(sql_l_t_op);

        CaseType sql_like_predicate = new CaseType("sql_like_predicate", "sql_expr", 83571029);
        typeSystem.addType(sql_like_predicate);
        sql_like_predicate.addAttribute("pattern", "string", 71052125);

        CaseType sql_lock_table_stmt = new CaseType("sql_lock_table_stmt", "sql_stmt", 68513622);
        typeSystem.addType(sql_lock_table_stmt);
        sql_lock_table_stmt.addAttribute("table_name", "sql_table_name", 97143759);

        CaseType sql_n_eq_op = new CaseType("sql_n_eq_op", "sql_comparison_op", 43024329);
        typeSystem.addType(sql_n_eq_op);

        CaseType sql_not_expr = new CaseType("sql_not_expr", "sql_expr", 42181428);
        typeSystem.addType(sql_not_expr);
        sql_not_expr.addAttribute("expression", "sql_condition_expr", 58332710);

        CaseType sql_open_stmt = new CaseType("sql_open_stmt", "sql_stmt", 17614701);
        typeSystem.addType(sql_open_stmt);
        sql_open_stmt.addAttribute("cursor", "sql_cursor_name", 73600301);

        CaseType sql_or_expr = new CaseType("sql_or_expr", "sql_expr", 56748311);
        typeSystem.addType(sql_or_expr);
        sql_or_expr.addAttribute("left_operand", "sql_condition_expr", 73170723);
        sql_or_expr.addAttribute("right_operand", "sql_condition_expr", 22180757);

        CaseType sql_other_stmt = new CaseType("sql_other_stmt", "sql_stmt", 27980015);
        typeSystem.addType(sql_other_stmt);

        BaseCaseType sql_reference = new BaseCaseType("sql_reference");
        typeSystem.addType(sql_reference);

        CaseType sql_rename_stmt = new CaseType("sql_rename_stmt", "sql_stmt", 15427085);
        typeSystem.addType(sql_rename_stmt);

        CaseType sql_select_stmt = new CaseType("sql_select_stmt", "sql_stmt", 85747934);
        typeSystem.addType(sql_select_stmt);
        sql_select_stmt.addAttribute("selection", "sql_selection_list");
        sql_select_stmt.addAttribute("into", "sql_into_clause", 50257785);
        sql_select_stmt.addAttribute("from", "sql_from_clause", 69265295);
        sql_select_stmt.addAttribute("where", "sql_where_clause", 14294741);

        UnionType sql_selection = new UnionType("sql_selection", "sql_aggregate_function", "sql_unknown_expr");
        typeSystem.addType(sql_selection);

        ListType sql_selection_list = new ListType("sql_selection_list", "sql_selection");
        typeSystem.addType(sql_selection_list);

        BaseCaseType sql_spec = new BaseCaseType("sql_spec");
        typeSystem.addType(sql_spec);

        BaseCaseType sql_stmt = new BaseCaseType("sql_stmt");
        typeSystem.addType(sql_stmt);

        CaseType sql_table_name = new CaseType("sql_table_name", "sql_reference", 50762498);
        typeSystem.addType(sql_table_name);
        sql_table_name.addAttribute("name", "string", 17630164);
        sql_table_name.addAttribute("schema", "string", 29949063);
        sql_table_name.addAttribute("module", "string", 87449909);
        sql_table_name.addAttribute("catalog", "string", 45289086);

        UnionType sql_table_reference = new UnionType("sql_table_reference", "sql_table_name", "sql_unknown_reference");
        typeSystem.addType(sql_table_reference);

        ListType sql_table_reference_list = new ListType("sql_table_reference_list", "sql_table_reference");
        typeSystem.addType(sql_table_reference_list);

        CaseType sql_unknown_expr = new CaseType("sql_unknown_expr", "sql_expr", 22863497);
        typeSystem.addType(sql_unknown_expr);

        CaseType sql_unknown_reference = new CaseType("sql_unknown_reference", "sql_reference", 16204380);
        typeSystem.addType(sql_unknown_reference);

        CaseType sql_unknown_spec = new CaseType("sql_unknown_spec", "sql_spec", 63978960);
        typeSystem.addType(sql_unknown_spec);

        CaseType sql_update_stmt = new CaseType("sql_update_stmt", "sql_stmt", 81816969);
        typeSystem.addType(sql_update_stmt);
        sql_update_stmt.addAttribute("where", "sql_where_clause", 14294741);

        CaseType sql_where_clause = new CaseType("sql_where_clause", "sql_clause", 13993182);
        typeSystem.addType(sql_where_clause);
        sql_where_clause.addAttribute("search_condition", "sql_condition_expr", 45604265);

        CaseType start = new CaseType("start", "stmt", 78020498);
        typeSystem.addType(start);
        start.addAttribute("file", "file_reference", 94537106);
        start.addAttribute("invalid_key", "invalid_key_branch", 38268067);
        start.addAttribute("not_invalid_key", "not_invalid_key_branch", 50171949);
        start.addAttribute("scope_terminator", "scope_terminator", 53379696);

        BaseCaseType stmt = new BaseCaseType("stmt");
        typeSystem.addType(stmt);

        ListType stmt_list = new ListType("stmt_list", "stmt");
        typeSystem.addType(stmt_list);

        CaseType stop = new CaseType("stop", "stmt", 20464219);
        typeSystem.addType(stop);
        stop.addAttribute("endpoint", "string", 79263669);
        stop.addAttribute("literal", "string", 94670532);

        PrimitiveType string_primitive = new PrimitiveType("string", DBType.VARCHAR, QLType.STRING);
        typeSystem.addType(string_primitive);

        CaseType string_stmt = new CaseType("string_stmt", "stmt", 85315759);
        typeSystem.addType(string_stmt);
        string_stmt.addAttribute("on_overflow", "on_overflow_branch", 6269505);
        string_stmt.addAttribute("not_on_overflow", "not_on_overflow_branch", 1081926);
        string_stmt.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType sub_expr = new CaseType("sub_expr", "expr", 91443824);
        typeSystem.addType(sub_expr);
        sub_expr.addAttribute("left_operand", "arithmetic_expr", 92462919);
        sub_expr.addAttribute("right_operand", "arithmetic_expr", 81834206);

        UnionType subscript = new UnionType("subscript", "literal", "relative_subscript");
        typeSystem.addType(subscript);

        ListType subscript_list = new ListType("subscript_list", "subscript");
        typeSystem.addType(subscript_list);

        CaseType subtract = new CaseType("subtract", "stmt", 30928223);
        typeSystem.addType(subtract);
        subtract.addAttribute("corresponding", "corresponding_clause", 38615929);
        subtract.addAttribute("initial_operands", "identifier_list", 46696978);
        subtract.addAttribute("from_operands", "identifier_list", 52161416);
        subtract.addAttribute("giving_operands", "identifier_list", 74908846);
        subtract.addAttribute("on_size_error", "on_size_error_branch", 23507810);
        subtract.addAttribute("not_on_size_error", "not_on_size_error_branch", 82126985);
        subtract.addAttribute("scope_terminator", "scope_terminator", 53379696);

        BaseCaseType text = new BaseCaseType("text");
        typeSystem.addType(text);
        text.addAttribute("preprocessing_directives", "preprocessing_directive_list");
        text.addAttribute("handled_directives", "directive_list");

        CaseType then_branch = new CaseType("then_branch", "branch", 49912515);
        typeSystem.addType(then_branch);

        CaseType thread_local_storage_section = new CaseType("thread_local_storage_section", "unit", 42742054);
        typeSystem.addType(thread_local_storage_section);
        thread_local_storage_section.addAttribute("entries", "description_entry_list");

        CaseType times = new CaseType("times", "phrase", 95647949);
        typeSystem.addType(times);

        CaseType true_expr = new CaseType("true_expr", "expr", 63688956);
        typeSystem.addType(true_expr);

        BaseCaseType unit = new BaseCaseType("unit");
        typeSystem.addType(unit);
        unit.addAttribute("header", "header");

        ListType unit_list = new ListType("unit_list", "unit");
        typeSystem.addType(unit_list);

        CaseType unknown_directive = new CaseType("unknown_directive", "directive", 46493853);
        typeSystem.addType(unknown_directive);

        CaseType unstring = new CaseType("unstring", "stmt", 52075592);
        typeSystem.addType(unstring);
        unstring.addAttribute("on_overflow", "on_overflow_branch", 6269505);
        unstring.addAttribute("not_on_overflow", "not_on_overflow_branch", 1081926);
        unstring.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType until = new CaseType("until", "phrase", 7851360);
        typeSystem.addType(until);
        until.addAttribute("condition", "condition_expr", 86580183);

        CaseType usage_clause = new CaseType("usage_clause", "clause", 91351202);
        typeSystem.addType(usage_clause);
        usage_clause.addAttribute("operand", "string", 92381128);

        CaseType use = new CaseType("use", "stmt", 90196434);
        typeSystem.addType(use);

        CaseType user_defined_class_type = new CaseType("user_defined_class_type", "class_type", 49040938);
        typeSystem.addType(user_defined_class_type);

        CaseType value_clause = new CaseType("value_clause", "clause", 25716814);
        typeSystem.addType(value_clause);
        value_clause.addAttribute("literal", "literal", 81581247);
        value_clause.addAttribute("through", "literal", 18358696);

        CaseType varying = new CaseType("varying", "phrase", 20820427);
        typeSystem.addType(varying);
        varying.addAttribute("operand", "identifier", 15567423);
        varying.addAttribute("until", "until", 41105173);
        varying.addAttribute("after_list", "after_list");

        CaseType when_branch = new CaseType("when_branch", "branch", 64333936);
        typeSystem.addType(when_branch);
        when_branch.addAttribute("objects", "when_object_list");

        UnionType when_object = new UnionType("when_object", "arithmetic_expr", "condition_expr", "identifier", "literal", "relation_object_expr");
        typeSystem.addType(when_object);

        ListType when_object_list = new ListType("when_object_list", "when_object");
        typeSystem.addType(when_object_list);

        CaseType when_other_branch = new CaseType("when_other_branch", "branch", 49811885);
        typeSystem.addType(when_other_branch);

        CaseType with_data_branch = new CaseType("with_data_branch", "branch", 62002513);
        typeSystem.addType(with_data_branch);

        CaseType working_storage_section = new CaseType("working_storage_section", "unit", 23422104);
        typeSystem.addType(working_storage_section);
        working_storage_section.addAttribute("entries", "description_entry_list");

        CaseType write = new CaseType("write", "stmt", 71916782);
        typeSystem.addType(write);
        write.addAttribute("file", "file_reference", 94537106);
        write.addAttribute("record", "identifier", 18063713);
        write.addAttribute("invalid_key", "invalid_key_branch", 38268067);
        write.addAttribute("not_invalid_key", "not_invalid_key_branch", 50171949);
        write.addAttribute("at_end", "at_end_branch", 72396675);
        write.addAttribute("not_at_end", "not_at_end_branch", 60202861);
        write.addAttribute("at_end_of_page", "at_end_of_page_branch", 88262394);
        write.addAttribute("not_at_end_of_page", "not_at_end_of_page_branch", 6939967);
        write.addAttribute("scope_terminator", "scope_terminator", 53379696);

        CaseType zero_expr = new CaseType("zero_expr", "expr", 21025711);
        typeSystem.addType(zero_expr);

        // Relations ...

        Partition abbr_not_sign_condition_expr_sign_type_partition = new Partition("abbr_not_sign_condition_expr_sign_type", abbr_not_sign_condition_expr.getAttribute("sign_type").getTypeName());
        abbr_not_sign_condition_expr_sign_type_partition.setParentColumn("id");
        abbr_not_sign_condition_expr_sign_type_partition.setValueColumn("sign_type");
        abbr_not_sign_condition_expr_sign_type_partition.setRelationName("abbr_not_sign_condition_expr_sign_type");
        abbr_not_sign_condition_expr.getAttribute("sign_type").setTypeName("abbr_not_sign_condition_expr_sign_type");
        typeSystem.addType(abbr_not_sign_condition_expr_sign_type_partition);

        Relation abbr_not_sign_condition_expr_sign_type_relation = new Relation("abbr_not_sign_condition_expr_sign_type");
        dbScheme.addRelation(abbr_not_sign_condition_expr_sign_type_relation);
        abbr_not_sign_condition_expr_sign_type_relation.addColumn("id", DBType.INT);
        abbr_not_sign_condition_expr_sign_type_relation.addColumn("idx", DBType.INT);
        abbr_not_sign_condition_expr_sign_type_relation.addColumn("sign_type", DBType.VARCHAR);

        Partition abbr_sign_condition_expr_sign_type_partition = new Partition("abbr_sign_condition_expr_sign_type", abbr_sign_condition_expr.getAttribute("sign_type").getTypeName());
        abbr_sign_condition_expr_sign_type_partition.setParentColumn("id");
        abbr_sign_condition_expr_sign_type_partition.setValueColumn("sign_type");
        abbr_sign_condition_expr_sign_type_partition.setRelationName("abbr_sign_condition_expr_sign_type");
        abbr_sign_condition_expr.getAttribute("sign_type").setTypeName("abbr_sign_condition_expr_sign_type");
        typeSystem.addType(abbr_sign_condition_expr_sign_type_partition);

        Relation abbr_sign_condition_expr_sign_type_relation = new Relation("abbr_sign_condition_expr_sign_type");
        dbScheme.addRelation(abbr_sign_condition_expr_sign_type_relation);
        abbr_sign_condition_expr_sign_type_relation.addColumn("id", DBType.INT);
        abbr_sign_condition_expr_sign_type_relation.addColumn("idx", DBType.INT);
        abbr_sign_condition_expr_sign_type_relation.addColumn("sign_type", DBType.VARCHAR);

        after_list.setRelationName("after_list");
        Relation after_list_relation = new Relation("after_list");
        dbScheme.addRelation(after_list_relation);
        after_list_relation.addColumn("id", DBType.INT);
        after_list_relation.addColumn("parent", DBType.INT);

        alteration_clause_list.setRelationName("alteration_clause_list");
        Relation alteration_clause_list_relation = new Relation("alteration_clause_list");
        dbScheme.addRelation(alteration_clause_list_relation);
        alteration_clause_list_relation.addColumn("id", DBType.INT);
        alteration_clause_list_relation.addColumn("parent", DBType.INT);

        argument_list.setRelationName("argument_list");
        Relation argument_list_relation = new Relation("argument_list");
        dbScheme.addRelation(argument_list_relation);
        argument_list_relation.addColumn("id", DBType.INT);
        argument_list_relation.addColumn("parent", DBType.INT);

        Partition block_contains_clause_minimum_size_partition = new Partition("block_contains_clause_minimum_size", block_contains_clause.getAttribute("minimum_size").getTypeName());
        block_contains_clause_minimum_size_partition.setParentColumn("id");
        block_contains_clause_minimum_size_partition.setValueColumn("minimum_size");
        block_contains_clause_minimum_size_partition.setRelationName("block_contains_clause_minimum_size");
        block_contains_clause.getAttribute("minimum_size").setTypeName("block_contains_clause_minimum_size");
        typeSystem.addType(block_contains_clause_minimum_size_partition);

        Relation block_contains_clause_minimum_size_relation = new Relation("block_contains_clause_minimum_size");
        dbScheme.addRelation(block_contains_clause_minimum_size_relation);
        block_contains_clause_minimum_size_relation.addColumn("id", DBType.INT);
        block_contains_clause_minimum_size_relation.addColumn("idx", DBType.INT);
        block_contains_clause_minimum_size_relation.addColumn("minimum_size", DBType.INT);

        Partition block_contains_clause_maximum_size_partition = new Partition("block_contains_clause_maximum_size", block_contains_clause.getAttribute("maximum_size").getTypeName());
        block_contains_clause_maximum_size_partition.setParentColumn("id");
        block_contains_clause_maximum_size_partition.setValueColumn("maximum_size");
        block_contains_clause_maximum_size_partition.setRelationName("block_contains_clause_maximum_size");
        block_contains_clause.getAttribute("maximum_size").setTypeName("block_contains_clause_maximum_size");
        typeSystem.addType(block_contains_clause_maximum_size_partition);

        Relation block_contains_clause_maximum_size_relation = new Relation("block_contains_clause_maximum_size");
        dbScheme.addRelation(block_contains_clause_maximum_size_relation);
        block_contains_clause_maximum_size_relation.addColumn("id", DBType.INT);
        block_contains_clause_maximum_size_relation.addColumn("idx", DBType.INT);
        block_contains_clause_maximum_size_relation.addColumn("maximum_size", DBType.INT);

        branch.setRelationName("branch");
        Relation branch_relation = new Relation("branch");
        dbScheme.addRelation(branch_relation);
        branch_relation.addColumn("id", DBType.INT);
        branch_relation.addColumn("kind", DBType.INT);
        branch_relation.addColumn("parent", DBType.INT);
        branch_relation.addColumn("idx", DBType.INT);

        branch_list.setRelationName("branch_list");
        Relation branch_list_relation = new Relation("branch_list");
        dbScheme.addRelation(branch_list_relation);
        branch_list_relation.addColumn("id", DBType.INT);
        branch_list_relation.addColumn("parent", DBType.INT);

        call_arg.setRelationName("call_arg");
        Relation call_arg_relation = new Relation("call_arg");
        dbScheme.addRelation(call_arg_relation);
        call_arg_relation.addColumn("id", DBType.INT);
        call_arg_relation.addColumn("kind", DBType.INT);
        call_arg_relation.addColumn("parent", DBType.INT);
        call_arg_relation.addColumn("idx", DBType.INT);

        call_arg_list.setRelationName("call_arg_list");
        Relation call_arg_list_relation = new Relation("call_arg_list");
        dbScheme.addRelation(call_arg_list_relation);
        call_arg_list_relation.addColumn("id", DBType.INT);
        call_arg_list_relation.addColumn("parent", DBType.INT);

        Partition cics_command_partition = new Partition("cics_command", cics.getAttribute("command").getTypeName());
        cics_command_partition.setParentColumn("id");
        cics_command_partition.setValueColumn("command");
        cics_command_partition.setRelationName("cics_command");
        cics.getAttribute("command").setTypeName("cics_command");
        typeSystem.addType(cics_command_partition);

        Relation cics_command_relation = new Relation("cics_command");
        dbScheme.addRelation(cics_command_relation);
        cics_command_relation.addColumn("id", DBType.INT);
        cics_command_relation.addColumn("idx", DBType.INT);
        cics_command_relation.addColumn("command", DBType.VARCHAR);

        Partition cics_option_reference_value_partition = new Partition("cics_option_reference_value", cics_option_reference.getAttribute("value").getTypeName());
        cics_option_reference_value_partition.setParentColumn("id");
        cics_option_reference_value_partition.setValueColumn("value");
        cics_option_reference_value_partition.setRelationName("cics_option_reference_value");
        cics_option_reference.getAttribute("value").setTypeName("cics_option_reference_value");
        typeSystem.addType(cics_option_reference_value_partition);

        Relation cics_option_reference_value_relation = new Relation("cics_option_reference_value");
        dbScheme.addRelation(cics_option_reference_value_relation);
        cics_option_reference_value_relation.addColumn("id", DBType.INT);
        cics_option_reference_value_relation.addColumn("idx", DBType.INT);
        cics_option_reference_value_relation.addColumn("value", DBType.VARCHAR);

        class_type.setRelationName("class_type");
        Relation class_type_relation = new Relation("class_type");
        dbScheme.addRelation(class_type_relation);
        class_type_relation.addColumn("id", DBType.INT);
        class_type_relation.addColumn("kind", DBType.INT);
        class_type_relation.addColumn("parent", DBType.INT);

        Partition class_type_name_partition = new Partition("class_type_name", class_type.getAttribute("name").getTypeName());
        class_type_name_partition.setParentColumn("id");
        class_type_name_partition.setValueColumn("name");
        class_type_name_partition.setRelationName("class_type_name");
        class_type.getAttribute("name").setTypeName("class_type_name");
        typeSystem.addType(class_type_name_partition);

        Relation class_type_name_relation = new Relation("class_type_name");
        dbScheme.addRelation(class_type_name_relation);
        class_type_name_relation.addColumn("id", DBType.INT);
        class_type_name_relation.addColumn("idx", DBType.INT);
        class_type_name_relation.addColumn("name", DBType.VARCHAR);

        clause.setRelationName("clause");
        Relation clause_relation = new Relation("clause");
        dbScheme.addRelation(clause_relation);
        clause_relation.addColumn("id", DBType.INT);
        clause_relation.addColumn("kind", DBType.INT);
        clause_relation.addColumn("parent", DBType.INT);
        clause_relation.addColumn("idx", DBType.INT);

        comment.setRelationName("comment");
        Relation comment_relation = new Relation("comment");
        dbScheme.addRelation(comment_relation);
        comment_relation.addColumn("id", DBType.INT);
        comment_relation.addColumn("kind", DBType.INT);

        Partition comment_text_partition = new Partition("comment_text", comment.getAttribute("text").getTypeName());
        comment_text_partition.setParentColumn("id");
        comment_text_partition.setValueColumn("text");
        comment_text_partition.setRelationName("comment_text");
        comment.getAttribute("text").setTypeName("comment_text");
        typeSystem.addType(comment_text_partition);

        Relation comment_text_relation = new Relation("comment_text");
        dbScheme.addRelation(comment_text_relation);
        comment_text_relation.addColumn("id", DBType.INT);
        comment_text_relation.addColumn("idx", DBType.INT);
        comment_text_relation.addColumn("text", DBType.VARCHAR);

        Partition constant_entry_name_partition = new Partition("constant_entry_name", constant_entry.getAttribute("name").getTypeName());
        constant_entry_name_partition.setParentColumn("id");
        constant_entry_name_partition.setValueColumn("name");
        constant_entry_name_partition.setRelationName("constant_entry_name");
        constant_entry.getAttribute("name").setTypeName("constant_entry_name");
        typeSystem.addType(constant_entry_name_partition);

        Relation constant_entry_name_relation = new Relation("constant_entry_name");
        dbScheme.addRelation(constant_entry_name_relation);
        constant_entry_name_relation.addColumn("id", DBType.INT);
        constant_entry_name_relation.addColumn("idx", DBType.INT);
        constant_entry_name_relation.addColumn("name", DBType.VARCHAR);

        Partition constant_entry_level_number_partition = new Partition("constant_entry_level_number", constant_entry.getAttribute("level_number").getTypeName());
        constant_entry_level_number_partition.setParentColumn("id");
        constant_entry_level_number_partition.setValueColumn("level_number");
        constant_entry_level_number_partition.setRelationName("constant_entry_level_number");
        constant_entry.getAttribute("level_number").setTypeName("constant_entry_level_number");
        typeSystem.addType(constant_entry_level_number_partition);

        Relation constant_entry_level_number_relation = new Relation("constant_entry_level_number");
        dbScheme.addRelation(constant_entry_level_number_relation);
        constant_entry_level_number_relation.addColumn("id", DBType.INT);
        constant_entry_level_number_relation.addColumn("idx", DBType.INT);
        constant_entry_level_number_relation.addColumn("level_number", DBType.INT);

        Partition copy_text_name_partition = new Partition("copy_text_name", copy.getAttribute("text_name").getTypeName());
        copy_text_name_partition.setParentColumn("id");
        copy_text_name_partition.setValueColumn("text_name");
        copy_text_name_partition.setRelationName("copy_text_name");
        copy.getAttribute("text_name").setTypeName("copy_text_name");
        typeSystem.addType(copy_text_name_partition);

        Relation copy_text_name_relation = new Relation("copy_text_name");
        dbScheme.addRelation(copy_text_name_relation);
        copy_text_name_relation.addColumn("id", DBType.INT);
        copy_text_name_relation.addColumn("idx", DBType.INT);
        copy_text_name_relation.addColumn("text_name", DBType.VARCHAR);

        Partition copy_library_name_partition = new Partition("copy_library_name", copy.getAttribute("library_name").getTypeName());
        copy_library_name_partition.setParentColumn("id");
        copy_library_name_partition.setValueColumn("library_name");
        copy_library_name_partition.setRelationName("copy_library_name");
        copy.getAttribute("library_name").setTypeName("copy_library_name");
        typeSystem.addType(copy_library_name_partition);

        Relation copy_library_name_relation = new Relation("copy_library_name");
        dbScheme.addRelation(copy_library_name_relation);
        copy_library_name_relation.addColumn("id", DBType.INT);
        copy_library_name_relation.addColumn("idx", DBType.INT);
        copy_library_name_relation.addColumn("library_name", DBType.VARCHAR);

        Partition data_description_entry_name_partition = new Partition("data_description_entry_name", data_description_entry.getAttribute("name").getTypeName());
        data_description_entry_name_partition.setParentColumn("id");
        data_description_entry_name_partition.setValueColumn("name");
        data_description_entry_name_partition.setRelationName("data_description_entry_name");
        data_description_entry.getAttribute("name").setTypeName("data_description_entry_name");
        typeSystem.addType(data_description_entry_name_partition);

        Relation data_description_entry_name_relation = new Relation("data_description_entry_name");
        dbScheme.addRelation(data_description_entry_name_relation);
        data_description_entry_name_relation.addColumn("id", DBType.INT);
        data_description_entry_name_relation.addColumn("idx", DBType.INT);
        data_description_entry_name_relation.addColumn("name", DBType.VARCHAR);

        Partition data_description_entry_level_number_partition = new Partition("data_description_entry_level_number", data_description_entry.getAttribute("level_number").getTypeName());
        data_description_entry_level_number_partition.setParentColumn("id");
        data_description_entry_level_number_partition.setValueColumn("level_number");
        data_description_entry_level_number_partition.setRelationName("data_description_entry_level_number");
        data_description_entry.getAttribute("level_number").setTypeName("data_description_entry_level_number");
        typeSystem.addType(data_description_entry_level_number_partition);

        Relation data_description_entry_level_number_relation = new Relation("data_description_entry_level_number");
        dbScheme.addRelation(data_description_entry_level_number_relation);
        data_description_entry_level_number_relation.addColumn("id", DBType.INT);
        data_description_entry_level_number_relation.addColumn("idx", DBType.INT);
        data_description_entry_level_number_relation.addColumn("level_number", DBType.INT);

        Partition data_reference_name_partition = new Partition("data_reference_name", data_reference.getAttribute("name").getTypeName());
        data_reference_name_partition.setParentColumn("id");
        data_reference_name_partition.setValueColumn("name");
        data_reference_name_partition.setRelationName("data_reference_name");
        data_reference.getAttribute("name").setTypeName("data_reference_name");
        typeSystem.addType(data_reference_name_partition);

        Relation data_reference_name_relation = new Relation("data_reference_name");
        dbScheme.addRelation(data_reference_name_relation);
        data_reference_name_relation.addColumn("id", DBType.INT);
        data_reference_name_relation.addColumn("idx", DBType.INT);
        data_reference_name_relation.addColumn("name", DBType.VARCHAR);

        description_entry.setRelationName("description_entry");
        Relation description_entry_relation = new Relation("description_entry");
        dbScheme.addRelation(description_entry_relation);
        description_entry_relation.addColumn("id", DBType.INT);
        description_entry_relation.addColumn("kind", DBType.INT);
        description_entry_relation.addColumn("parent", DBType.INT);
        description_entry_relation.addColumn("idx", DBType.INT);

        Partition description_entry_name_partition = new Partition("description_entry_name", description_entry.getAttribute("name").getTypeName());
        description_entry_name_partition.setParentColumn("id");
        description_entry_name_partition.setValueColumn("name");
        description_entry_name_partition.setRelationName("description_entry_name");
        description_entry.getAttribute("name").setTypeName("description_entry_name");
        typeSystem.addType(description_entry_name_partition);

        Relation description_entry_name_relation = new Relation("description_entry_name");
        dbScheme.addRelation(description_entry_name_relation);
        description_entry_name_relation.addColumn("id", DBType.INT);
        description_entry_name_relation.addColumn("idx", DBType.INT);
        description_entry_name_relation.addColumn("name", DBType.VARCHAR);

        description_entry_list.setRelationName("description_entry_list");
        Relation description_entry_list_relation = new Relation("description_entry_list");
        dbScheme.addRelation(description_entry_list_relation);
        description_entry_list_relation.addColumn("id", DBType.INT);
        description_entry_list_relation.addColumn("parent", DBType.INT);

        directive.setRelationName("directive");
        Relation directive_relation = new Relation("directive");
        dbScheme.addRelation(directive_relation);
        directive_relation.addColumn("id", DBType.INT);
        directive_relation.addColumn("kind", DBType.INT);
        directive_relation.addColumn("parent", DBType.INT);
        directive_relation.addColumn("idx", DBType.INT);

        directive_list.setRelationName("directive_list");
        Relation directive_list_relation = new Relation("directive_list");
        dbScheme.addRelation(directive_list_relation);
        directive_list_relation.addColumn("id", DBType.INT);
        directive_list_relation.addColumn("parent", DBType.INT);

        evaluate_subject_list.setRelationName("evaluate_subject_list");
        Relation evaluate_subject_list_relation = new Relation("evaluate_subject_list");
        dbScheme.addRelation(evaluate_subject_list_relation);
        evaluate_subject_list_relation.addColumn("id", DBType.INT);
        evaluate_subject_list_relation.addColumn("parent", DBType.INT);

        Partition exit_endpoint_partition = new Partition("exit_endpoint", exit.getAttribute("endpoint").getTypeName());
        exit_endpoint_partition.setParentColumn("id");
        exit_endpoint_partition.setValueColumn("endpoint");
        exit_endpoint_partition.setRelationName("exit_endpoint");
        exit.getAttribute("endpoint").setTypeName("exit_endpoint");
        typeSystem.addType(exit_endpoint_partition);

        Relation exit_endpoint_relation = new Relation("exit_endpoint");
        dbScheme.addRelation(exit_endpoint_relation);
        exit_endpoint_relation.addColumn("id", DBType.INT);
        exit_endpoint_relation.addColumn("idx", DBType.INT);
        exit_endpoint_relation.addColumn("endpoint", DBType.VARCHAR);

        expr.setRelationName("expr");
        Relation expr_relation = new Relation("expr");
        dbScheme.addRelation(expr_relation);
        expr_relation.addColumn("id", DBType.INT);
        expr_relation.addColumn("kind", DBType.INT);
        expr_relation.addColumn("parent", DBType.INT);
        expr_relation.addColumn("idx", DBType.INT);

        Partition figurative_constant_expr_value_partition = new Partition("figurative_constant_expr_value", figurative_constant_expr.getAttribute("value").getTypeName());
        figurative_constant_expr_value_partition.setParentColumn("id");
        figurative_constant_expr_value_partition.setValueColumn("value");
        figurative_constant_expr_value_partition.setRelationName("figurative_constant_expr_value");
        figurative_constant_expr.getAttribute("value").setTypeName("figurative_constant_expr_value");
        typeSystem.addType(figurative_constant_expr_value_partition);

        Relation figurative_constant_expr_value_relation = new Relation("figurative_constant_expr_value");
        dbScheme.addRelation(figurative_constant_expr_value_relation);
        figurative_constant_expr_value_relation.addColumn("id", DBType.INT);
        figurative_constant_expr_value_relation.addColumn("idx", DBType.INT);
        figurative_constant_expr_value_relation.addColumn("value", DBType.VARCHAR);

        Partition file_control_entry_name_partition = new Partition("file_control_entry_name", file_control_entry.getAttribute("name").getTypeName());
        file_control_entry_name_partition.setParentColumn("id");
        file_control_entry_name_partition.setValueColumn("name");
        file_control_entry_name_partition.setRelationName("file_control_entry_name");
        file_control_entry.getAttribute("name").setTypeName("file_control_entry_name");
        typeSystem.addType(file_control_entry_name_partition);

        Relation file_control_entry_name_relation = new Relation("file_control_entry_name");
        dbScheme.addRelation(file_control_entry_name_relation);
        file_control_entry_name_relation.addColumn("id", DBType.INT);
        file_control_entry_name_relation.addColumn("idx", DBType.INT);
        file_control_entry_name_relation.addColumn("name", DBType.VARCHAR);

        file_control_entry_list.setRelationName("file_control_entry_list");
        Relation file_control_entry_list_relation = new Relation("file_control_entry_list");
        dbScheme.addRelation(file_control_entry_list_relation);
        file_control_entry_list_relation.addColumn("id", DBType.INT);
        file_control_entry_list_relation.addColumn("parent", DBType.INT);

        Partition file_description_entry_name_partition = new Partition("file_description_entry_name", file_description_entry.getAttribute("name").getTypeName());
        file_description_entry_name_partition.setParentColumn("id");
        file_description_entry_name_partition.setValueColumn("name");
        file_description_entry_name_partition.setRelationName("file_description_entry_name");
        file_description_entry.getAttribute("name").setTypeName("file_description_entry_name");
        typeSystem.addType(file_description_entry_name_partition);

        Relation file_description_entry_name_relation = new Relation("file_description_entry_name");
        dbScheme.addRelation(file_description_entry_name_relation);
        file_description_entry_name_relation.addColumn("id", DBType.INT);
        file_description_entry_name_relation.addColumn("idx", DBType.INT);
        file_description_entry_name_relation.addColumn("name", DBType.VARCHAR);

        Partition file_reference_name_partition = new Partition("file_reference_name", file_reference.getAttribute("name").getTypeName());
        file_reference_name_partition.setParentColumn("id");
        file_reference_name_partition.setValueColumn("name");
        file_reference_name_partition.setRelationName("file_reference_name");
        file_reference.getAttribute("name").setTypeName("file_reference_name");
        typeSystem.addType(file_reference_name_partition);

        Relation file_reference_name_relation = new Relation("file_reference_name");
        dbScheme.addRelation(file_reference_name_relation);
        file_reference_name_relation.addColumn("id", DBType.INT);
        file_reference_name_relation.addColumn("idx", DBType.INT);
        file_reference_name_relation.addColumn("name", DBType.VARCHAR);

        file_reference_list.setRelationName("file_reference_list");
        Relation file_reference_list_relation = new Relation("file_reference_list");
        dbScheme.addRelation(file_reference_list_relation);
        file_reference_list_relation.addColumn("id", DBType.INT);
        file_reference_list_relation.addColumn("parent", DBType.INT);
        file_reference_list_relation.addColumn("idx", DBType.INT);

        Partition function_identifier_name_partition = new Partition("function_identifier_name", function_identifier.getAttribute("name").getTypeName());
        function_identifier_name_partition.setParentColumn("id");
        function_identifier_name_partition.setValueColumn("name");
        function_identifier_name_partition.setRelationName("function_identifier_name");
        function_identifier.getAttribute("name").setTypeName("function_identifier_name");
        typeSystem.addType(function_identifier_name_partition);

        Relation function_identifier_name_relation = new Relation("function_identifier_name");
        dbScheme.addRelation(function_identifier_name_relation);
        function_identifier_name_relation.addColumn("id", DBType.INT);
        function_identifier_name_relation.addColumn("idx", DBType.INT);
        function_identifier_name_relation.addColumn("name", DBType.VARCHAR);

        header.setRelationName("header");
        Relation header_relation = new Relation("header");
        dbScheme.addRelation(header_relation);
        header_relation.addColumn("id", DBType.INT);
        header_relation.addColumn("kind", DBType.INT);
        header_relation.addColumn("parent", DBType.INT);

        Partition identification_division_name_partition = new Partition("identification_division_name", identification_division.getAttribute("name").getTypeName());
        identification_division_name_partition.setParentColumn("id");
        identification_division_name_partition.setValueColumn("name");
        identification_division_name_partition.setRelationName("identification_division_name");
        identification_division.getAttribute("name").setTypeName("identification_division_name");
        typeSystem.addType(identification_division_name_partition);

        Relation identification_division_name_relation = new Relation("identification_division_name");
        dbScheme.addRelation(identification_division_name_relation);
        identification_division_name_relation.addColumn("id", DBType.INT);
        identification_division_name_relation.addColumn("idx", DBType.INT);
        identification_division_name_relation.addColumn("name", DBType.VARCHAR);

        identifier.setRelationName("identifier");
        Relation identifier_relation = new Relation("identifier");
        dbScheme.addRelation(identifier_relation);
        identifier_relation.addColumn("id", DBType.INT);
        identifier_relation.addColumn("kind", DBType.INT);
        identifier_relation.addColumn("parent", DBType.INT);
        identifier_relation.addColumn("idx", DBType.INT);

        identifier_list.setRelationName("identifier_list");
        Relation identifier_list_relation = new Relation("identifier_list");
        dbScheme.addRelation(identifier_list_relation);
        identifier_list_relation.addColumn("id", DBType.INT);
        identifier_list_relation.addColumn("parent", DBType.INT);
        identifier_list_relation.addColumn("idx", DBType.INT);

        indices_list.setRelationName("indices_list");
        Relation indices_list_relation = new Relation("indices_list");
        dbScheme.addRelation(indices_list_relation);
        indices_list_relation.addColumn("id", DBType.INT);
        indices_list_relation.addColumn("parent", DBType.INT);

        Partition indices_list_list_partition = new Partition("indices_list_list", indices_list.getItemTypeName());
        indices_list_list_partition.setParentColumn("parent");
        indices_list_list_partition.setValueColumn("item");
        indices_list_list_partition.setRelationName("indices_list_list");
        indices_list.setItemTypeName("indices_list_list");
        typeSystem.addType(indices_list_list_partition);

        Relation indices_list_list_relation = new Relation("indices_list_list");
        dbScheme.addRelation(indices_list_list_relation);
        indices_list_list_relation.addColumn("parent", DBType.INT);
        indices_list_list_relation.addColumn("idx", DBType.INT);
        indices_list_list_relation.addColumn("item", DBType.VARCHAR);

        literal.setRelationName("literal");
        Relation literal_relation = new Relation("literal");
        dbScheme.addRelation(literal_relation);
        literal_relation.addColumn("id", DBType.INT);
        literal_relation.addColumn("kind", DBType.INT);
        literal_relation.addColumn("parent", DBType.INT);
        literal_relation.addColumn("idx", DBType.INT);

        Partition literal_value_partition = new Partition("literal_value", literal.getAttribute("value").getTypeName());
        literal_value_partition.setParentColumn("id");
        literal_value_partition.setValueColumn("value");
        literal_value_partition.setRelationName("literal_value");
        literal.getAttribute("value").setTypeName("literal_value");
        typeSystem.addType(literal_value_partition);

        Relation literal_value_relation = new Relation("literal_value");
        dbScheme.addRelation(literal_value_relation);
        literal_value_relation.addColumn("id", DBType.INT);
        literal_value_relation.addColumn("idx", DBType.INT);
        literal_value_relation.addColumn("value", DBType.VARCHAR);

        Partition m_f_set_statement_format_partition = new Partition("m_f_set_statement_format", m_f_set_statement.getAttribute("format").getTypeName());
        m_f_set_statement_format_partition.setParentColumn("id");
        m_f_set_statement_format_partition.setValueColumn("format");
        m_f_set_statement_format_partition.setRelationName("m_f_set_statement_format");
        m_f_set_statement.getAttribute("format").setTypeName("m_f_set_statement_format");
        typeSystem.addType(m_f_set_statement_format_partition);

        Relation m_f_set_statement_format_relation = new Relation("m_f_set_statement_format");
        dbScheme.addRelation(m_f_set_statement_format_relation);
        m_f_set_statement_format_relation.addColumn("id", DBType.INT);
        m_f_set_statement_format_relation.addColumn("idx", DBType.INT);
        m_f_set_statement_format_relation.addColumn("format", DBType.VARCHAR);

        meta.setRelationName("meta");
        Relation meta_relation = new Relation("meta");
        dbScheme.addRelation(meta_relation);
        meta_relation.addColumn("id", DBType.INT);
        meta_relation.addColumn("kind", DBType.INT);
        meta_relation.addColumn("parent", DBType.INT);

        Partition not_omitted_condition_expr_data_name_partition = new Partition("not_omitted_condition_expr_data_name", not_omitted_condition_expr.getAttribute("data_name").getTypeName());
        not_omitted_condition_expr_data_name_partition.setParentColumn("id");
        not_omitted_condition_expr_data_name_partition.setValueColumn("data_name");
        not_omitted_condition_expr_data_name_partition.setRelationName("not_omitted_condition_expr_data_name");
        not_omitted_condition_expr.getAttribute("data_name").setTypeName("not_omitted_condition_expr_data_name");
        typeSystem.addType(not_omitted_condition_expr_data_name_partition);

        Relation not_omitted_condition_expr_data_name_relation = new Relation("not_omitted_condition_expr_data_name");
        dbScheme.addRelation(not_omitted_condition_expr_data_name_relation);
        not_omitted_condition_expr_data_name_relation.addColumn("id", DBType.INT);
        not_omitted_condition_expr_data_name_relation.addColumn("idx", DBType.INT);
        not_omitted_condition_expr_data_name_relation.addColumn("data_name", DBType.VARCHAR);

        Partition not_sign_condition_expr_sign_type_partition = new Partition("not_sign_condition_expr_sign_type", not_sign_condition_expr.getAttribute("sign_type").getTypeName());
        not_sign_condition_expr_sign_type_partition.setParentColumn("id");
        not_sign_condition_expr_sign_type_partition.setValueColumn("sign_type");
        not_sign_condition_expr_sign_type_partition.setRelationName("not_sign_condition_expr_sign_type");
        not_sign_condition_expr.getAttribute("sign_type").setTypeName("not_sign_condition_expr_sign_type");
        typeSystem.addType(not_sign_condition_expr_sign_type_partition);

        Relation not_sign_condition_expr_sign_type_relation = new Relation("not_sign_condition_expr_sign_type");
        dbScheme.addRelation(not_sign_condition_expr_sign_type_relation);
        not_sign_condition_expr_sign_type_relation.addColumn("id", DBType.INT);
        not_sign_condition_expr_sign_type_relation.addColumn("idx", DBType.INT);
        not_sign_condition_expr_sign_type_relation.addColumn("sign_type", DBType.VARCHAR);

        Partition numeric_sign_clause_position_partition = new Partition("numeric_sign_clause_position", numeric_sign_clause.getAttribute("position").getTypeName());
        numeric_sign_clause_position_partition.setParentColumn("id");
        numeric_sign_clause_position_partition.setValueColumn("position");
        numeric_sign_clause_position_partition.setRelationName("numeric_sign_clause_position");
        numeric_sign_clause.getAttribute("position").setTypeName("numeric_sign_clause_position");
        typeSystem.addType(numeric_sign_clause_position_partition);

        Relation numeric_sign_clause_position_relation = new Relation("numeric_sign_clause_position");
        dbScheme.addRelation(numeric_sign_clause_position_relation);
        numeric_sign_clause_position_relation.addColumn("id", DBType.INT);
        numeric_sign_clause_position_relation.addColumn("idx", DBType.INT);
        numeric_sign_clause_position_relation.addColumn("position", DBType.VARCHAR);

        Partition numeric_sign_clause_separate_partition = new Partition("numeric_sign_clause_separate", numeric_sign_clause.getAttribute("separate").getTypeName());
        numeric_sign_clause_separate_partition.setParentColumn("id");
        numeric_sign_clause_separate_partition.setValueColumn("separate");
        numeric_sign_clause_separate_partition.setRelationName("numeric_sign_clause_separate");
        numeric_sign_clause.getAttribute("separate").setTypeName("numeric_sign_clause_separate");
        typeSystem.addType(numeric_sign_clause_separate_partition);

        Relation numeric_sign_clause_separate_relation = new Relation("numeric_sign_clause_separate");
        dbScheme.addRelation(numeric_sign_clause_separate_relation);
        numeric_sign_clause_separate_relation.addColumn("id", DBType.INT);
        numeric_sign_clause_separate_relation.addColumn("idx", DBType.INT);
        numeric_sign_clause_separate_relation.addColumn("separate", DBType.VARCHAR);

        Partition occurs_clause_minimum_partition = new Partition("occurs_clause_minimum", occurs_clause.getAttribute("minimum").getTypeName());
        occurs_clause_minimum_partition.setParentColumn("id");
        occurs_clause_minimum_partition.setValueColumn("minimum");
        occurs_clause_minimum_partition.setRelationName("occurs_clause_minimum");
        occurs_clause.getAttribute("minimum").setTypeName("occurs_clause_minimum");
        typeSystem.addType(occurs_clause_minimum_partition);

        Relation occurs_clause_minimum_relation = new Relation("occurs_clause_minimum");
        dbScheme.addRelation(occurs_clause_minimum_relation);
        occurs_clause_minimum_relation.addColumn("id", DBType.INT);
        occurs_clause_minimum_relation.addColumn("idx", DBType.INT);
        occurs_clause_minimum_relation.addColumn("minimum", DBType.INT);

        Partition occurs_clause_maximum_partition = new Partition("occurs_clause_maximum", occurs_clause.getAttribute("maximum").getTypeName());
        occurs_clause_maximum_partition.setParentColumn("id");
        occurs_clause_maximum_partition.setValueColumn("maximum");
        occurs_clause_maximum_partition.setRelationName("occurs_clause_maximum");
        occurs_clause.getAttribute("maximum").setTypeName("occurs_clause_maximum");
        typeSystem.addType(occurs_clause_maximum_partition);

        Relation occurs_clause_maximum_relation = new Relation("occurs_clause_maximum");
        dbScheme.addRelation(occurs_clause_maximum_relation);
        occurs_clause_maximum_relation.addColumn("id", DBType.INT);
        occurs_clause_maximum_relation.addColumn("idx", DBType.INT);
        occurs_clause_maximum_relation.addColumn("maximum", DBType.INT);

        Partition omitted_condition_expr_data_name_partition = new Partition("omitted_condition_expr_data_name", omitted_condition_expr.getAttribute("data_name").getTypeName());
        omitted_condition_expr_data_name_partition.setParentColumn("id");
        omitted_condition_expr_data_name_partition.setValueColumn("data_name");
        omitted_condition_expr_data_name_partition.setRelationName("omitted_condition_expr_data_name");
        omitted_condition_expr.getAttribute("data_name").setTypeName("omitted_condition_expr_data_name");
        typeSystem.addType(omitted_condition_expr_data_name_partition);

        Relation omitted_condition_expr_data_name_relation = new Relation("omitted_condition_expr_data_name");
        dbScheme.addRelation(omitted_condition_expr_data_name_relation);
        omitted_condition_expr_data_name_relation.addColumn("id", DBType.INT);
        omitted_condition_expr_data_name_relation.addColumn("idx", DBType.INT);
        omitted_condition_expr_data_name_relation.addColumn("data_name", DBType.VARCHAR);

        Partition paragraph_name_partition = new Partition("paragraph_name", paragraph.getAttribute("name").getTypeName());
        paragraph_name_partition.setParentColumn("id");
        paragraph_name_partition.setValueColumn("name");
        paragraph_name_partition.setRelationName("paragraph_name");
        paragraph.getAttribute("name").setTypeName("paragraph_name");
        typeSystem.addType(paragraph_name_partition);

        Relation paragraph_name_relation = new Relation("paragraph_name");
        dbScheme.addRelation(paragraph_name_relation);
        paragraph_name_relation.addColumn("id", DBType.INT);
        paragraph_name_relation.addColumn("idx", DBType.INT);
        paragraph_name_relation.addColumn("name", DBType.VARCHAR);

        paragraph_list.setRelationName("paragraph_list");
        Relation paragraph_list_relation = new Relation("paragraph_list");
        dbScheme.addRelation(paragraph_list_relation);
        paragraph_list_relation.addColumn("id", DBType.INT);
        paragraph_list_relation.addColumn("parent", DBType.INT);

        phrase.setRelationName("phrase");
        Relation phrase_relation = new Relation("phrase");
        dbScheme.addRelation(phrase_relation);
        phrase_relation.addColumn("id", DBType.INT);
        phrase_relation.addColumn("kind", DBType.INT);
        phrase_relation.addColumn("parent", DBType.INT);
        phrase_relation.addColumn("idx", DBType.INT);

        Partition picture_clause_picture_string_partition = new Partition("picture_clause_picture_string", picture_clause.getAttribute("picture_string").getTypeName());
        picture_clause_picture_string_partition.setParentColumn("id");
        picture_clause_picture_string_partition.setValueColumn("picture_string");
        picture_clause_picture_string_partition.setRelationName("picture_clause_picture_string");
        picture_clause.getAttribute("picture_string").setTypeName("picture_clause_picture_string");
        typeSystem.addType(picture_clause_picture_string_partition);

        Relation picture_clause_picture_string_relation = new Relation("picture_clause_picture_string");
        dbScheme.addRelation(picture_clause_picture_string_relation);
        picture_clause_picture_string_relation.addColumn("id", DBType.INT);
        picture_clause_picture_string_relation.addColumn("idx", DBType.INT);
        picture_clause_picture_string_relation.addColumn("picture_string", DBType.VARCHAR);

        Partition picture_clause_normalized_picture_string_partition = new Partition("picture_clause_normalized_picture_string", picture_clause.getAttribute("normalized_picture_string").getTypeName());
        picture_clause_normalized_picture_string_partition.setParentColumn("id");
        picture_clause_normalized_picture_string_partition.setValueColumn("normalized_picture_string");
        picture_clause_normalized_picture_string_partition.setRelationName("picture_clause_normalized_picture_string");
        picture_clause.getAttribute("normalized_picture_string").setTypeName("picture_clause_normalized_picture_string");
        typeSystem.addType(picture_clause_normalized_picture_string_partition);

        Relation picture_clause_normalized_picture_string_relation = new Relation("picture_clause_normalized_picture_string");
        dbScheme.addRelation(picture_clause_normalized_picture_string_relation);
        picture_clause_normalized_picture_string_relation.addColumn("id", DBType.INT);
        picture_clause_normalized_picture_string_relation.addColumn("idx", DBType.INT);
        picture_clause_normalized_picture_string_relation.addColumn("normalized_picture_string", DBType.VARCHAR);

        Partition picture_clause_category_partition = new Partition("picture_clause_category", picture_clause.getAttribute("category").getTypeName());
        picture_clause_category_partition.setParentColumn("id");
        picture_clause_category_partition.setValueColumn("category");
        picture_clause_category_partition.setRelationName("picture_clause_category");
        picture_clause.getAttribute("category").setTypeName("picture_clause_category");
        typeSystem.addType(picture_clause_category_partition);

        Relation picture_clause_category_relation = new Relation("picture_clause_category");
        dbScheme.addRelation(picture_clause_category_relation);
        picture_clause_category_relation.addColumn("id", DBType.INT);
        picture_clause_category_relation.addColumn("idx", DBType.INT);
        picture_clause_category_relation.addColumn("category", DBType.VARCHAR);

        Partition predefined_object_value_partition = new Partition("predefined_object_value", predefined_object.getAttribute("value").getTypeName());
        predefined_object_value_partition.setParentColumn("id");
        predefined_object_value_partition.setValueColumn("value");
        predefined_object_value_partition.setRelationName("predefined_object_value");
        predefined_object.getAttribute("value").setTypeName("predefined_object_value");
        typeSystem.addType(predefined_object_value_partition);

        Relation predefined_object_value_relation = new Relation("predefined_object_value");
        dbScheme.addRelation(predefined_object_value_relation);
        predefined_object_value_relation.addColumn("id", DBType.INT);
        predefined_object_value_relation.addColumn("idx", DBType.INT);
        predefined_object_value_relation.addColumn("value", DBType.VARCHAR);

        preprocessing_directive_list.setRelationName("preprocessing_directive_list");
        Relation preprocessing_directive_list_relation = new Relation("preprocessing_directive_list");
        dbScheme.addRelation(preprocessing_directive_list_relation);
        preprocessing_directive_list_relation.addColumn("id", DBType.INT);
        preprocessing_directive_list_relation.addColumn("parent", DBType.INT);

        procedure_division_parameter.setRelationName("procedure_division_parameter");
        Relation procedure_division_parameter_relation = new Relation("procedure_division_parameter");
        dbScheme.addRelation(procedure_division_parameter_relation);
        procedure_division_parameter_relation.addColumn("id", DBType.INT);
        procedure_division_parameter_relation.addColumn("kind", DBType.INT);
        procedure_division_parameter_relation.addColumn("parent", DBType.INT);
        procedure_division_parameter_relation.addColumn("idx", DBType.INT);

        procedure_division_parameter_list.setRelationName("procedure_division_parameter_list");
        Relation procedure_division_parameter_list_relation = new Relation("procedure_division_parameter_list");
        dbScheme.addRelation(procedure_division_parameter_list_relation);
        procedure_division_parameter_list_relation.addColumn("id", DBType.INT);
        procedure_division_parameter_list_relation.addColumn("parent", DBType.INT);

        Partition procedure_reference_name_partition = new Partition("procedure_reference_name", procedure_reference.getAttribute("name").getTypeName());
        procedure_reference_name_partition.setParentColumn("id");
        procedure_reference_name_partition.setValueColumn("name");
        procedure_reference_name_partition.setRelationName("procedure_reference_name");
        procedure_reference.getAttribute("name").setTypeName("procedure_reference_name");
        typeSystem.addType(procedure_reference_name_partition);

        Relation procedure_reference_name_relation = new Relation("procedure_reference_name");
        dbScheme.addRelation(procedure_reference_name_relation);
        procedure_reference_name_relation.addColumn("id", DBType.INT);
        procedure_reference_name_relation.addColumn("idx", DBType.INT);
        procedure_reference_name_relation.addColumn("name", DBType.VARCHAR);

        Partition procedure_reference_qualification_partition = new Partition("procedure_reference_qualification", procedure_reference.getAttribute("qualification").getTypeName());
        procedure_reference_qualification_partition.setParentColumn("id");
        procedure_reference_qualification_partition.setValueColumn("qualification");
        procedure_reference_qualification_partition.setRelationName("procedure_reference_qualification");
        procedure_reference.getAttribute("qualification").setTypeName("procedure_reference_qualification");
        typeSystem.addType(procedure_reference_qualification_partition);

        Relation procedure_reference_qualification_relation = new Relation("procedure_reference_qualification");
        dbScheme.addRelation(procedure_reference_qualification_relation);
        procedure_reference_qualification_relation.addColumn("id", DBType.INT);
        procedure_reference_qualification_relation.addColumn("idx", DBType.INT);
        procedure_reference_qualification_relation.addColumn("qualification", DBType.VARCHAR);

        procedure_reference_list.setRelationName("procedure_reference_list");
        Relation procedure_reference_list_relation = new Relation("procedure_reference_list");
        dbScheme.addRelation(procedure_reference_list_relation);
        procedure_reference_list_relation.addColumn("id", DBType.INT);
        procedure_reference_list_relation.addColumn("parent", DBType.INT);

        Partition qualified_linage_counter_qualification_partition = new Partition("qualified_linage_counter_qualification", qualified_linage_counter.getAttribute("qualification").getTypeName());
        qualified_linage_counter_qualification_partition.setParentColumn("id");
        qualified_linage_counter_qualification_partition.setValueColumn("qualification");
        qualified_linage_counter_qualification_partition.setRelationName("qualified_linage_counter_qualification");
        qualified_linage_counter.getAttribute("qualification").setTypeName("qualified_linage_counter_qualification");
        typeSystem.addType(qualified_linage_counter_qualification_partition);

        Relation qualified_linage_counter_qualification_relation = new Relation("qualified_linage_counter_qualification");
        dbScheme.addRelation(qualified_linage_counter_qualification_relation);
        qualified_linage_counter_qualification_relation.addColumn("id", DBType.INT);
        qualified_linage_counter_qualification_relation.addColumn("idx", DBType.INT);
        qualified_linage_counter_qualification_relation.addColumn("qualification", DBType.VARCHAR);

        Partition qualified_line_counter_qualification_partition = new Partition("qualified_line_counter_qualification", qualified_line_counter.getAttribute("qualification").getTypeName());
        qualified_line_counter_qualification_partition.setParentColumn("id");
        qualified_line_counter_qualification_partition.setValueColumn("qualification");
        qualified_line_counter_qualification_partition.setRelationName("qualified_line_counter_qualification");
        qualified_line_counter.getAttribute("qualification").setTypeName("qualified_line_counter_qualification");
        typeSystem.addType(qualified_line_counter_qualification_partition);

        Relation qualified_line_counter_qualification_relation = new Relation("qualified_line_counter_qualification");
        dbScheme.addRelation(qualified_line_counter_qualification_relation);
        qualified_line_counter_qualification_relation.addColumn("id", DBType.INT);
        qualified_line_counter_qualification_relation.addColumn("idx", DBType.INT);
        qualified_line_counter_qualification_relation.addColumn("qualification", DBType.VARCHAR);

        Partition qualified_page_counter_qualification_partition = new Partition("qualified_page_counter_qualification", qualified_page_counter.getAttribute("qualification").getTypeName());
        qualified_page_counter_qualification_partition.setParentColumn("id");
        qualified_page_counter_qualification_partition.setValueColumn("qualification");
        qualified_page_counter_qualification_partition.setRelationName("qualified_page_counter_qualification");
        qualified_page_counter.getAttribute("qualification").setTypeName("qualified_page_counter_qualification");
        typeSystem.addType(qualified_page_counter_qualification_partition);

        Relation qualified_page_counter_qualification_relation = new Relation("qualified_page_counter_qualification");
        dbScheme.addRelation(qualified_page_counter_qualification_relation);
        qualified_page_counter_qualification_relation.addColumn("id", DBType.INT);
        qualified_page_counter_qualification_relation.addColumn("idx", DBType.INT);
        qualified_page_counter_qualification_relation.addColumn("qualification", DBType.VARCHAR);

        qualifiers_list.setRelationName("qualifiers_list");
        Relation qualifiers_list_relation = new Relation("qualifiers_list");
        dbScheme.addRelation(qualifiers_list_relation);
        qualifiers_list_relation.addColumn("id", DBType.INT);
        qualifiers_list_relation.addColumn("parent", DBType.INT);

        Partition qualifiers_list_list_partition = new Partition("qualifiers_list_list", qualifiers_list.getItemTypeName());
        qualifiers_list_list_partition.setParentColumn("parent");
        qualifiers_list_list_partition.setValueColumn("item");
        qualifiers_list_list_partition.setRelationName("qualifiers_list_list");
        qualifiers_list.setItemTypeName("qualifiers_list_list");
        typeSystem.addType(qualifiers_list_list_partition);

        Relation qualifiers_list_list_relation = new Relation("qualifiers_list_list");
        dbScheme.addRelation(qualifiers_list_list_relation);
        qualifiers_list_list_relation.addColumn("parent", DBType.INT);
        qualifiers_list_list_relation.addColumn("idx", DBType.INT);
        qualifiers_list_list_relation.addColumn("item", DBType.VARCHAR);

        reference.setRelationName("reference");
        Relation reference_relation = new Relation("reference");
        dbScheme.addRelation(reference_relation);
        reference_relation.addColumn("id", DBType.INT);
        reference_relation.addColumn("kind", DBType.INT);
        reference_relation.addColumn("parent", DBType.INT);
        reference_relation.addColumn("idx", DBType.INT);

        reference_modifier_t.setRelationName("reference_modifier_t");
        Relation reference_modifier_t_relation = new Relation("reference_modifier_t");
        dbScheme.addRelation(reference_modifier_t_relation);
        reference_modifier_t_relation.addColumn("id", DBType.INT);
        reference_modifier_t_relation.addColumn("kind", DBType.INT);
        reference_modifier_t_relation.addColumn("parent", DBType.INT);

        relation_operator.setRelationName("relation_operator");
        Relation relation_operator_relation = new Relation("relation_operator");
        dbScheme.addRelation(relation_operator_relation);
        relation_operator_relation.addColumn("id", DBType.INT);
        relation_operator_relation.addColumn("kind", DBType.INT);
        relation_operator_relation.addColumn("parent", DBType.INT);

        Partition relative_subscript_modifier_partition = new Partition("relative_subscript_modifier", relative_subscript.getAttribute("modifier").getTypeName());
        relative_subscript_modifier_partition.setParentColumn("id");
        relative_subscript_modifier_partition.setValueColumn("modifier");
        relative_subscript_modifier_partition.setRelationName("relative_subscript_modifier");
        relative_subscript.getAttribute("modifier").setTypeName("relative_subscript_modifier");
        typeSystem.addType(relative_subscript_modifier_partition);

        Relation relative_subscript_modifier_relation = new Relation("relative_subscript_modifier");
        dbScheme.addRelation(relative_subscript_modifier_relation);
        relative_subscript_modifier_relation.addColumn("id", DBType.INT);
        relative_subscript_modifier_relation.addColumn("idx", DBType.INT);
        relative_subscript_modifier_relation.addColumn("modifier", DBType.INT);

        Partition report_description_entry_name_partition = new Partition("report_description_entry_name", report_description_entry.getAttribute("name").getTypeName());
        report_description_entry_name_partition.setParentColumn("id");
        report_description_entry_name_partition.setValueColumn("name");
        report_description_entry_name_partition.setRelationName("report_description_entry_name");
        report_description_entry.getAttribute("name").setTypeName("report_description_entry_name");
        typeSystem.addType(report_description_entry_name_partition);

        Relation report_description_entry_name_relation = new Relation("report_description_entry_name");
        dbScheme.addRelation(report_description_entry_name_relation);
        report_description_entry_name_relation.addColumn("id", DBType.INT);
        report_description_entry_name_relation.addColumn("idx", DBType.INT);
        report_description_entry_name_relation.addColumn("name", DBType.VARCHAR);

        Partition report_group_description_entry_name_partition = new Partition("report_group_description_entry_name", report_group_description_entry.getAttribute("name").getTypeName());
        report_group_description_entry_name_partition.setParentColumn("id");
        report_group_description_entry_name_partition.setValueColumn("name");
        report_group_description_entry_name_partition.setRelationName("report_group_description_entry_name");
        report_group_description_entry.getAttribute("name").setTypeName("report_group_description_entry_name");
        typeSystem.addType(report_group_description_entry_name_partition);

        Relation report_group_description_entry_name_relation = new Relation("report_group_description_entry_name");
        dbScheme.addRelation(report_group_description_entry_name_relation);
        report_group_description_entry_name_relation.addColumn("id", DBType.INT);
        report_group_description_entry_name_relation.addColumn("idx", DBType.INT);
        report_group_description_entry_name_relation.addColumn("name", DBType.VARCHAR);

        Partition report_group_description_entry_level_number_partition = new Partition("report_group_description_entry_level_number", report_group_description_entry.getAttribute("level_number").getTypeName());
        report_group_description_entry_level_number_partition.setParentColumn("id");
        report_group_description_entry_level_number_partition.setValueColumn("level_number");
        report_group_description_entry_level_number_partition.setRelationName("report_group_description_entry_level_number");
        report_group_description_entry.getAttribute("level_number").setTypeName("report_group_description_entry_level_number");
        typeSystem.addType(report_group_description_entry_level_number_partition);

        Relation report_group_description_entry_level_number_relation = new Relation("report_group_description_entry_level_number");
        dbScheme.addRelation(report_group_description_entry_level_number_relation);
        report_group_description_entry_level_number_relation.addColumn("id", DBType.INT);
        report_group_description_entry_level_number_relation.addColumn("idx", DBType.INT);
        report_group_description_entry_level_number_relation.addColumn("level_number", DBType.INT);

        Partition screen_description_entry_name_partition = new Partition("screen_description_entry_name", screen_description_entry.getAttribute("name").getTypeName());
        screen_description_entry_name_partition.setParentColumn("id");
        screen_description_entry_name_partition.setValueColumn("name");
        screen_description_entry_name_partition.setRelationName("screen_description_entry_name");
        screen_description_entry.getAttribute("name").setTypeName("screen_description_entry_name");
        typeSystem.addType(screen_description_entry_name_partition);

        Relation screen_description_entry_name_relation = new Relation("screen_description_entry_name");
        dbScheme.addRelation(screen_description_entry_name_relation);
        screen_description_entry_name_relation.addColumn("id", DBType.INT);
        screen_description_entry_name_relation.addColumn("idx", DBType.INT);
        screen_description_entry_name_relation.addColumn("name", DBType.VARCHAR);

        Partition screen_description_entry_level_number_partition = new Partition("screen_description_entry_level_number", screen_description_entry.getAttribute("level_number").getTypeName());
        screen_description_entry_level_number_partition.setParentColumn("id");
        screen_description_entry_level_number_partition.setValueColumn("level_number");
        screen_description_entry_level_number_partition.setRelationName("screen_description_entry_level_number");
        screen_description_entry.getAttribute("level_number").setTypeName("screen_description_entry_level_number");
        typeSystem.addType(screen_description_entry_level_number_partition);

        Relation screen_description_entry_level_number_relation = new Relation("screen_description_entry_level_number");
        dbScheme.addRelation(screen_description_entry_level_number_relation);
        screen_description_entry_level_number_relation.addColumn("id", DBType.INT);
        screen_description_entry_level_number_relation.addColumn("idx", DBType.INT);
        screen_description_entry_level_number_relation.addColumn("level_number", DBType.INT);

        Partition section_name_partition = new Partition("section_name", section.getAttribute("name").getTypeName());
        section_name_partition.setParentColumn("id");
        section_name_partition.setValueColumn("name");
        section_name_partition.setRelationName("section_name");
        section.getAttribute("name").setTypeName("section_name");
        typeSystem.addType(section_name_partition);

        Relation section_name_relation = new Relation("section_name");
        dbScheme.addRelation(section_name_relation);
        section_name_relation.addColumn("id", DBType.INT);
        section_name_relation.addColumn("idx", DBType.INT);
        section_name_relation.addColumn("name", DBType.VARCHAR);

        section_list.setRelationName("section_list");
        Relation section_list_relation = new Relation("section_list");
        dbScheme.addRelation(section_list_relation);
        section_list_relation.addColumn("id", DBType.INT);
        section_list_relation.addColumn("parent", DBType.INT);

        sentence_list.setRelationName("sentence_list");
        Relation sentence_list_relation = new Relation("sentence_list");
        dbScheme.addRelation(sentence_list_relation);
        sentence_list_relation.addColumn("id", DBType.INT);
        sentence_list_relation.addColumn("parent", DBType.INT);

        Partition sign_clause_position_partition = new Partition("sign_clause_position", sign_clause.getAttribute("position").getTypeName());
        sign_clause_position_partition.setParentColumn("id");
        sign_clause_position_partition.setValueColumn("position");
        sign_clause_position_partition.setRelationName("sign_clause_position");
        sign_clause.getAttribute("position").setTypeName("sign_clause_position");
        typeSystem.addType(sign_clause_position_partition);

        Relation sign_clause_position_relation = new Relation("sign_clause_position");
        dbScheme.addRelation(sign_clause_position_relation);
        sign_clause_position_relation.addColumn("id", DBType.INT);
        sign_clause_position_relation.addColumn("idx", DBType.INT);
        sign_clause_position_relation.addColumn("position", DBType.VARCHAR);

        Partition sign_clause_separate_partition = new Partition("sign_clause_separate", sign_clause.getAttribute("separate").getTypeName());
        sign_clause_separate_partition.setParentColumn("id");
        sign_clause_separate_partition.setValueColumn("separate");
        sign_clause_separate_partition.setRelationName("sign_clause_separate");
        sign_clause.getAttribute("separate").setTypeName("sign_clause_separate");
        typeSystem.addType(sign_clause_separate_partition);

        Relation sign_clause_separate_relation = new Relation("sign_clause_separate");
        dbScheme.addRelation(sign_clause_separate_relation);
        sign_clause_separate_relation.addColumn("id", DBType.INT);
        sign_clause_separate_relation.addColumn("idx", DBType.INT);
        sign_clause_separate_relation.addColumn("separate", DBType.VARCHAR);

        Partition sign_condition_expr_sign_type_partition = new Partition("sign_condition_expr_sign_type", sign_condition_expr.getAttribute("sign_type").getTypeName());
        sign_condition_expr_sign_type_partition.setParentColumn("id");
        sign_condition_expr_sign_type_partition.setValueColumn("sign_type");
        sign_condition_expr_sign_type_partition.setRelationName("sign_condition_expr_sign_type");
        sign_condition_expr.getAttribute("sign_type").setTypeName("sign_condition_expr_sign_type");
        typeSystem.addType(sign_condition_expr_sign_type_partition);

        Relation sign_condition_expr_sign_type_relation = new Relation("sign_condition_expr_sign_type");
        dbScheme.addRelation(sign_condition_expr_sign_type_relation);
        sign_condition_expr_sign_type_relation.addColumn("id", DBType.INT);
        sign_condition_expr_sign_type_relation.addColumn("idx", DBType.INT);
        sign_condition_expr_sign_type_relation.addColumn("sign_type", DBType.VARCHAR);

        Partition sort_merge_file_description_entry_name_partition = new Partition("sort_merge_file_description_entry_name", sort_merge_file_description_entry.getAttribute("name").getTypeName());
        sort_merge_file_description_entry_name_partition.setParentColumn("id");
        sort_merge_file_description_entry_name_partition.setValueColumn("name");
        sort_merge_file_description_entry_name_partition.setRelationName("sort_merge_file_description_entry_name");
        sort_merge_file_description_entry.getAttribute("name").setTypeName("sort_merge_file_description_entry_name");
        typeSystem.addType(sort_merge_file_description_entry_name_partition);

        Relation sort_merge_file_description_entry_name_relation = new Relation("sort_merge_file_description_entry_name");
        dbScheme.addRelation(sort_merge_file_description_entry_name_relation);
        sort_merge_file_description_entry_name_relation.addColumn("id", DBType.INT);
        sort_merge_file_description_entry_name_relation.addColumn("idx", DBType.INT);
        sort_merge_file_description_entry_name_relation.addColumn("name", DBType.VARCHAR);

        Partition source_format_directive_format_partition = new Partition("source_format_directive_format", source_format_directive.getAttribute("format").getTypeName());
        source_format_directive_format_partition.setParentColumn("id");
        source_format_directive_format_partition.setValueColumn("format");
        source_format_directive_format_partition.setRelationName("source_format_directive_format");
        source_format_directive.getAttribute("format").setTypeName("source_format_directive_format");
        typeSystem.addType(source_format_directive_format_partition);

        Relation source_format_directive_format_relation = new Relation("source_format_directive_format");
        dbScheme.addRelation(source_format_directive_format_relation);
        source_format_directive_format_relation.addColumn("id", DBType.INT);
        source_format_directive_format_relation.addColumn("idx", DBType.INT);
        source_format_directive_format_relation.addColumn("format", DBType.VARCHAR);

        special_register.setRelationName("special_register");
        Relation special_register_relation = new Relation("special_register");
        dbScheme.addRelation(special_register_relation);
        special_register_relation.addColumn("id", DBType.INT);
        special_register_relation.addColumn("kind", DBType.INT);
        special_register_relation.addColumn("parent", DBType.INT);

        sql_aggregate_function.setRelationName("sql_aggregate_function");
        Relation sql_aggregate_function_relation = new Relation("sql_aggregate_function");
        dbScheme.addRelation(sql_aggregate_function_relation);
        sql_aggregate_function_relation.addColumn("id", DBType.INT);
        sql_aggregate_function_relation.addColumn("kind", DBType.INT);
        sql_aggregate_function_relation.addColumn("parent", DBType.INT);
        sql_aggregate_function_relation.addColumn("idx", DBType.INT);

        Partition sql_alter_stmt_subject_partition = new Partition("sql_alter_stmt_subject", sql_alter_stmt.getAttribute("subject").getTypeName());
        sql_alter_stmt_subject_partition.setParentColumn("id");
        sql_alter_stmt_subject_partition.setValueColumn("subject");
        sql_alter_stmt_subject_partition.setRelationName("sql_alter_stmt_subject");
        sql_alter_stmt.getAttribute("subject").setTypeName("sql_alter_stmt_subject");
        typeSystem.addType(sql_alter_stmt_subject_partition);

        Relation sql_alter_stmt_subject_relation = new Relation("sql_alter_stmt_subject");
        dbScheme.addRelation(sql_alter_stmt_subject_relation);
        sql_alter_stmt_subject_relation.addColumn("id", DBType.INT);
        sql_alter_stmt_subject_relation.addColumn("idx", DBType.INT);
        sql_alter_stmt_subject_relation.addColumn("subject", DBType.VARCHAR);

        sql_clause.setRelationName("sql_clause");
        Relation sql_clause_relation = new Relation("sql_clause");
        dbScheme.addRelation(sql_clause_relation);
        sql_clause_relation.addColumn("id", DBType.INT);
        sql_clause_relation.addColumn("kind", DBType.INT);
        sql_clause_relation.addColumn("parent", DBType.INT);
        sql_clause_relation.addColumn("idx", DBType.INT);

        sql_comparison_op.setRelationName("sql_comparison_op");
        Relation sql_comparison_op_relation = new Relation("sql_comparison_op");
        dbScheme.addRelation(sql_comparison_op_relation);
        sql_comparison_op_relation.addColumn("id", DBType.INT);
        sql_comparison_op_relation.addColumn("kind", DBType.INT);
        sql_comparison_op_relation.addColumn("parent", DBType.INT);

        Partition sql_cursor_name_name_partition = new Partition("sql_cursor_name_name", sql_cursor_name.getAttribute("name").getTypeName());
        sql_cursor_name_name_partition.setParentColumn("id");
        sql_cursor_name_name_partition.setValueColumn("name");
        sql_cursor_name_name_partition.setRelationName("sql_cursor_name_name");
        sql_cursor_name.getAttribute("name").setTypeName("sql_cursor_name_name");
        typeSystem.addType(sql_cursor_name_name_partition);

        Relation sql_cursor_name_name_relation = new Relation("sql_cursor_name_name");
        dbScheme.addRelation(sql_cursor_name_name_relation);
        sql_cursor_name_name_relation.addColumn("id", DBType.INT);
        sql_cursor_name_name_relation.addColumn("idx", DBType.INT);
        sql_cursor_name_name_relation.addColumn("name", DBType.VARCHAR);

        Partition sql_cursor_name_module_partition = new Partition("sql_cursor_name_module", sql_cursor_name.getAttribute("module").getTypeName());
        sql_cursor_name_module_partition.setParentColumn("id");
        sql_cursor_name_module_partition.setValueColumn("module");
        sql_cursor_name_module_partition.setRelationName("sql_cursor_name_module");
        sql_cursor_name.getAttribute("module").setTypeName("sql_cursor_name_module");
        typeSystem.addType(sql_cursor_name_module_partition);

        Relation sql_cursor_name_module_relation = new Relation("sql_cursor_name_module");
        dbScheme.addRelation(sql_cursor_name_module_relation);
        sql_cursor_name_module_relation.addColumn("id", DBType.INT);
        sql_cursor_name_module_relation.addColumn("idx", DBType.INT);
        sql_cursor_name_module_relation.addColumn("module", DBType.VARCHAR);

        sql_expr.setRelationName("sql_expr");
        Relation sql_expr_relation = new Relation("sql_expr");
        dbScheme.addRelation(sql_expr_relation);
        sql_expr_relation.addColumn("id", DBType.INT);
        sql_expr_relation.addColumn("kind", DBType.INT);
        sql_expr_relation.addColumn("parent", DBType.INT);
        sql_expr_relation.addColumn("idx", DBType.INT);

        Partition sql_host_parameter_name_name_partition = new Partition("sql_host_parameter_name_name", sql_host_parameter_name.getAttribute("name").getTypeName());
        sql_host_parameter_name_name_partition.setParentColumn("id");
        sql_host_parameter_name_name_partition.setValueColumn("name");
        sql_host_parameter_name_name_partition.setRelationName("sql_host_parameter_name_name");
        sql_host_parameter_name.getAttribute("name").setTypeName("sql_host_parameter_name_name");
        typeSystem.addType(sql_host_parameter_name_name_partition);

        Relation sql_host_parameter_name_name_relation = new Relation("sql_host_parameter_name_name");
        dbScheme.addRelation(sql_host_parameter_name_name_relation);
        sql_host_parameter_name_name_relation.addColumn("id", DBType.INT);
        sql_host_parameter_name_name_relation.addColumn("idx", DBType.INT);
        sql_host_parameter_name_name_relation.addColumn("name", DBType.VARCHAR);

        sql_into_target_list.setRelationName("sql_into_target_list");
        Relation sql_into_target_list_relation = new Relation("sql_into_target_list");
        dbScheme.addRelation(sql_into_target_list_relation);
        sql_into_target_list_relation.addColumn("id", DBType.INT);
        sql_into_target_list_relation.addColumn("parent", DBType.INT);

        Partition sql_like_predicate_pattern_partition = new Partition("sql_like_predicate_pattern", sql_like_predicate.getAttribute("pattern").getTypeName());
        sql_like_predicate_pattern_partition.setParentColumn("id");
        sql_like_predicate_pattern_partition.setValueColumn("pattern");
        sql_like_predicate_pattern_partition.setRelationName("sql_like_predicate_pattern");
        sql_like_predicate.getAttribute("pattern").setTypeName("sql_like_predicate_pattern");
        typeSystem.addType(sql_like_predicate_pattern_partition);

        Relation sql_like_predicate_pattern_relation = new Relation("sql_like_predicate_pattern");
        dbScheme.addRelation(sql_like_predicate_pattern_relation);
        sql_like_predicate_pattern_relation.addColumn("id", DBType.INT);
        sql_like_predicate_pattern_relation.addColumn("idx", DBType.INT);
        sql_like_predicate_pattern_relation.addColumn("pattern", DBType.VARCHAR);

        sql_reference.setRelationName("sql_reference");
        Relation sql_reference_relation = new Relation("sql_reference");
        dbScheme.addRelation(sql_reference_relation);
        sql_reference_relation.addColumn("id", DBType.INT);
        sql_reference_relation.addColumn("kind", DBType.INT);
        sql_reference_relation.addColumn("parent", DBType.INT);
        sql_reference_relation.addColumn("idx", DBType.INT);

        sql_selection_list.setRelationName("sql_selection_list");
        Relation sql_selection_list_relation = new Relation("sql_selection_list");
        dbScheme.addRelation(sql_selection_list_relation);
        sql_selection_list_relation.addColumn("id", DBType.INT);
        sql_selection_list_relation.addColumn("parent", DBType.INT);

        sql_spec.setRelationName("sql_spec");
        Relation sql_spec_relation = new Relation("sql_spec");
        dbScheme.addRelation(sql_spec_relation);
        sql_spec_relation.addColumn("id", DBType.INT);
        sql_spec_relation.addColumn("kind", DBType.INT);
        sql_spec_relation.addColumn("parent", DBType.INT);
        sql_spec_relation.addColumn("idx", DBType.INT);

        sql_stmt.setRelationName("sql_stmt");
        Relation sql_stmt_relation = new Relation("sql_stmt");
        dbScheme.addRelation(sql_stmt_relation);
        sql_stmt_relation.addColumn("id", DBType.INT);
        sql_stmt_relation.addColumn("kind", DBType.INT);
        sql_stmt_relation.addColumn("parent", DBType.INT);

        Partition sql_table_name_name_partition = new Partition("sql_table_name_name", sql_table_name.getAttribute("name").getTypeName());
        sql_table_name_name_partition.setParentColumn("id");
        sql_table_name_name_partition.setValueColumn("name");
        sql_table_name_name_partition.setRelationName("sql_table_name_name");
        sql_table_name.getAttribute("name").setTypeName("sql_table_name_name");
        typeSystem.addType(sql_table_name_name_partition);

        Relation sql_table_name_name_relation = new Relation("sql_table_name_name");
        dbScheme.addRelation(sql_table_name_name_relation);
        sql_table_name_name_relation.addColumn("id", DBType.INT);
        sql_table_name_name_relation.addColumn("idx", DBType.INT);
        sql_table_name_name_relation.addColumn("name", DBType.VARCHAR);

        Partition sql_table_name_schema_partition = new Partition("sql_table_name_schema", sql_table_name.getAttribute("schema").getTypeName());
        sql_table_name_schema_partition.setParentColumn("id");
        sql_table_name_schema_partition.setValueColumn("schema");
        sql_table_name_schema_partition.setRelationName("sql_table_name_schema");
        sql_table_name.getAttribute("schema").setTypeName("sql_table_name_schema");
        typeSystem.addType(sql_table_name_schema_partition);

        Relation sql_table_name_schema_relation = new Relation("sql_table_name_schema");
        dbScheme.addRelation(sql_table_name_schema_relation);
        sql_table_name_schema_relation.addColumn("id", DBType.INT);
        sql_table_name_schema_relation.addColumn("idx", DBType.INT);
        sql_table_name_schema_relation.addColumn("schema", DBType.VARCHAR);

        Partition sql_table_name_module_partition = new Partition("sql_table_name_module", sql_table_name.getAttribute("module").getTypeName());
        sql_table_name_module_partition.setParentColumn("id");
        sql_table_name_module_partition.setValueColumn("module");
        sql_table_name_module_partition.setRelationName("sql_table_name_module");
        sql_table_name.getAttribute("module").setTypeName("sql_table_name_module");
        typeSystem.addType(sql_table_name_module_partition);

        Relation sql_table_name_module_relation = new Relation("sql_table_name_module");
        dbScheme.addRelation(sql_table_name_module_relation);
        sql_table_name_module_relation.addColumn("id", DBType.INT);
        sql_table_name_module_relation.addColumn("idx", DBType.INT);
        sql_table_name_module_relation.addColumn("module", DBType.VARCHAR);

        Partition sql_table_name_catalog_partition = new Partition("sql_table_name_catalog", sql_table_name.getAttribute("catalog").getTypeName());
        sql_table_name_catalog_partition.setParentColumn("id");
        sql_table_name_catalog_partition.setValueColumn("catalog");
        sql_table_name_catalog_partition.setRelationName("sql_table_name_catalog");
        sql_table_name.getAttribute("catalog").setTypeName("sql_table_name_catalog");
        typeSystem.addType(sql_table_name_catalog_partition);

        Relation sql_table_name_catalog_relation = new Relation("sql_table_name_catalog");
        dbScheme.addRelation(sql_table_name_catalog_relation);
        sql_table_name_catalog_relation.addColumn("id", DBType.INT);
        sql_table_name_catalog_relation.addColumn("idx", DBType.INT);
        sql_table_name_catalog_relation.addColumn("catalog", DBType.VARCHAR);

        sql_table_reference_list.setRelationName("sql_table_reference_list");
        Relation sql_table_reference_list_relation = new Relation("sql_table_reference_list");
        dbScheme.addRelation(sql_table_reference_list_relation);
        sql_table_reference_list_relation.addColumn("id", DBType.INT);
        sql_table_reference_list_relation.addColumn("parent", DBType.INT);

        stmt.setRelationName("stmt");
        Relation stmt_relation = new Relation("stmt");
        dbScheme.addRelation(stmt_relation);
        stmt_relation.addColumn("id", DBType.INT);
        stmt_relation.addColumn("kind", DBType.INT);
        stmt_relation.addColumn("parent", DBType.INT);
        stmt_relation.addColumn("idx", DBType.INT);

        stmt_list.setRelationName("stmt_list");
        Relation stmt_list_relation = new Relation("stmt_list");
        dbScheme.addRelation(stmt_list_relation);
        stmt_list_relation.addColumn("id", DBType.INT);
        stmt_list_relation.addColumn("parent", DBType.INT);

        Partition stop_endpoint_partition = new Partition("stop_endpoint", stop.getAttribute("endpoint").getTypeName());
        stop_endpoint_partition.setParentColumn("id");
        stop_endpoint_partition.setValueColumn("endpoint");
        stop_endpoint_partition.setRelationName("stop_endpoint");
        stop.getAttribute("endpoint").setTypeName("stop_endpoint");
        typeSystem.addType(stop_endpoint_partition);

        Relation stop_endpoint_relation = new Relation("stop_endpoint");
        dbScheme.addRelation(stop_endpoint_relation);
        stop_endpoint_relation.addColumn("id", DBType.INT);
        stop_endpoint_relation.addColumn("idx", DBType.INT);
        stop_endpoint_relation.addColumn("endpoint", DBType.VARCHAR);

        Partition stop_literal_partition = new Partition("stop_literal", stop.getAttribute("literal").getTypeName());
        stop_literal_partition.setParentColumn("id");
        stop_literal_partition.setValueColumn("literal");
        stop_literal_partition.setRelationName("stop_literal");
        stop.getAttribute("literal").setTypeName("stop_literal");
        typeSystem.addType(stop_literal_partition);

        Relation stop_literal_relation = new Relation("stop_literal");
        dbScheme.addRelation(stop_literal_relation);
        stop_literal_relation.addColumn("id", DBType.INT);
        stop_literal_relation.addColumn("idx", DBType.INT);
        stop_literal_relation.addColumn("literal", DBType.VARCHAR);

        subscript_list.setRelationName("subscript_list");
        Relation subscript_list_relation = new Relation("subscript_list");
        dbScheme.addRelation(subscript_list_relation);
        subscript_list_relation.addColumn("id", DBType.INT);
        subscript_list_relation.addColumn("parent", DBType.INT);

        text.setRelationName("text");
        Relation text_relation = new Relation("text");
        dbScheme.addRelation(text_relation);
        text_relation.addColumn("id", DBType.INT);
        text_relation.addColumn("kind", DBType.INT);

        unit.setRelationName("unit");
        Relation unit_relation = new Relation("unit");
        dbScheme.addRelation(unit_relation);
        unit_relation.addColumn("id", DBType.INT);
        unit_relation.addColumn("kind", DBType.INT);
        unit_relation.addColumn("parent", DBType.INT);
        unit_relation.addColumn("idx", DBType.INT);

        unit_list.setRelationName("unit_list");
        Relation unit_list_relation = new Relation("unit_list");
        dbScheme.addRelation(unit_list_relation);
        unit_list_relation.addColumn("id", DBType.INT);
        unit_list_relation.addColumn("parent", DBType.INT);

        Partition usage_clause_operand_partition = new Partition("usage_clause_operand", usage_clause.getAttribute("operand").getTypeName());
        usage_clause_operand_partition.setParentColumn("id");
        usage_clause_operand_partition.setValueColumn("operand");
        usage_clause_operand_partition.setRelationName("usage_clause_operand");
        usage_clause.getAttribute("operand").setTypeName("usage_clause_operand");
        typeSystem.addType(usage_clause_operand_partition);

        Relation usage_clause_operand_relation = new Relation("usage_clause_operand");
        dbScheme.addRelation(usage_clause_operand_relation);
        usage_clause_operand_relation.addColumn("id", DBType.INT);
        usage_clause_operand_relation.addColumn("idx", DBType.INT);
        usage_clause_operand_relation.addColumn("operand", DBType.VARCHAR);

        when_object_list.setRelationName("when_object_list");
        Relation when_object_list_relation = new Relation("when_object_list");
        dbScheme.addRelation(when_object_list_relation);
        when_object_list_relation.addColumn("id", DBType.INT);
        when_object_list_relation.addColumn("parent", DBType.INT);

    }
}
