/* Cobol Database Scheme. */

/*** Standard fragments ***/

/** Files and folders **/

@location = @location_default;
 
locations_default(unique int id: @location_default,
          int file: @file ref,
          int beginLine: int ref,
          int beginColumn: int ref,
          int endLine: int ref,
          int endColumn: int ref
         );
 
@sourceline = @file | @text | @unit /* TODO add alternatives */;
 
numlines(int element_id: @sourceline ref,
         int num_lines: int ref,
         int num_code: int ref,
         int num_comment: int ref,
         int num_water: int ref
        );
 
 
/*
  fromSource(0) = unknown,
  fromSource(1) = from source,
  fromSource(2) = from library
*/
files(unique int id: @file,
      varchar(900) name: string ref,
      varchar(900) simple: string ref,
      varchar(900) ext: string ref,
      int fromSource: int ref);
 
folders(unique int id: @folder,
        varchar(900) name: string ref,
        varchar(900) simple: string ref);
 
 
@container = @folder | @file ;
 
 
containerparent(int parent: @container ref,
                unique int child: @container ref);

/** Duplicate code **/

duplicateCode(
  unique int id : @duplication,
  varchar(900) relativePath : string ref,
  int equivClass : int ref);
 
similarCode(
  unique int id : @similarity,
  varchar(900) relativePath : string ref,
  int equivClass : int ref);
 
@duplication_or_similarity = @duplication | @similarity;
 
tokens(
  int id : @duplication_or_similarity ref,
  int offset : int ref,
  int beginLine : int ref,
  int beginColumn : int ref,
  int endLine : int ref,
  int endColumn : int ref);

/** External data **/

externalDefects(
  unique int id : @externalDefect,
  varchar(900) queryPath : string ref,
  int location : @location ref,
  varchar(900) message : string ref,
  float severity : float ref
);
 
externalMetrics(
  unique int id : @externalMetric,
  varchar(900) queryPath : string ref,
  int location : @location ref,
  float value : float ref
);
 
externalData(
  int id : @externalDataElement,
  varchar(900) path : string ref,
  int column: int ref,
  varchar(900) value : string ref
);
 
snapshotDate(unique date snapshotDate : date ref);
 
sourceLocationPrefix(varchar(900) prefix : string ref);

/** Version control data **/

svnentries(
  int id : @svnentry,
  varchar(500) revision : string ref,
  varchar(500) author : string ref,
  date revisionDate : date ref,
  int changeSize : int ref
);
 
svnaffectedfiles(
  int id : @svnentry ref,
  int file : @file ref,
  varchar(500) action : string ref
);
 
svnentrymsg(
  int id : @svnentry ref,
  varchar(500) message : string ref
);
 
svnchurn(
  int commit : @svnentry ref,
  int file : @file ref,
  int addedLines : int ref,
  int deletedLines : int ref
);


/*** This section has been manually added ***/

hasLocation (unique int locatable: @locatable ref,
             int location: @location ref);

commentScopes (unique int comment: @comment ref,
             int location: @location ref);

@halstead_countable = @unit /* TODO add alternatives */;
 
halstead_counts(unique int halstead_countable: @halstead_countable ref,
          int n1: int ref,
          int n2: int ref,
          int N1: int ref,
          int N2: int ref
         );

successors(int predecessor: @ast_node ref, int successor: @ast_node ref);

errors(
  unique int id: @error,
  varchar(900) message: string ref,
  int context : int ref
);

compgenerated(
  unique int id: @ast_node ref
);

$AST_SCHEME$

@locatable = @file | @ast_node | @error;
